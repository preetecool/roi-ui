{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "expandable-card",
  "type": "registry:item",
  "title": "Expandable Card",
  "description": "A card component that can expand to show more content.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/brook/ui/expandable-card/expandable-card.tsx",
      "content": "\"use client\";\nimport { Plus, X } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\nimport {\n  ScrollArea,\n  ScrollAreaContent,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaViewport,\n} from \"../scroll-area/scroll-area\";\nimport styles from \"./expandable-card.module.css\";\n\ninterface ExpandableCardItem {\n  id: string | number;\n  src: string;\n  alt: string;\n  cardHeading: string;\n  content?: React.ReactNode;\n}\n\ninterface ExpandableCardModalProps {\n  item: ExpandableCardItem;\n  onClose: () => void;\n}\n\nfunction ExpandableCardModal({ item, onClose }: ExpandableCardModalProps) {\n  return (\n    <>\n      <motion.div\n        className={styles.overlay}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        onClick={onClose}\n      />\n\n      <motion.div className={styles.modal} layoutId={`card-${item.id}`} style={{ borderRadius: \"24px\" }}>\n        <button className={styles.closeButton} onClick={onClose} aria-label=\"Close modal\">\n          <X width={16} height={16} strokeWidth={2.5} />\n        </button>\n        <ScrollArea className={styles.modalScrollArea}>\n          <ScrollAreaViewport className={styles.modalScrollViewport}>\n            <ScrollAreaContent className={styles.modalScrollContent}>\n              <div className={styles.modalContent}>\n                <motion.div layoutId={`image-${item.id}`} className=\"imageContainer\">\n                  <Image\n                    src={item.src}\n                    className={styles.image}\n                    alt={`Character ${item.id}`}\n                    width={600}\n                    height={600}\n                    style={{ borderRadius: \"12px\" }}\n                  />\n                </motion.div>\n\n                <motion.div className={`${styles.contentContainerOpen} ${styles.contentContainerModal}`}>\n                  <motion.div layoutId={`heading-container-${item.id}`} className={styles.headingContainer}>\n                    <motion.h3 className={styles.cardHeadingLarge}>{item.cardHeading}</motion.h3>\n                  </motion.div>\n\n                  <motion.div\n                    className={styles.contentInner}\n                    initial={{ opacity: 0.8 }}\n                    animate={{\n                      opacity: 1,\n                    }}\n                    exit={{ opacity: 0 }}\n                    transition={{\n                      duration: 0.2,\n                    }}\n                  >\n                    <motion.div>{item.content}</motion.div>\n                  </motion.div>\n                </motion.div>\n              </div>\n            </ScrollAreaContent>\n          </ScrollAreaViewport>\n          <ScrollAreaScrollbar orientation=\"vertical\">\n            <ScrollAreaThumb />\n          </ScrollAreaScrollbar>\n        </ScrollArea>\n      </motion.div>\n    </>\n  );\n}\n\ninterface ExpandableCardProps {\n  items: ExpandableCardItem[];\n}\n\nexport default function ExpandableCard({ items }: ExpandableCardProps) {\n  const [selectedId, setSelectedId] = useState<string | number | null>(null);\n\n  const selectedItem = selectedId ? items.find((item) => item.id === selectedId) : null;\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && selectedId) {\n        setSelectedId(null);\n      }\n      if (selectedId && items.length > 1) {\n        const currentIndex = items.findIndex((item) => item.id === selectedId);\n        if (e.key === \"ArrowRight\" || e.key === \"ArrowDown\") {\n          e.preventDefault();\n          const nextIndex = currentIndex + 1 >= items.length ? 0 : currentIndex + 1;\n          setSelectedId(items[nextIndex].id);\n        }\n        if (e.key === \"ArrowLeft\" || e.key === \"ArrowUp\") {\n          e.preventDefault();\n          const prevIndex = currentIndex - 1 < 0 ? items.length - 1 : currentIndex - 1;\n          setSelectedId(items[prevIndex].id);\n        }\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [selectedId, items]);\n\n  useEffect(() => {\n    if (selectedId) {\n      const originalBodyOverflow = document.body.style.overflow;\n      const originalHtmlOverflow = document.documentElement.style.overflow;\n\n      document.body.style.overflow = \"hidden\";\n      document.documentElement.style.overflow = \"hidden\";\n\n      const preventDefault = (e: TouchEvent) => {\n        const target = e.target as Element;\n        const scrollableArea =\n          target.closest(\"[data-scroll-area-viewport]\") ||\n          target.closest(`.${styles.modalScrollViewport}`) ||\n          target.closest(`.${styles.modalScrollArea}`);\n        if (!scrollableArea) {\n          e.preventDefault();\n        }\n      };\n\n      document.addEventListener(\"touchmove\", preventDefault, {\n        passive: false,\n      });\n\n      return () => {\n        document.body.style.overflow = originalBodyOverflow;\n        document.documentElement.style.overflow = originalHtmlOverflow;\n        document.removeEventListener(\"touchmove\", preventDefault);\n      };\n    }\n  }, [selectedId]);\n\n  return (\n    <div>\n      <div className={styles.grid}>\n        {items.map((item) => (\n          <div key={item.id}>\n            <button\n              className={styles.cardButton}\n              aria-label={`View details for ${item.cardHeading}`}\n              onClick={() => setSelectedId(item.id)}\n            >\n              <motion.div\n                className={styles.card}\n                layoutId={`card-${item.id}`}\n                initial={false}\n                style={{ borderRadius: \"24px\" }}\n              >\n                <motion.div layoutId={`image-${item.id}`} className={styles.imageContainer} initial={false}>\n                  <Image src={item.src} className={styles.image} alt={item.alt} width={600} height={600} />\n                </motion.div>\n\n                <motion.div className={styles.contentContainer} initial={false}>\n                  <motion.div\n                    layoutId={`heading-container-${item.id}`}\n                    className={styles.headingContainer}\n                    initial={false}\n                  >\n                    <motion.h3 className={styles.cardHeadingSmall} initial={false}>\n                      {item.cardHeading}\n                    </motion.h3>\n                  </motion.div>\n                  <div className={styles.expandIcon}>\n                    <Plus width={21} height={21} strokeWidth={2.5} />\n                  </div>\n                </motion.div>\n              </motion.div>\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <AnimatePresence>\n        {selectedItem && (\n          <ExpandableCardModal key=\"modal\" item={selectedItem} onClose={() => setSelectedId(null)} />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport type { ExpandableCardItem };\n",
      "type": "registry:file",
      "target": "~/components/ui/expandable-card/expandable-card.tsx"
    },
    {
      "path": "registry/brook/ui/expandable-card/expandable-card.module.css",
      "content": ".grid {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  padding: 24px;\n  z-index: 101;\n}\n\n.cardButton {\n  all: unset;\n  cursor: pointer;\n  border-radius: var(--radius);\n}\n\n.cardButton:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n  box-shadow:\n    var(--shadow-md),\n    0 0 0 4px var(--ring);\n}\n\n.card {\n  background: color-mix(in oklch, var(--card) 33%, var(--background));\n  border: 1px solid var(--border-dark);\n  border-radius: var(--radius);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 320px;\n  max-width: 320px;\n}\n\n.imageContainer {\n  height: 320px;\n  overflow: hidden;\n  border-radius: var(--radius) var(--radius) 0 0;\n}\n\n.image {\n  width: 100%;\n  height: 100%;\n}\n\n.modal .image {\n  height: 600px;\n  width: 600px;\n  object-fit: contain;\n}\n\n.expandIcon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--muted-foreground);\n  width: 36px;\n  height: 36px;\n  min-width: 36px;\n  min-height: 36px;\n  border-radius: 50%;\n  border: 1px solid var(--border-dark);\n  margin-left: auto;\n  flex-shrink: 0;\n}\n\n.cardButton:hover .expandIcon {\n  color: var(--foreground);\n  background-color: var(--muted);\n  transition: 200ms ease-out;\n}\n\n.contentContainer {\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  width: 100%;\n  height: auto;\n  gap: 24px;\n  text-align: left;\n}\n\n.contentContainerOpen {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  height: auto;\n  gap: 24px;\n  text-align: left;\n  padding-top: 28px !important;\n}\n\n.contentContainerModal {\n  max-width: 600px;\n  margin: 0 auto;\n  padding-top: 28px;\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n  width: 100%;\n}\n\n.cardHeadingSmall {\n  font-size: var(--font-size-2xl);\n  font-weight: 600;\n  color: var(--title);\n  margin: 0 !important;\n  letter-spacing: -0.025em !important;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  display: block;\n  font-family: inherit;\n}\n\n.cardHeadingLarge {\n  font-size: var(--font-size-3xl) !important;\n  font-weight: 600;\n  color: var(--title);\n  margin: 0 !important;\n  letter-spacing: -0.025em !important   ;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  display: block;\n  font-family: inherit;\n  text-align: left;\n}\n\n.overlay {\n  position: fixed;\n  inset: 0;\n  background-color: var(--background);\n  z-index: 100;\n}\n\n.modal {\n  position: fixed;\n  inset: 8vh 0 0 0;\n  z-index: 102;\n  cursor: pointer;\n  outline: none;\n  max-width: 900px;\n  margin-inline: auto;\n  background: color-mix(in oklch, var(--card) 33%, var(--background));\n  padding-block: 1em 2em;\n}\n\n.modalContent {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding-bottom: 8vh;\n}\n\n.contentInner {\n  font-weight: 400;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.closeButton {\n  position: absolute;\n  top: 18px;\n  right: 18px;\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  border: 1px solid var(--border-dark);\n  padding: 0;\n  z-index: 104;\n  background: transparent;\n  color: var(--muted-foreground);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.closeButton:hover {\n  color: var(--foreground);\n  background-color: var(--muted);\n  transition: 200ms ease-out;\n}\n\n.modalScrollArea {\n  width: 100% !important;\n  height: 100% !important;\n  max-width: none !important;\n  max-height: none !important;\n  mask-image: linear-gradient(\n    to bottom,\n    transparent 0,\n    var(--card) calc(8vh / 2),\n    var(--background) 8vh,\n    black calc(100% - 8vh),\n    rgba(0, 0, 0, 0.2) calc(100% - 8vh / 2),\n    transparent 100%\n  );\n}\n\n.modalScrollViewport {\n  border: none !important;\n  outline: none !important;\n  border-radius: 0 !important;\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  touch-action: pan-y;\n  overscroll-behavior: contain;\n}\n\n.modalScrollContent {\n  padding: 0 !important;\n}\n\n.contentInner p {\n  padding-bottom: 12px;\n}\n\n@media (max-width: 768px) {\n  .grid {\n    gap: 16px;\n    padding: 16px;\n  }\n\n  .imageContainer {\n    width: 100%;\n  }\n\n  .modal {\n    padding: 16px;\n  }\n\n  .modalContent {\n    max-height: 95vh;\n  }\n\n  .modalContent .imageContainer {\n    height: 280px;\n    width: 280px;\n    align-self: flex-start;\n  }\n\n  .modal .image {\n    width: 320px;\n    height: 320px;\n  }\n\n  .contentContainer {\n    padding: 16px;\n  }\n  .card {\n    width: 100%;\n  }\n\n  .contentInner p {\n    font-size: calc(1rem - 2px);\n    max-width: 90%;\n  }\n\n  .contentContainerOpen {\n    gap: 24px;\n  }\n}\n\n@media (max-width: 490px) {\n  .grid {\n    flex-direction: column;\n    height: auto;\n    min-height: 100vh;\n  }\n\n  .imageContainer {\n    width: 100%;\n    height: 100%;\n  }\n\n  .closeButton {\n    width: 32px;\n    height: 32px;\n  }\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .card,\n  .image,\n  .closeButton {\n    transition: none;\n    animation: none;\n  }\n}\n\n@media (prefers-contrast: high) {\n  .card {\n    border-width: 2px;\n  }\n\n  .closeButton {\n    background: var(--foreground);\n    border: 2px solid var(--background);\n    color: var(--background);\n  }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/expandable-card/expandable-card.module.css"
    }
  ]
}