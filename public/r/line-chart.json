{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart",
  "type": "registry:item",
  "title": "Line Chart",
  "description": "Interactive line charts with optional data points and smooth animations.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nexport interface ChartTooltipProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string | number;\n  labelFormatter?: (value: any) => string;\n  valueFormatter?: (value: any, name?: string) => string;\n}\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n}: ChartTooltipProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  const formatLabel = (value: any) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: any, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === 'number') {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}>\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry: any, index: number) => (\n        <div key={index} style={{ \n          fontSize: \"11px\", \n          marginBottom: \"2px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          gap: \"12px\"\n        }}>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>\n              {entry.name || entry.dataKey}\n            </span>\n          </div>\n          <span style={{ \n            fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\", \n            fontWeight: \"500\" \n          }}>\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/line-chart.tsx",
      "content": "\"use client\";\n\nimport {\n  LineChart as RechartsLineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Dot,\n} from \"recharts\";\nimport ChartTooltip from \"./chart-tooltip\";\nimport styles from \"./line-chart.module.css\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface LineChartData {\n  date: NumberValue;\n  value: number;\n  type: string;\n}\n\nexport type CurveType = \"linear\" | \"monotoneX\" | \"cardinal\" | \"basis\" | \"step\";\n\nexport interface LineChartProps {\n  data: LineChartData[];\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  curve?: CurveType;\n  showPoints?: boolean;\n  pointSize?: number;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  animated?: boolean;\n}\n\nfunction LineChart({\n  data,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = true,\n  showYGrid = true,\n  curve = \"linear\",\n  showPoints = false,\n  pointSize = 4,\n  xAxisFormatter,\n  animated = false,\n}: LineChartProps) {\n  const uniqueTypes = Array.from(new Set(data.map((d) => d.type)));\n  const colors = [\"var(--chart1)\", \"var(--chart2)\"];\n\n  const formatDate = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return Math.round(Number(value)).toString();\n  };\n\n  const tooltipLabelFormatter = (value: NumberValue | string) => formatDate(value);\n\n  interface DotProps {\n    cx?: number;\n    cy?: number;\n    payload?: LineChartData;\n    [key: string]: unknown;\n  }\n\n  const CustomDot = (props: DotProps) => {\n    const { cx, cy, payload } = props;\n    if (showPoints && cx !== undefined && cy !== undefined && payload) {\n      return (\n        <Dot\n          cx={cx}\n          cy={cy}\n          r={pointSize}\n          fill={colors[uniqueTypes.indexOf(payload.type)]}\n          stroke=\"var(--background)\"\n          strokeWidth={2}\n        />\n      );\n    }\n    return null;\n  };\n\n  interface GroupedDataItem {\n    date: NumberValue;\n    [key: string]: NumberValue | number;\n  }\n\n  const groupedData = data.reduce((acc: GroupedDataItem[], curr) => {\n    const existingDate = acc.find((item) => item.date === curr.date);\n    if (existingDate) {\n      existingDate[curr.type] = curr.value;\n    } else {\n      acc.push({\n        date: curr.date,\n        [curr.type]: curr.value,\n      });\n    }\n    return acc;\n  }, []);\n\n  return (\n    <div\n      className={styles.lineChart}\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RechartsLineChart data={groupedData} margin={{ top: 10, right: 10, left: -5, bottom: 20 }}>\n          {showXGrid ||\n            (showYGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" strokeOpacity={0.2} />)}\n          {showXAxis && (\n            <XAxis\n              dataKey=\"date\"\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              tickFormatter={formatDate}\n              interval=\"preserveStartEnd\"\n              ticks={[1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025]}\n            />\n          )}\n          {showYAxis && (\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              width={30}\n            />\n          )}\n          <Tooltip content={<ChartTooltip labelFormatter={tooltipLabelFormatter} />} />\n          {uniqueTypes.map((type, index) => (\n            <Line\n              key={type}\n              type=\"monotone\"\n              dataKey={type}\n              stroke={colors[index % colors.length]}\n              strokeWidth={3}\n              dot={showPoints ? <CustomDot /> : false}\n              animationDuration={animated ? 800 : 0}\n              animationBegin={animated ? index * 200 : undefined}\n            />\n          ))}\n        </RechartsLineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default LineChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/line-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/line-chart.module.css",
      "content": ".lineChart {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.lineChart *:focus,\n.lineChart *:focus-visible {\n    outline: none !important;\n}",
      "type": "registry:file",
      "target": "~/components/ui/charts/line-chart.module.css"
    }
  ]
}