{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-chat-tailwind",
  "type": "registry:block",
  "title": "AI Chat (Tailwind)",
  "description": "An AI chat input component with mode selector and action buttons.",
  "registryDependencies": [
    "https://roiui.com/r/button-tailwind.json",
    "https://roiui.com/r/card-tailwind.json",
    "https://roiui.com/r/field-tailwind.json",
    "https://roiui.com/r/form-tailwind.json",
    "https://roiui.com/r/select-tailwind.json"
  ],
  "files": [
    {
      "path": "registry/brook/tailwind/blocks/ai-chat.tsx",
      "content": "\"use client\";\n\nimport {\n  ArrowUp,\n  AudioLines,\n  GraduationCap,\n  Lightbulb,\n  Paperclip,\n  WandSparkles,\n  Zap,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/tw-utils\";\nimport { Button } from \"@/registry/brook/tailwind/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n} from \"@/registry/brook/tailwind/ui/card\";\nimport { Field, FieldControl } from \"@/registry/brook/tailwind/ui/field\";\nimport { Form } from \"@/registry/brook/tailwind/ui/form\";\nimport {\n  Select,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectPopup,\n  SelectPortal,\n  SelectPositioner,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/brook/tailwind/ui/select\";\n\nconst aiModes = [\n  { value: \"creative\", label: \"Creative\", icon: WandSparkles },\n  { value: \"fast\", label: \"Fast\", icon: Zap },\n  { value: \"reasoning\", label: \"Reason\", icon: Lightbulb },\n  { value: \"teach\", label: \"Teach\", icon: GraduationCap },\n];\n\nexport function AiChat() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState<string>(aiModes[0].value);\n\n  return (\n    <Form className=\"w-full max-sm:flex max-sm:items-center max-sm:justify-center max-xl:h-full\">\n      <Card\n        className={cn(\n          \"h-auto w-full flex-1 gap-3 rounded-[var(--radius-lg)] border-[var(--border)] bg-[var(--mix-card-50-bg)] p-3\",\n          \"min-w-0 max-w-none\",\n          \"max-xl:h-full\",\n          \"max-sm:mx-auto\"\n        )}\n      >\n        <CardContent>\n          <Field\n            className={cn(\n              \"[&_textarea]:resize-none [&_textarea]:border-none [&_textarea]:bg-transparent [&_textarea]:p-1\",\n              \"[&_textarea]:h-auto [&_textarea]:min-h-10 [&_textarea]:outline-none\",\n              \"max-xl:[&_textarea]:h-full max-xl:[&_textarea]:min-h-16 max-xl:[&_textarea]:p-2\"\n            )}\n          >\n            <FieldControl\n              placeholder=\"Ask and i'll answer.\"\n              render={\n                <textarea\n                  onChange={(e) => setInputValue(e.target.value)}\n                  style={{ outline: \"none\" }}\n                  value={inputValue}\n                />\n              }\n            />\n          </Field>\n        </CardContent>\n        <CardFooter className=\"flex items-center justify-between gap-2\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              className=\"rounded-full p-2 [&>svg:first-child]:rotate-[-45deg]\"\n              size=\"icon\"\n              style={{ width: \"32px\", height: \"32px\", borderRadius: \"50%\" }}\n              type=\"button\"\n              variant=\"outline\"\n            >\n              <Paperclip size={14} />\n            </Button>\n\n            <Select\n              defaultValue={aiModes[0].value}\n              items={aiModes}\n              onValueChange={(value) => setSelectedItem(value as string)}\n              value={selectedItem}\n            >\n              <SelectTrigger render={<Button size=\"sm\" variant=\"outline\" />}>\n                <SelectValue>\n                  {(value) => {\n                    const selectedMode = aiModes.find(\n                      (mode) => mode.value === value\n                    );\n                    const IconComponent = selectedMode?.icon;\n                    return (\n                      <div className=\"flex w-full items-center gap-2\">\n                        {IconComponent && <IconComponent size={14} />}\n                        <span>{selectedMode?.label}</span>\n                      </div>\n                    );\n                  }}\n                </SelectValue>\n                <SelectIcon />\n              </SelectTrigger>\n              <SelectPortal>\n                <SelectPositioner alignItemWithTrigger={false} sideOffset={8}>\n                  <SelectPopup className=\"box-border w-36 min-w-36 max-w-36 p-1\">\n                    {aiModes.map(({ label, value, icon: IconComponent }) => (\n                      <SelectItem key={value} value={value}>\n                        <div className=\"flex w-full items-center gap-2\">\n                          <IconComponent size={14} />\n                          <SelectItemText>{label}</SelectItemText>\n                          <SelectItemIndicator />\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectPopup>\n                </SelectPositioner>\n              </SelectPortal>\n            </Select>\n          </div>\n\n          <Button\n            className=\"rounded-full p-2\"\n            size=\"icon\"\n            style={{ borderRadius: \"50%\", width: \"36px\", height: \"36px\" }}\n            type=\"submit\"\n            variant=\"outline\"\n          >\n            {inputValue.trim() ? (\n              <ArrowUp size={16} />\n            ) : (\n              <AudioLines size={16} />\n            )}\n          </Button>\n        </CardFooter>\n      </Card>\n    </Form>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/ai-chat/ai-chat.tsx"
    }
  ]
}