{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:item",
  "title": "Combobox",
  "description": "A searchable select component.",
  "files": [
    {
      "path": "registry/brook/ui/combobox/combobox.tsx",
      "content": "\"use client\";\n\nimport { forwardRef, useState, useRef } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/brook/ui/button/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/brook/ui/command/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/brook/ui/popover/popover\";\nimport styles from \"./combobox.module.css\";\n\ninterface ComboboxOption {\n  value: string;\n  label: string;\n  [key: string]: unknown;\n}\n\ninterface ComboboxProps {\n  options: Array<ComboboxOption>;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  emptyText?: string;\n  className?: string;\n  disabled?: boolean;\n  renderOption?: (option: ComboboxOption, isSelected: boolean) => React.ReactNode;\n  renderTrigger?: (selectedOption: ComboboxOption | undefined) => React.ReactNode;\n  contentWidth?: string | number;\n}\n\nconst ComboboxRoot = forwardRef<HTMLDivElement, ComboboxProps>(\n  (\n    {\n      options,\n      value,\n      onValueChange,\n      placeholder = \"Select option...\",\n      searchPlaceholder = \"Search...\",\n      emptyText = \"No option found.\",\n      className,\n      renderOption,\n      renderTrigger,\n      contentWidth,\n      ...props\n    },\n    ref,\n  ) => {\n    const [open, setOpen] = useState(false);\n    const triggerRef = useRef<HTMLButtonElement>(null);\n\n    const selectedOption = options.find((option) => option.value === value);\n\n    const handleSelect = (currentValue: string) => {\n      onValueChange?.(currentValue === value ? \"\" : currentValue);\n      setOpen(false);\n\n      setTimeout(() => {\n        triggerRef.current?.blur();\n      }, 0);\n    };\n\n    const handleOpenChange = (newOpen: boolean) => {\n      setOpen(newOpen);\n\n      if (!newOpen) {\n        setTimeout(() => {\n          triggerRef.current?.blur();\n        }, 0);\n      }\n    };\n\n    return (\n      <div ref={ref} className={cn(styles.root, className)} {...props}>\n        <Popover open={open} onOpenChange={handleOpenChange}>\n          <PopoverTrigger className={styles.trigger} render={<Button variant=\"outline\" ref={triggerRef} />}>\n            {renderTrigger && selectedOption\n              ? renderTrigger(selectedOption)\n              : selectedOption\n                ? selectedOption.label\n                : placeholder}\n            <ChevronsUpDown className={styles.chevron} />\n          </PopoverTrigger>\n          <PopoverContent\n            className={styles.content}\n            style={contentWidth ? { padding: 0, width: contentWidth, minWidth: contentWidth } : { minWidth: \"200px\" }}\n          >\n            <Command>\n              <CommandInput\n                placeholder={searchPlaceholder}\n                className={styles.input}\n                style={{ borderBottom: \"1px solid var(--border)\", borderRadius: \"0\" }}\n              />\n\n              <CommandList>\n                <CommandEmpty>{emptyText}</CommandEmpty>\n                <CommandGroup>\n                  {options.map((option) => {\n                    const isSelected = value === option.value;\n                    return (\n                      <CommandItem\n                        key={option.value}\n                        value={option.value}\n                        onSelect={() => handleSelect(option.value)}\n                        className={styles.item}\n                      >\n                        {renderOption ? renderOption(option, isSelected) : option.label}\n                        <Check className={cn(styles.checkIcon, isSelected ? styles.visible : styles.hidden)} />\n                      </CommandItem>\n                    );\n                  })}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </div>\n    );\n  },\n);\n\nComboboxRoot.displayName = \"Combobox\";\n\nexport { ComboboxRoot as Combobox };\nexport type { ComboboxProps, ComboboxOption };\n",
      "type": "registry:file",
      "target": "~/components/ui/combobox/combobox.tsx"
    },
    {
      "path": "registry/brook/ui/combobox/combobox.module.css",
      "content": ".root {\n    position: relative;\n    border: none;\n    width: 100%;\n}\n\n.popover {\n    /*width: 200px;*/\n    background-color: var(--card);\n}\n\n.trigger {\n    width: 100%;\n    justify-content: space-between !important;\n    height: auto;\n    min-height: 2.5rem;\n    padding: 0.5rem 0.75rem;\n    text-align: left;\n}\n\n.chevron {\n    margin-left: 0.5rem;\n    height: 1rem;\n    width: 1rem;\n    flex-shrink: 0;\n    opacity: 0.5;\n}\n\n.content {\n    padding: 0;\n    width: 100%;\n    min-width: 200px;\n    max-width: 400px;\n}\n\n.input {\n    height: 2.25rem;\n}\n\n.item {\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.5rem 0.75rem;\n    font-size: 0.875rem;\n    cursor: pointer;\n    border-radius: var(--radius);\n    transition: background-color 150ms ease;\n}\n\n.item:hover {\n    background-color: var(--accent);\n\n    color: var(--foreground);\n}\n\n.checkIcon {\n    height: 1rem;\n    width: 1rem;\n    flex-shrink: 0;\n    margin-left: auto;\n    transition: opacity 150ms ease;\n}\n\n.checkIcon.visible {\n    opacity: 1;\n}\n\n.checkIcon.hidden {\n    opacity: 0;\n}\n\n.disabled {\n    pointer-events: none;\n    opacity: 0.6;\n}\n\n.trigger:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n@media (max-width: 640px) {\n    .content {\n        max-width: calc(100vw - 2rem);\n    }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/combobox/combobox.module.css"
    }
  ]
}