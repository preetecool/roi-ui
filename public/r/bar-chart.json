{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bar-chart",
  "type": "registry:item",
  "title": "Bar Chart",
  "description": "Animated vertical bar charts with hover highlighting and customizable styling.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nexport interface ChartTooltipProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string | number;\n  labelFormatter?: (value: any) => string;\n  valueFormatter?: (value: any, name?: string) => string;\n}\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n}: ChartTooltipProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  const formatLabel = (value: any) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: any, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === 'number') {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}>\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry: any, index: number) => (\n        <div key={index} style={{ \n          fontSize: \"11px\", \n          marginBottom: \"2px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          gap: \"12px\"\n        }}>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>\n              {entry.name || entry.dataKey}\n            </span>\n          </div>\n          <span style={{ \n            fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\", \n            fontWeight: \"500\" \n          }}>\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/bar-chart.tsx",
      "content": "\"use client\";\n\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\nimport styles from \"./bar-chart.module.css\";\nimport ChartTooltip from \"./chart-tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface BarChartData {\n  category: string;\n  amount: number;\n  type: string;\n}\n\nexport interface BarChartProps {\n  data: BarChartData[];\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  useGradient?: boolean;\n  animated?: boolean;\n}\n\nfunction BarChart({\n  data,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = false,\n  showYGrid = true,\n  xAxisFormatter,\n  animated = false,\n}: BarChartProps) {\n  const color = \"var(--chart1)\";\n\n  const formatCategory = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return String(value);\n  };\n\n  const tooltipLabelFormatter = (value: any) => formatCategory(value);\n\n  const tooltipValueFormatter = (value: any, name?: string) => {\n    return `$${value.toLocaleString()}k`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (!active || !payload || !payload.length) return null;\n    \n    const data = payload[0];\n    return (\n      <ChartTooltip \n        active={active}\n        payload={[{\n          ...data,\n          name: \"Sales\",\n          color: color\n        }]}\n        label={label}\n        labelFormatter={tooltipLabelFormatter}\n        valueFormatter={tooltipValueFormatter}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.barChart}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RechartsBarChart data={data} margin={{ top: 10, right: 10, left: -5, bottom: 40 }}>\n          {showXGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" strokeOpacity={0.2} />}\n          {showYGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" strokeOpacity={0.2} />}\n          {showXAxis && (\n            <XAxis\n              dataKey=\"category\"\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              tickFormatter={formatCategory}\n            />\n          )}\n          {showYAxis && (\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              width={30}\n            />\n          )}\n          <Tooltip\n            content={<CustomTooltip />}\n            cursor={{ fill: \"var(--secondary)\", opacity: 0.15 }}\n          />\n          <Bar\n            dataKey=\"amount\"\n            fill={color}\n            radius={[4, 4, 0, 0]}\n            animationDuration={animated ? 500 : 0}\n            animationBegin={animated ? 0 : undefined}\n            style={{\n              cursor: \"pointer\",\n            }}\n            onMouseEnter={() => {}}\n            onMouseLeave={() => {}}\n          />\n        </RechartsBarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default BarChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/bar-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/bar-chart.module.css",
      "content": ".barChart {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.barChart .recharts-active-bar {\n    filter: none !important;\n    opacity: 1 !important;\n}\n\n.barChart .recharts-bar-rectangle:hover {\n    fill-opacity: 1 !important;\n    stroke: none !important;\n    filter: none !important;\n}\n\n.barChart *:focus,\n.barChart *:focus-visible {\n    outline: none !important;\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/bar-chart.module.css"
    }
  ]
}