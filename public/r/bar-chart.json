{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bar-chart",
  "type": "registry:item",
  "title": "Bar Chart",
  "description": "Animated vertical bar charts with hover highlighting and customizable styling.",
  "dependencies": [
    "@visx/group",
    "@visx/scale",
    "@visx/axis",
    "@visx/shape",
    "@visx/gradient",
    "@visx/grid",
    "@visx/tooltip",
    "@visx/event",
    "d3-array",
    "@visx/responsive"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nimport { TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface ChartDataItem {\n  type: string;\n  [key: string]: unknown;\n}\n\nexport interface ChartTooltipProps<T extends ChartDataItem> {\n  tooltipData: T[];\n  tooltipLeft: number;\n  tooltipTop: number;\n  uniqueTypes: string[];\n  colors: string[];\n  getRD: (d: T) => number;\n  getDate: (d: T) => NumberValue | string;\n  dateFormatter?: (value: NumberValue | string) => string;\n}\n\nexport default function ChartTooltip<T extends ChartDataItem>({\n  tooltipData,\n  tooltipLeft,\n  tooltipTop,\n  uniqueTypes,\n  colors,\n  getRD,\n  getDate,\n  dateFormatter,\n}: ChartTooltipProps<T>) {\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n    transition: \"all 200ms linear\",\n  };\n\n  return (\n    <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n      <p style={{ marginBottom: \"6px\", fontSize: \"11px\", fontWeight: \"500\" }}>\n        {dateFormatter ? dateFormatter(getDate(tooltipData[0])) : String(getDate(tooltipData[0]))}\n      </p>\n      {tooltipData.map((d, i) => (\n        <div\n          key={i}\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"4px\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"4px\" }}>\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: colors[uniqueTypes.indexOf(d.type)],\n                borderRadius: \"50%\",\n              }}\n            />\n            <span style={{ fontSize: \"11px\", color: \"var(--muted-foreground)\" }}>\n              {d.type.charAt(0) + d.type.slice(1).toLowerCase()}\n            </span>\n          </div>\n          <span style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{getRD(d)}M</span>\n        </div>\n      ))}\n    </TooltipWithBounds>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/bar-chart.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useId, useRef, Fragment } from \"react\";\n\ntype NumberValue = number | { valueOf(): number };\nimport { Group } from \"@visx/group\";\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\nimport { AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { Bar } from \"@visx/shape\";\nimport { max } from \"d3-array\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { GridRows, GridColumns } from \"@visx/grid\";\nimport { useTooltip } from \"@visx/tooltip\";\nimport ChartTooltip, { ChartDataItem } from \"./chart-tooltip\";\nimport { localPoint } from \"@visx/event\";\nimport { easeOut, motion } from \"motion/react\";\n\nexport interface BarChartData extends ChartDataItem {\n  category: string;\n  amount: number;\n  type: string;\n}\n\nexport interface Margin {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport interface BarChartProps {\n  data: BarChartData[];\n  width: number;\n  height: number;\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  margin?: Margin;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  barPadding?: number;\n  useGradient?: boolean;\n  animated?: boolean;\n}\n\nfunction BarChart({\n  data,\n  width,\n  height,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = false,\n  showYGrid = true,\n  margin = { top: 40, right: 40, bottom: 40, left: 40 },\n  xAxisFormatter,\n  barPadding = 0.3,\n  useGradient = true,\n  animated = false,\n}: BarChartProps) {\n  const { tooltipData, tooltipLeft = 0, tooltipTop = 0, showTooltip, hideTooltip } = useTooltip<BarChartData>();\n  const gradientId = useId();\n  const hideTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  const debouncedHideTooltip = useCallback(() => {\n    if (hideTimeout.current) {\n      clearTimeout(hideTimeout.current);\n    }\n    hideTimeout.current = setTimeout(() => {\n      hideTooltip();\n    }, 400);\n  }, [hideTooltip]);\n\n  const handleShowTooltip = useCallback(\n    (data: { tooltipData: BarChartData; tooltipLeft: number; tooltipTop: number }) => {\n      if (hideTimeout.current) {\n        clearTimeout(hideTimeout.current);\n      }\n      showTooltip(data);\n    },\n    [showTooltip],\n  );\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  const color = \"var(--chart1)\";\n\n  const getCategory = (d: BarChartData) => d.category;\n  const getAmount = (d: BarChartData) => d.amount;\n\n  const formatCategory = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return String(value);\n  };\n\n  const categoryScale = scaleBand<string>({\n    range: [0, innerWidth],\n    domain: data.map(getCategory),\n    padding: barPadding,\n  });\n\n  const amountScale = scaleLinear<number>({\n    range: [innerHeight, 0],\n    domain: [0, max(data, getAmount)! + 20 || 0],\n    nice: true,\n  });\n\n  const handleTooltip = useCallback(\n    (event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>, datum: BarChartData) => {\n      const { x, y } = localPoint(event) || { x: 0, y: 0 };\n      handleShowTooltip({\n        tooltipData: datum,\n        tooltipLeft: x,\n        tooltipTop: y,\n      });\n    },\n    [handleShowTooltip],\n  );\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg width={width} height={height}>\n        <rect x={0} y={0} width={width} height={height} fill=\"var(--card)\" rx={14} />\n        {useGradient && (\n          <defs>\n            <LinearGradient id={gradientId} from={color} to={color} fromOpacity={0.8} toOpacity={0.3} />\n          </defs>\n        )}\n        <Group left={margin.left} top={margin.top}>\n          {showYGrid && (\n            <GridRows\n              scale={amountScale}\n              width={innerWidth}\n              height={innerHeight}\n              stroke=\"var(--border)\"\n              strokeOpacity={0.2}\n              numTicks={Math.min(10, innerHeight / 40)}\n            />\n          )}\n          {showXGrid && (\n            <GridColumns\n              scale={categoryScale}\n              width={innerWidth}\n              height={innerHeight}\n              stroke=\"var(--border)\"\n              strokeOpacity={0.2}\n            />\n          )}\n\n          {tooltipData && (\n            <motion.rect\n              x={categoryScale(getCategory(tooltipData)) ?? 0}\n              y={0}\n              width={Math.max(0, categoryScale.bandwidth())}\n              height={innerHeight}\n              fill=\"var(--accent)\"\n              fillOpacity={0.5}\n              rx={4}\n              style={{ pointerEvents: \"all\", cursor: \"pointer\" }}\n              onMouseMove={(event) => handleTooltip(event, tooltipData)}\n              onMouseLeave={() => debouncedHideTooltip()}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2, ease: \"easeOut\" }}\n            />\n          )}\n\n          {data.map((d, idx) => {\n            const barWidth = Math.max(0, categoryScale.bandwidth());\n            const barHeight = Math.max(0, innerHeight - (amountScale(getAmount(d)) ?? 0));\n            const barX = categoryScale(getCategory(d)) ?? 0;\n\n            const barY = innerHeight - barHeight;\n\n            return (\n              <Fragment key={`${getCategory(d)}-${idx}`}>\n                <rect\n                  x={barX}\n                  y={0}\n                  width={barWidth}\n                  height={innerHeight}\n                  fill=\"transparent\"\n                  style={{ cursor: \"pointer\" }}\n                  onMouseMove={(event) => handleTooltip(event, d)}\n                  onMouseLeave={() => debouncedHideTooltip()}\n                />\n\n                {animated ? (\n                  <motion.rect\n                    x={barX}\n                    width={barWidth}\n                    fill={useGradient ? `url(#${gradientId})` : color}\n                    stroke={color}\n                    strokeWidth={1}\n                    rx={4}\n                    y={barY}\n                    height={barHeight}\n                    initial={{\n                      scaleY: 0,\n                      originY: 1,\n                    }}\n                    animate={{\n                      scaleY: 1,\n                      originY: 1,\n                    }}\n                    transition={{\n                      duration: 0.5,\n                      ease: easeOut,\n                    }}\n                    style={{ pointerEvents: \"none\" }}\n                  />\n                ) : (\n                  <Bar\n                    x={barX}\n                    y={barY}\n                    width={barWidth}\n                    height={barHeight}\n                    fill={useGradient ? `url(#${gradientId})` : color}\n                    stroke={color}\n                    strokeWidth={1}\n                    rx={4}\n                    style={{ pointerEvents: \"none\" }}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n\n          {showYAxis && (\n            <AxisLeft\n              stroke=\"var(--border)\"\n              tickStroke=\"var(--border)\"\n              scale={amountScale}\n              numTicks={Math.min(10, innerHeight / 40)}\n              tickLabelProps={() => ({\n                fill: \"var(--muted-foreground)\",\n                fontSize: 11,\n                textAnchor: \"end\",\n              })}\n            />\n          )}\n\n          {showXAxis && (\n            <AxisBottom\n              scale={categoryScale}\n              stroke=\"var(--border)\"\n              tickStroke=\"var(--border)\"\n              top={innerHeight}\n              tickFormat={formatCategory}\n              tickLabelProps={() => ({\n                fill: \"var(--muted-foreground)\",\n                fontSize: 11,\n                textAnchor: \"middle\",\n              })}\n            />\n          )}\n        </Group>\n      </svg>\n      {tooltipData ? (\n        <ChartTooltip\n          tooltipData={[tooltipData]}\n          tooltipLeft={tooltipLeft}\n          tooltipTop={tooltipTop}\n          uniqueTypes={[tooltipData.type]}\n          colors={[color]}\n          getRD={getAmount}\n          getDate={(d) => d.category}\n          dateFormatter={xAxisFormatter}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default BarChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/bar-chart.tsx"
    }
  ]
}