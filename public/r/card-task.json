{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-task",
  "type": "registry:item",
  "title": "Card Task",
  "description": "A task card component with badges, avatars, and action menu.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://roiui.com/r/alert-dialog.json",
    "https://roiui.com/r/avatar.json",
    "https://roiui.com/r/badge.json",
    "https://roiui.com/r/button.json",
    "https://roiui.com/r/card.json",
    "https://roiui.com/r/combobox.json",
    "https://roiui.com/r/dialog.json",
    "https://roiui.com/r/dropdown-menu.json",
    "https://roiui.com/r/tooltip.json"
  ],
  "files": [
    {
      "path": "registry/brook/blocks/card-task/card-task.tsx",
      "content": "\"use client\";\n\nimport { Calendar, ListTodo, MessageCircleMore, Users } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/registry/brook/ui/badge/badge\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/brook/ui/card/card\";\nimport { AvatarGroup } from \"./avatar-group\";\nimport styles from \"./card-task.module.css\";\nimport { CollaboratorDialog } from \"./collaborator-dialog\";\nimport { DeleteTaskAlertDialog } from \"./delete-task-alert-dialog\";\nimport { TaskCardDropdownMenu } from \"./task-card-dropdown-menu\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\nconst users: User[] = [\n  {\n    value: \"preetecool\",\n    label: \"preetecool\",\n    email: \"@preetecool\",\n    avatar: \"/preetecool.png\",\n  },\n  {\n    value: \"john-doe\",\n    label: \"John Doe\",\n    email: \"john@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\",\n  },\n  {\n    value: \"jane-smith\",\n    label: \"Jane Smith\",\n    email: \"jane@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=32&h=32&fit=crop&crop=face\",\n  },\n  {\n    value: \"mike-johnson\",\n    label: \"Mike Johnson\",\n    email: \"mike@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=32&h=32&fit=crop&crop=face\",\n  },\n];\n\nexport function CardTask() {\n  const [alertOpen, setAlertOpen] = useState(false);\n  const [collaboratorDialogOpen, setCollaboratorDialogOpen] = useState(false);\n  const [currentCollaborators, setCurrentCollaborators] = useState<User[]>([\n    users[0],\n  ]);\n  const [selectedCollaborators, setSelectedCollaborators] = useState<User[]>([\n    users[0],\n  ]);\n  const [newlyAddedCollaborators, setNewlyAddedCollaborators] = useState<\n    string[]\n  >([]);\n\n  const handleConfirm = () => {\n    const previousCollaborators = currentCollaborators;\n    setCurrentCollaborators(selectedCollaborators);\n\n    // Track newly added: items that weren't in the previous list OR were removed and re-added\n    const newlyAdded = selectedCollaborators\n      .filter((s) => !previousCollaborators.find((c) => c.value === s.value))\n      .map((s) => s.value);\n\n    // Preserve previously newly-added items that are still selected\n    const stillNewlyAdded = newlyAddedCollaborators.filter((value) =>\n      selectedCollaborators.find((s) => s.value === value)\n    );\n\n    // Combine: keep old newly-added + add new ones\n    setNewlyAddedCollaborators([\n      ...new Set([...stillNewlyAdded, ...newlyAdded]),\n    ]);\n    setCollaboratorDialogOpen(false);\n  };\n\n  const handleDialogOpen = (open: boolean) => {\n    if (open) {\n      // Reset selected to current when opening\n      setSelectedCollaborators([...currentCollaborators]);\n      // Clear newly added collaborators when opening\n      setNewlyAddedCollaborators([]);\n    }\n    setCollaboratorDialogOpen(open);\n  };\n\n  return (\n    <>\n      <Card className={styles.taskCard}>\n        <CardHeader>\n          <CardTitle style={{ fontSize: \"1rem\" }}>\n            Update Documentation\n          </CardTitle>\n          <CardDescription>\n            Update the card component documentation to reflect the new style\n          </CardDescription>\n          <CardAction>\n            <TaskCardDropdownMenu\n              onAddCollaborator={() => handleDialogOpen(true)}\n              onDeleteTask={() => setAlertOpen(true)}\n            />\n          </CardAction>\n        </CardHeader>\n        <CardContent>\n          <div className={styles.contentContainer}>\n            <div className={styles.badgeContainer}>\n              <Badge size=\"sm\" variant=\"destructive\">\n                <span>Urgent</span>\n              </Badge>\n              <Badge size=\"sm\">\n                <span>Docs</span>\n              </Badge>\n            </div>\n            <AvatarGroup users={currentCollaborators} />\n          </div>\n        </CardContent>\n\n        <CardFooter className={styles.taskFooter}>\n          <div\n            style={{\n              padding: \"5px 0\",\n              width: \"calc(100% + 32px)\",\n              marginLeft: \"-16px\",\n              marginRight: \"-16px\",\n            }}\n          >\n            <div\n              style={{\n                height: \"1px\",\n                width: \"100%\",\n                borderBottom:\n                  \"0.5px solid oklch(from var(--border) l c h / 0.6)\",\n              }}\n            />\n          </div>\n          <div className={styles.footerContainer}>\n            <div className={styles.footerLeftGroup}>\n              <div className={styles.iconBubble}>\n                <Users size=\"14\" />\n                <span>{currentCollaborators.length}</span>\n              </div>\n              <div className={styles.iconBubble}>\n                <MessageCircleMore size=\"14\" />\n                <span>4</span>\n              </div>\n              <div className={styles.iconBubble}>\n                <ListTodo size=\"14\" />\n                <span>4/5</span>\n              </div>\n            </div>\n            <div className={styles.iconBubble}>\n              <Calendar size=\"14\" />\n              <span className={styles.tomorrowText}>1d </span>\n            </div>\n          </div>\n        </CardFooter>\n      </Card>\n\n      <DeleteTaskAlertDialog onOpenChange={setAlertOpen} open={alertOpen} />\n\n      <CollaboratorDialog\n        currentCollaborators={currentCollaborators}\n        onConfirm={handleConfirm}\n        onOpenChange={handleDialogOpen}\n        onSelectedCollaboratorsChange={setSelectedCollaborators}\n        open={collaboratorDialogOpen}\n        selectedCollaborators={selectedCollaborators}\n        users={users}\n      />\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/card-task.tsx"
    },
    {
      "path": "registry/brook/blocks/card-task/card-task.module.css",
      "content": ".taskCard {\n  width: 100%;\n  max-width: 300px;\n  gap: 1rem;\n  padding: 16px;\n}\n\n.contentContainer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.badgeContainer {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n.divider {\n  width: calc(100% + 32px);\n  height: 1px;\n  background: oklch(from var(--border) l c h / 0.5);\n  margin-left: -16px;\n  margin-right: -16px;\n  margin-top: auto;\n}\n\n.footerContainer {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  color: oklch(from var(--muted-foreground) l c h / 0.6);\n  font-size: 12px;\n}\n\n.footerLeftGroup {\n  display: flex;\n  gap: 0.75rem;\n  align-items: center;\n}\n\n.footerItem {\n  display: flex;\n  justify-content: flex-center;\n  align-items: center;\n  gap: 4px;\n  height: 14px;\n  line-height: 14px;\n}\n\n.iconBubble {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 12px;\n  background-color: var(--mix-card-33-bg);\n  border: 0.5px solid oklch(from var(--border) l c h / 0.2);\n  transition: all 150ms ease;\n}\n\n.iconBubble:hover {\n  background-color: var(--mix-card-50-bg);\n  border-color: var(--border);\n}\n.tomorrowText {\n  color: var(--warning-foreground);\n}\n\n.taskFooter {\n  margin-top: 0;\n  margin-bottom: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 0.65rem;\n}\n\n.destructiveMenuItem {\n  color: var(--destructive);\n  isolation: isolate;\n}\n\n.destructiveMenuItem svg {\n  color: var(--destructive);\n}\n\n.destructiveMenuItem::before {\n  content: \"\";\n  position: absolute;\n  inset: 0 4px;\n  border-radius: 0.3rem;\n  background-color: transparent;\n  z-index: -1;\n}\n\n.destructiveMenuItem:hover::before {\n  background-color: var(--destructive);\n}\n\n.destructiveMenuItem:hover {\n  color: var(--destructive-foreground);\n}\n\n.destructiveMenuItem:hover svg {\n  color: var(--destructive-foreground);\n}\n\n@media (max-width: 1280px) {\n  .taskCard {\n    min-height: auto;\n  }\n}\n\n.alertContent {\n  width: clamp(250px, 90vw, 400px);\n  max-height: 300px;\n  border-radius: 1rem;\n  display: flex;\n  flex-direction: column;\n  padding: 1.5rem;\n  gap: 1rem;\n}\n\n@media (max-width: 640px) {\n  .alertContent {\n    left: 50% !important;\n    right: auto !important;\n    transform: translate(-50%, -50%) !important;\n  }\n}\n\n.alertDescription {\n  color: var(--muted-foreground);\n}\n\n.alertFooter {\n  margin-top: 32px;\n  display: flex;\n  gap: 12px;\n}\n\n.alertFooter > * {\n  flex: 1;\n}\n\n.dialogFooter {\n  margin-top: 32px;\n  display: flex;\n  gap: 12px;\n}\n\n.dialogFooter > * {\n  flex: 1;\n}\n\n.collaboratorAvatar {\n  position: relative;\n  display: inline-block;\n}\n\n.collaboratorAvatarImage {\n  border-radius: 50%;\n  transition: border 150ms ease;\n}\n\n.collaboratorAvatarImageNew {\n  border: 2px solid var(--success);\n}\n\n.collaboratorAvatarImageOriginal {\n  border: 2px solid transparent;\n}\n\n.removeButton {\n  position: absolute;\n  top: -4px;\n  right: -4px;\n  width: 18px;\n  height: 18px;\n  border-radius: 50%;\n  background: var(--destructive);\n  color: var(--destructive-foreground);\n  border: 2px solid var(--background);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 1;\n  transition: all 150ms ease;\n  opacity: 0;\n  pointer-events: none;\n}\n\n.removeButton.visible {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n.removeButton.alwaysVisible {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n.collaboratorAvatar:hover .removeButton {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n.removeButton:hover {\n  transform: scale(1.1);\n  background: oklch(from var(--destructive) calc(l * 0.9) c h);\n}\n\n.removeButton:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n  opacity: 1;\n  pointer-events: auto;\n}\n\n.comboboxWrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  border: 1px solid var(--border);\n  border-radius: var(--radius);\n  background: var(--mix-card-50-bg);\n  transition: all 150ms ease;\n}\n\n.comboboxWrapper:has(:focus-visible) {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.dialogPopup {\n  max-width: 410px;\n}\n\n.dialogContent {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.sectionLabel {\n  font-size: 0.875rem;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n\n.collaboratorList {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.addCollaboratorSection {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.addCollaboratorLabel {\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.comboboxPopup {\n  width: var(--anchor-width);\n}\n\n.userItemContainer {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  flex: 1;\n}\n\n.userAvatar {\n  width: 1.5rem;\n  height: 1.5rem;\n}\n\n.userInfo {\n  text-align: left;\n}\n\n.userName {\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.userEmail {\n  font-size: 0.75rem;\n  color: var(--muted-foreground);\n}\n\n.avatarSize {\n  width: 32px;\n  height: 32px;\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/card-task.module.css"
    },
    {
      "path": "registry/brook/blocks/card-task/avatar-group.tsx",
      "content": "import {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/brook/ui/avatar/avatar\";\nimport {\n  Tooltip,\n  TooltipArrow,\n  TooltipPopup,\n  TooltipPortal,\n  TooltipPositioner,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/brook/ui/tooltip/tooltip\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\ntype AvatarGroupProps = {\n  users: User[];\n  maxDisplay?: number;\n};\n\nexport function AvatarGroup({ users, maxDisplay = 3 }: AvatarGroupProps) {\n  const displayUsers = users.slice(0, maxDisplay);\n  const remainingCount = users.length - maxDisplay;\n\n  return (\n    <TooltipProvider>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        {displayUsers.map((user, index) => (\n          <Tooltip key={user.value}>\n            <TooltipTrigger\n              render={\n                <div style={{ marginLeft: index > 0 ? \"-6px\" : \"0\" }}>\n                  <Avatar\n                    style={{\n                      width: \"24px\",\n                      height: \"24px\",\n                      border: \"2px solid var(--card)\",\n                    }}\n                  >\n                    <AvatarImage\n                      alt={`profile image for ${user.label}`}\n                      src={user.avatar}\n                    />\n                    <AvatarFallback>\n                      {user.label\n                        ?.split(\" \")\n                        .map((n: string) => n[0])\n                        .join(\"\") || \"??\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </div>\n              }\n            />\n            <TooltipPortal>\n              <TooltipPositioner>\n                <TooltipPopup>\n                  <TooltipArrow />\n                  {user.label}\n                </TooltipPopup>\n              </TooltipPositioner>\n            </TooltipPortal>\n          </Tooltip>\n        ))}\n        {remainingCount > 0 && (\n          <div\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              borderRadius: \"50%\",\n              background: \"var(--muted)\",\n              color: \"var(--muted-foreground)\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              fontSize: \"0.625rem\",\n              fontWeight: 600,\n              marginLeft: \"-6px\",\n              border: \"2px solid var(--card)\",\n            }}\n          >\n            +{remainingCount}\n          </div>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/avatar-group.tsx"
    },
    {
      "path": "registry/brook/blocks/card-task/delete-task-alert-dialog.tsx",
      "content": "import {\n  AlertDialog,\n  AlertDialogClose,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/registry/brook/ui/alert-dialog/alert-dialog\";\nimport { Button } from \"@/registry/brook/ui/button/button\";\nimport styles from \"./card-task.module.css\";\n\ntype DeleteTaskAlertDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport function DeleteTaskAlertDialog({\n  open,\n  onOpenChange,\n}: DeleteTaskAlertDialogProps) {\n  return (\n    <AlertDialog onOpenChange={onOpenChange} open={open}>\n      <AlertDialogContent className={styles.alertContent}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Delete Task</AlertDialogTitle>\n          <AlertDialogDescription className={styles.alertDescription}>\n            Are you sure you want to delete this task?\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter className={styles.alertFooter}>\n          <AlertDialogClose\n            render={<Button variant=\"outline\">Cancel</Button>}\n          />\n          <Button onClick={() => onOpenChange(false)} variant=\"destructive\">\n            Delete\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/delete-task-alert-dialog.tsx"
    },
    {
      "path": "registry/brook/blocks/card-task/task-card-dropdown-menu.tsx",
      "content": "import { Calendar, MoreHorizontal, Trash, UserPlus } from \"lucide-react\";\nimport { Button } from \"@/registry/brook/ui/button/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuItem,\n  DropdownMenuPopup,\n  DropdownMenuPortal,\n  DropdownMenuPositioner,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/brook/ui/dropdown-menu/dropdown-menu\";\nimport styles from \"./card-task.module.css\";\n\ntype TaskCardDropdownMenuProps = {\n  onAddCollaborator: () => void;\n  onDeleteTask: () => void;\n};\n\nexport function TaskCardDropdownMenu({\n  onAddCollaborator,\n  onDeleteTask,\n}: TaskCardDropdownMenuProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger\n        render={(props) => (\n          <Button {...props} size=\"icon\" variant=\"ghost\">\n            <MoreHorizontal\n              size=\"16\"\n              style={{\n                color: \"oklch(from var(--muted-foreground) l c h / 0.8)\",\n              }}\n            />\n          </Button>\n        )}\n      />\n      <DropdownMenuPortal>\n        <DropdownMenuPositioner sideOffset={8}>\n          <DropdownMenuPopup render={<ul />} style={{ minWidth: \"160px\" }}>\n            <div style={{ height: \"4px\", width: \"100%\" }} />\n            <DropdownMenuItem\n              icon={<UserPlus size=\"14\" />}\n              onClick={onAddCollaborator}\n              render={<li />}\n            >\n              Add collaborator\n            </DropdownMenuItem>\n            <DropdownMenuItem icon={<Calendar size=\"14\" />} render={<li />}>\n              Change due date\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              className={styles.destructiveMenuItem}\n              icon={<Trash size=\"14\" />}\n              onClick={onDeleteTask}\n              render={<li />}\n            >\n              Delete task\n            </DropdownMenuItem>\n            <div style={{ height: \"4px\", width: \"100%\" }} />\n          </DropdownMenuPopup>\n        </DropdownMenuPositioner>\n      </DropdownMenuPortal>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/task-card-dropdown-menu.tsx"
    },
    {
      "path": "registry/brook/blocks/card-task/collaborator-dialog.tsx",
      "content": "import { useRef } from \"react\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/brook/ui/avatar/avatar\";\nimport { Button } from \"@/registry/brook/ui/button/button\";\nimport {\n  Combobox,\n  ComboboxEmpty,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxList,\n  ComboboxPopup,\n  ComboboxPortal,\n  ComboboxPositioner,\n  ComboboxTrigger,\n} from \"@/registry/brook/ui/combobox/combobox\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPopup,\n  DialogPortal,\n  DialogTitle,\n} from \"@/registry/brook/ui/dialog/dialog\";\nimport {\n  Tooltip,\n  TooltipArrow,\n  TooltipPopup,\n  TooltipPortal,\n  TooltipPositioner,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/brook/ui/tooltip/tooltip\";\nimport styles from \"./card-task.module.css\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\ntype CollaboratorDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  users: User[];\n  currentCollaborators: User[];\n  selectedCollaborators: User[];\n  onSelectedCollaboratorsChange: (collaborators: User[]) => void;\n  onConfirm: () => void;\n};\n\nexport function CollaboratorDialog({\n  open,\n  onOpenChange,\n  users,\n  currentCollaborators,\n  selectedCollaborators,\n  onSelectedCollaboratorsChange,\n  onConfirm,\n}: CollaboratorDialogProps) {\n  const comboboxAnchorRef = useRef<HTMLDivElement>(null);\n\n  const handleRemoveCollaborator = (userValue: string) => {\n    onSelectedCollaboratorsChange(\n      selectedCollaborators.filter((c) => c.value !== userValue)\n    );\n  };\n\n  return (\n    <Dialog onOpenChange={onOpenChange} open={open}>\n      <DialogPortal>\n        <DialogOverlay />\n        <DialogPopup className={styles.dialogPopup}>\n          <DialogHeader>\n            <DialogTitle>Add Collaborator</DialogTitle>\n            <DialogDescription>\n              Invite a team member to collaborate on this task.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className={styles.dialogContent}>\n            {/* Current Collaborators */}\n            <div>\n              <div className={styles.sectionLabel}>Current Collaborators</div>\n              <div className={styles.collaboratorList}>\n                <TooltipProvider>\n                  {selectedCollaborators?.map((collaborator, index) => {\n                    const isNewlyAdded = !currentCollaborators.some(\n                      (c) => c.value === collaborator.value\n                    );\n                    const lastIndex = selectedCollaborators.length - 1;\n                    const isLast = index === lastIndex;\n                    const isFirst = index === 0;\n\n                    return (\n                      <Tooltip key={collaborator.value}>\n                        <TooltipTrigger\n                          render={\n                            <div className={styles.collaboratorAvatar}>\n                              <Avatar\n                                className={`${styles.collaboratorAvatarImage} ${styles.avatarSize} ${\n                                  isNewlyAdded\n                                    ? styles.collaboratorAvatarImageNew\n                                    : styles.collaboratorAvatarImageOriginal\n                                }`}\n                              >\n                                <AvatarImage\n                                  alt={collaborator.label}\n                                  src={collaborator.avatar}\n                                />\n                                <AvatarFallback>\n                                  {collaborator.label\n                                    ?.split(\" \")\n                                    .map((n: string) => n[0])\n                                    .join(\"\") || \"??\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <button\n                                className={`${styles.removeButton} ${\n                                  isLast && !isFirst ? styles.alwaysVisible : \"\"\n                                }`}\n                                onClick={() =>\n                                  handleRemoveCollaborator(collaborator.value)\n                                }\n                                type=\"button\"\n                              >\n                                ×\n                              </button>\n                            </div>\n                          }\n                        />\n                        <TooltipPortal>\n                          <TooltipPositioner>\n                            <TooltipPopup>\n                              <TooltipArrow />\n                              {collaborator.label}\n                            </TooltipPopup>\n                          </TooltipPositioner>\n                        </TooltipPortal>\n                      </Tooltip>\n                    );\n                  })}\n                </TooltipProvider>\n              </div>\n            </div>\n\n            {/* Add New Collaborator */}\n            <div className={styles.addCollaboratorSection}>\n              <div className={styles.addCollaboratorLabel}>\n                Add New Collaborator\n              </div>\n              <Combobox\n                items={users}\n                itemToStringLabel={(item) => item?.label || \"\"}\n                itemToStringValue={(item) => item?.value || \"\"}\n                // @ts-expect-error - Base UI Combobox multiple prop type inference issue\n                multiple={true}\n                onValueChange={(value) => {\n                  if (value && Array.isArray(value)) {\n                    onSelectedCollaboratorsChange(value as User[]);\n                  }\n                }}\n                // @ts-expect-error - Base UI Combobox value type with multiple=true\n                value={selectedCollaborators}\n              >\n                <div className={styles.comboboxWrapper} ref={comboboxAnchorRef}>\n                  <ComboboxInput placeholder=\"Search users...\" />\n                  <ComboboxTrigger />\n                </div>\n\n                <ComboboxPortal>\n                  <ComboboxPositioner anchor={comboboxAnchorRef}>\n                    <ComboboxPopup className={styles.comboboxPopup}>\n                      <ComboboxEmpty>No user found.</ComboboxEmpty>\n                      <ComboboxList>\n                        {(user: User) => (\n                          <ComboboxItem\n                            indicatorPosition=\"right\"\n                            key={user.value}\n                            value={user}\n                          >\n                            <div className={styles.userItemContainer}>\n                              <Avatar className={styles.userAvatar}>\n                                <AvatarImage\n                                  alt={user.label}\n                                  src={user.avatar}\n                                />\n                                <AvatarFallback>\n                                  {user.label\n                                    .split(\" \")\n                                    .map((n: string) => n[0])\n                                    .join(\"\")}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className={styles.userInfo}>\n                                <div className={styles.userName}>\n                                  {user.label}\n                                </div>\n                                <div className={styles.userEmail}>\n                                  {user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </ComboboxItem>\n                        )}\n                      </ComboboxList>\n                    </ComboboxPopup>\n                  </ComboboxPositioner>\n                </ComboboxPortal>\n              </Combobox>\n            </div>\n          </div>\n\n          <DialogFooter className={styles.dialogFooter}>\n            <DialogClose render={<Button variant=\"outline\">Cancel</Button>} />\n            <Button onClick={onConfirm}>Confirm</Button>\n          </DialogFooter>\n        </DialogPopup>\n      </DialogPortal>\n    </Dialog>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/collaborator-dialog.tsx"
    }
  ]
}