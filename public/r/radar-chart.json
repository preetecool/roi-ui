{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radar-chart",
  "type": "registry:item",
  "title": "Radar Chart",
  "description": "Multi-dimensional radar charts for comparing multiple variables across categories.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\ntype PayloadEntry = {\n  name?: string;\n  dataKey?: string;\n  value: number | string;\n  color?: string;\n};\n\nexport type ChartTooltipProps = {\n  active?: boolean;\n  payload?: PayloadEntry[];\n  label?: string | number;\n  labelFormatter?: (value: string | number) => string;\n  valueFormatter?: (value: number | string, name?: string) => string;\n  nameFormatter?: (name: string) => string;\n};\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n  nameFormatter,\n}: ChartTooltipProps) {\n  if (!(active && payload && payload.length)) {\n    return null;\n  }\n\n  const formatLabel = (value: string | number) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: number | string, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === \"number\") {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  const formatName = (name: string) => {\n    if (nameFormatter) {\n      return nameFormatter(name);\n    }\n\n    return name.toLowerCase().replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div\n          style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}\n        >\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry, index) => (\n        <div\n          key={`${entry.dataKey || entry.name || \"entry\"}-${index}`}\n          style={{\n            fontSize: \"11px\",\n            marginBottom: \"2px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>\n              {formatName(entry.name || entry.dataKey || \"\")}\n            </span>\n          </div>\n          <span\n            style={{\n              fontFamily:\n                \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n              fontWeight: \"500\",\n            }}\n          >\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/radar-chart.tsx",
      "content": "\"use client\";\n\nimport {\n  PolarAngleAxis,\n  PolarGrid,\n  PolarRadiusAxis,\n  Radar,\n  RadarChart as RechartsRadarChart,\n  ResponsiveContainer,\n  Tooltip,\n} from \"recharts\";\nimport ChartTooltip from \"./chart-tooltip\";\nimport styles from \"./radar-chart.module.css\";\n\nexport type RadarChartData = {\n  category: string;\n  value: number;\n  type: string;\n};\n\nexport type RadarChartProps = {\n  data: RadarChartData[];\n  levels?: number;\n  maxValue?: number;\n  showLabels?: boolean;\n  showGrid?: boolean;\n  showRadialAxis?: boolean;\n  fillOpacity?: number;\n  animated?: boolean;\n};\n\nconst ANIMATION_STAGGER_DELAY_MS = 200;\nconst ANIMATION_DURATION_MS = 800;\n\nfunction RadarChart({\n  data,\n  levels = 5,\n  maxValue,\n  showLabels = true,\n  showGrid = true,\n  showRadialAxis = true,\n  fillOpacity = 0.3,\n  animated = false,\n}: RadarChartProps) {\n  const colors = [\"var(--chart1)\", \"var(--chart2)\"];\n\n  const uniqueTypes = Array.from(new Set(data.map((d) => d.type)));\n\n  type GroupedDataItem = {\n    category: string;\n    [key: string]: string | number;\n  };\n\n  const groupedData = data.reduce((acc: GroupedDataItem[], curr) => {\n    const existing = acc.find((item) => item.category === curr.category);\n    if (existing) {\n      existing[curr.type] = curr.value;\n    } else {\n      acc.push({\n        category: curr.category,\n        [curr.type]: curr.value,\n      });\n    }\n    return acc;\n  }, []);\n\n  return (\n    <div\n      className={styles.radarChart}\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <ResponsiveContainer height=\"100%\" width=\"100%\">\n        <RechartsRadarChart\n          data={groupedData}\n          margin={{ top: 20, right: 80, bottom: 20, left: 80 }}\n        >\n          {showGrid && <PolarGrid stroke=\"var(--border)\" strokeOpacity={0.3} />}\n          {showLabels && (\n            <PolarAngleAxis\n              dataKey=\"category\"\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n            />\n          )}\n          {showRadialAxis && (\n            <PolarRadiusAxis\n              angle={90}\n              axisLine={false}\n              domain={[0, maxValue || \"dataMax\"]}\n              tick={{ fontSize: 10, fill: \"var(--muted-foreground)\" }}\n              tickCount={levels + 1}\n            />\n          )}\n          <Tooltip\n            content={<ChartTooltip />}\n            cursor={{ stroke: \"var(--secondary)\", strokeWidth: 1 }}\n          />\n          {uniqueTypes.map((type, index) => (\n            <Radar\n              animationBegin={\n                animated ? index * ANIMATION_STAGGER_DELAY_MS : undefined\n              }\n              animationDuration={animated ? ANIMATION_DURATION_MS : 0}\n              dataKey={type}\n              fill={colors[index % colors.length]}\n              fillOpacity={fillOpacity}\n              key={type}\n              name={type}\n              stroke={colors[index % colors.length]}\n              strokeWidth={2}\n            />\n          ))}\n        </RechartsRadarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default RadarChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/radar-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/radar-chart.module.css",
      "content": ".radarChart {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.radarChart *:focus,\n.radarChart *:focus-visible {\n  outline: none !important;\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/radar-chart.module.css"
    }
  ]
}