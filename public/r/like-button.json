{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "like-button",
  "type": "registry:item",
  "title": "Like Button",
  "description": "A button component for liking content.",
  "files": [
    {
      "path": "registry/brook/ui/like-button/like-button.tsx",
      "content": "\"use client\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport styles from \"./like-button.module.css\";\n\n// Constants for animation calculations\nconst DEGREES_TO_RADIANS = 180;\nconst ANGLE_OFFSET_BASE = 90;\nconst DELAY_DIVISOR = 1000;\nconst ROTATION_MULTIPLIER = 6;\nconst SCALE_BASE = 0.8;\nconst SCALE_DIVISOR = 30;\nconst PARTICLE_SIZE_STAR_LARGE = 12;\nconst PARTICLE_SIZE_STAR_MEDIUM = 10;\nconst PARTICLE_SIZE_CIRCLE_LARGE = 6;\nconst PARTICLE_SIZE_CIRCLE_MEDIUM = 5;\nconst PARTICLE_ANGLE_LEFT = -60;\nconst PARTICLE_ANGLE_CENTER = 0;\nconst PARTICLE_ANGLE_RIGHT = 60;\nconst PARTICLE_ANGLE_LEFT_SMALL = -30;\nconst PARTICLE_ANGLE_RIGHT_SMALL = 30;\nconst THUMB_ANIMATION_DURATION = 1200;\nconst PARTICLE_ANIMATION_DURATION = 1000;\nconst LIKE_STATE_DELAY = 100;\nconst AUTO_PLAY_INTERVAL = 3000;\n\ntype Particle = {\n  id: number;\n  type: \"star\" | \"circle\";\n  angle: number;\n  distance: number;\n  delay: number;\n  rotation: number;\n  size: number;\n  scale: number;\n};\n\n/**\n * LikeButton component with animated thumbs-up and particle effects.\n * Features smooth animations and visual feedback when clicked.\n *\n * @param isPlaying - Auto-play the animation continuously (default: false)\n * @param onClick - Callback function when the button is clicked\n * @param className - Optional CSS class names\n *\n * @example\n * ```tsx\n * <LikeButton onClick={() => console.log('Liked!')} />\n *\n * // Auto-playing version\n * <LikeButton isPlaying={true} />\n * ```\n */\nfunction LikeButton({\n  isPlaying = false,\n  onClick,\n  className,\n}: {\n  isPlaying?: boolean;\n  onClick?: () => void;\n  className?: string;\n}) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const [isThumbAnimating, setIsThumbAnimating] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const createParticle = useCallback(\n    (angleOffset: number, type: \"star\" | \"circle\", size: number): Particle => {\n      const baseAngle = -Math.PI / 2;\n      const angle = baseAngle + (angleOffset * Math.PI) / DEGREES_TO_RADIANS;\n\n      return {\n        id: Date.now() + angleOffset + size,\n        type,\n        angle,\n        distance: 40,\n        delay: (angleOffset + ANGLE_OFFSET_BASE) / DELAY_DIVISOR,\n        rotation: angleOffset * ROTATION_MULTIPLIER,\n        size,\n        scale: SCALE_BASE + size / SCALE_DIVISOR,\n      };\n    },\n    []\n  );\n\n  const createParticleSet = useCallback(\n    (): Particle[] => [\n      createParticle(PARTICLE_ANGLE_LEFT, \"star\", PARTICLE_SIZE_STAR_LARGE),\n      createParticle(PARTICLE_ANGLE_CENTER, \"star\", PARTICLE_SIZE_STAR_MEDIUM),\n      createParticle(PARTICLE_ANGLE_RIGHT, \"star\", PARTICLE_SIZE_STAR_LARGE),\n      createParticle(\n        PARTICLE_ANGLE_LEFT_SMALL,\n        \"circle\",\n        PARTICLE_SIZE_CIRCLE_LARGE\n      ),\n      createParticle(\n        PARTICLE_ANGLE_CENTER,\n        \"circle\",\n        PARTICLE_SIZE_CIRCLE_LARGE\n      ),\n      createParticle(\n        PARTICLE_ANGLE_RIGHT_SMALL,\n        \"circle\",\n        PARTICLE_SIZE_CIRCLE_MEDIUM\n      ),\n    ],\n    [createParticle]\n  );\n\n  const startThumbAnimation = useCallback(() => {\n    setIsThumbAnimating(true);\n    setIsFilled(true);\n    setIsAnimating(true);\n    setTimeout(() => {\n      setIsThumbAnimating(false);\n      setIsFilled(false);\n      setIsAnimating(false);\n    }, THUMB_ANIMATION_DURATION);\n  }, []);\n\n  const startParticleAnimation = useCallback(() => {\n    setParticles(createParticleSet());\n    setTimeout(() => {\n      setParticles([]);\n    }, PARTICLE_ANIMATION_DURATION);\n  }, [createParticleSet]);\n\n  const handleClick = (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (isAnimating || isPlaying) {\n      return;\n    }\n\n    const newLikedState = !isLiked;\n\n    if (newLikedState) {\n      startThumbAnimation();\n      startParticleAnimation();\n      setTimeout(() => {\n        setIsLiked(true);\n      }, LIKE_STATE_DELAY);\n    } else {\n      setIsLiked(false);\n      setIsFilled(false);\n    }\n\n    onClick?.();\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (isAnimating) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      startThumbAnimation();\n      startParticleAnimation();\n\n      intervalRef.current = setInterval(() => {\n        startThumbAnimation();\n        startParticleAnimation();\n      }, AUTO_PLAY_INTERVAL);\n    } else if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isPlaying, startThumbAnimation, startParticleAnimation]);\n\n  return (\n    <div className={`${styles.container} ${className || \"\"}`}>\n      <div className={styles.animationWrapper}>\n        <div className={styles.particlesContainer}>\n          {particles.map((particle) => (\n            <div\n              className={styles.particle}\n              key={particle.id}\n              style={\n                {\n                  \"--angle\": `${particle.angle}rad`,\n                  \"--distance\": `${particle.distance}px`,\n                  \"--delay\": `${particle.delay}s`,\n                  \"--scale\": particle.scale,\n                } as React.CSSProperties\n              }\n            >\n              <div\n                className={\n                  particle.type === \"star\"\n                    ? styles.starShape\n                    : styles.circleShape\n                }\n                style={\n                  {\n                    \"--rotation\": `${particle.rotation}deg`,\n                    \"--size\": `${particle.size}px`,\n                  } as React.CSSProperties\n                }\n              />\n            </div>\n          ))}\n        </div>\n\n        <button\n          aria-label={isLiked ? \"Unlike\" : \"Like\"}\n          className={`${styles.thumbButton} ${isThumbAnimating ? styles.animateThumbTilt : \"\"}`}\n          data-slot=\"like-button\"\n          disabled={isAnimating}\n          onClick={handleClick}\n          onTouchEnd={handleClick}\n          onTouchStart={handleTouchStart}\n          style={{\n            pointerEvents: isAnimating ? \"none\" : \"auto\",\n            visibility: \"visible\",\n            opacity: 1,\n            transform: \"translateZ(0)\",\n            WebkitTransform: \"translateZ(0)\",\n          }}\n          type=\"button\"\n        >\n          <svg\n            aria-label=\"Like\"\n            className={`${styles.thumbIcon} ${isPlaying ? styles.scaledIcon : \"\"}`}\n            height=\"24\"\n            role=\"img\"\n            style={{\n              visibility: \"visible\",\n              opacity: 1,\n            }}\n            viewBox=\"-1 -1 18 18\"\n            width=\"24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2 2 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a10 10 0 0 0-.443.05 9.4 9.4 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111z\"\n              style={{\n                fill: isFilled || isLiked ? \"var(--primary)\" : \"none\",\n                stroke: isFilled || isLiked ? \"none\" : \"var(--foreground)\",\n                strokeWidth: 1,\n                transition: \"fill 0.2s ease-out, stroke 0.2s ease-out\",\n              }}\n            />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport { LikeButton };\n",
      "type": "registry:file",
      "target": "~/components/ui/like-button/like-button.tsx"
    },
    {
      "path": "registry/brook/ui/like-button/like-button.module.css",
      "content": ".container {\n  min-height: 200px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 30px 0;\n  box-sizing: border-box;\n  -webkit-overflow-scrolling: touch;\n}\n\n.animationWrapper {\n  position: relative;\n  width: 100%;\n  max-width: 240px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px 20px;\n  overflow: visible;\n}\n\n.particlesContainer {\n  position: absolute;\n  inset: -60px -40px;\n  overflow: visible;\n  pointer-events: none;\n  z-index: 1;\n}\n\n.particle {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  will-change: transform, opacity;\n  animation: particleMotion 1s ease-out forwards;\n  animation-delay: var(--delay);\n  opacity: 0;\n  transform: translate(-50%, -50%) scale(0);\n}\n\n.starShape {\n  width: var(--size);\n  height: var(--size);\n  position: relative;\n  display: block;\n  transform: rotate(var(--rotation));\n}\n\n.starShape::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--foreground);\n  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n}\n\n.circleShape {\n  width: var(--size);\n  height: var(--size);\n  background: var(--foreground);\n  border-radius: 50%;\n  transform: scale(var(--scale));\n}\n\n.thumbButton {\n  padding: 16px;\n  border-radius: 50%;\n  transition: transform 0.25s ease;\n  position: relative;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10;\n\n  touch-action: manipulation;\n  -webkit-user-select: none;\n  -webkit-touch-callout: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-perspective: 1000;\n  perspective: 1000;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  overflow: visible;\n  margin: 4px 0;\n  outline: none;\n  will-change: transform, opacity;\n}\n\n.thumbButton:hover {\n  transform: scale(1.05);\n}\n\n@media (hover: none) and (pointer: coarse) {\n  .thumbButton:hover {\n    transform: none;\n  }\n}\n\n.thumbButton:focus {\n  outline: none;\n}\n\n.thumbButton:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.thumbIcon {\n  transition: all 0.25s ease;\n  width: 24px;\n  height: 24px;\n  will-change: transform, opacity;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.scaledIcon {\n  transform: scale(1.1);\n}\n\n.fillAnimation {\n  animation: fillThumb 0.25s ease-out forwards;\n}\n\n@keyframes particleMotion {\n  0% {\n    transform: translate(-50%, -50%) scale(0.5);\n    opacity: 0;\n  }\n  50% {\n    transform: translate(\n        calc(-50% + (cos(var(--angle)) * var(--distance))),\n        calc(-50% + (sin(var(--angle)) * var(--distance)))\n      )\n      scale(1);\n    opacity: 0.9;\n  }\n  75% {\n    transform: translate(\n        calc(-50% + (cos(var(--angle)) * var(--distance) * 0.1)),\n        calc(-50% + (sin(var(--angle)) * var(--distance) * 0.1))\n      )\n      scale(0.3);\n    opacity: 0.25;\n  }\n  100% {\n    transform: translate(\n        calc(-50% + (cos(var(--angle)) * var(--distance) * 0)),\n        calc(-50% + (sin(var(--angle)) * var(--distance) * 0))\n      )\n      scale(0);\n    opacity: 0;\n  }\n}\n\n@keyframes fillThumb {\n  0% {\n    fill: none;\n  }\n  100% {\n    fill: var(--primary);\n  }\n}\n\n@keyframes thumbTilt {\n  0% {\n    transform: rotate(0deg) scale(1) translateZ(0);\n  }\n  50% {\n    transform: rotate(-30deg) scale(1.2) translateZ(0);\n  }\n  100% {\n    transform: rotate(0deg) scale(1) translateZ(0);\n  }\n}\n\n.animateThumbTilt {\n  animation: thumbTilt 1.15s cubic-bezier(0.455, 0.03, 0.515, 0.955);\n  -webkit-animation: thumbTilt 1.15s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@media (max-width: 768px) {\n  .thumbButton {\n    min-height: 48px;\n    min-width: 48px;\n    padding: 16px;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n\n  .container {\n    min-height: 160px;\n  }\n\n  .thumbButton,\n  .thumbIcon {\n    transform-origin: center;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n  }\n}\n\n@-webkit-keyframes thumbTilt {\n  0% {\n    -webkit-transform: rotate(0deg) scale(1) translateZ(0);\n  }\n  50% {\n    -webkit-transform: rotate(-30deg) scale(1.2) translateZ(0);\n  }\n  100% {\n    -webkit-transform: rotate(0deg) scale(1) translateZ(0);\n  }\n}\n\n.container {\n  -webkit-overflow-scrolling: touch;\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/like-button/like-button.module.css"
    }
  ]
}