{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:item",
  "title": "Select",
  "description": "A customizable select component for choosing from a list of options.",
  "files": [
    {
      "path": "registry/brook/ui/select/select.tsx",
      "content": "\"use client\";\n\nimport { Select } from \"@base-ui-components/react/select\";\nimport { Check, ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport styles from \"./select.module.css\";\n\nfunction SelectRoot({ ...props }: React.ComponentProps<typeof Select.Root>) {\n  return <Select.Root {...props} />;\n}\n\nfunction SelectTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.Trigger>) {\n  return (\n    <Select.Trigger\n      className={cn(styles.trigger, className)}\n      nativeButton\n      {...props}\n    >\n      {children}\n    </Select.Trigger>\n  );\n}\n\nfunction SelectValue({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.Value>) {\n  return (\n    <Select.Value className={cn(styles.value, className)} {...props}>\n      {children}\n    </Select.Value>\n  );\n}\n\nfunction SelectIcon({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.Icon>) {\n  return (\n    <Select.Icon className={cn(styles.icon, className)} {...props}>\n      {children || <ChevronDown size={16} />}\n    </Select.Icon>\n  );\n}\n\nfunction SelectPortal({\n  ...props\n}: React.ComponentProps<typeof Select.Portal>) {\n  return <Select.Portal {...props} />;\n}\n\nfunction SelectOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Backdrop>) {\n  return (\n    <Select.Backdrop className={cn(styles.backdrop, className)} {...props} />\n  );\n}\n\nfunction SelectPositioner({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Positioner>) {\n  return (\n    <Select.Positioner\n      className={cn(styles.positioner, className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpArrow({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.ScrollUpArrow>) {\n  return (\n    <Select.ScrollUpArrow\n      className={cn(styles.scrollArrow, className)}\n      {...props}\n    >\n      {children || (\n        <ChevronDown size={16} style={{ transform: \"rotate(180deg)\" }} />\n      )}\n    </Select.ScrollUpArrow>\n  );\n}\n\nfunction SelectPopup({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Popup>) {\n  return <Select.Popup className={cn(styles.popup, className)} {...props} />;\n}\n\nfunction SelectArrow({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Arrow>) {\n  return <Select.Arrow className={cn(styles.arrow, className)} {...props} />;\n}\n\nfunction SelectScrollDownArrow({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.ScrollDownArrow>) {\n  return (\n    <Select.ScrollDownArrow\n      className={cn(styles.scrollArrow, className)}\n      {...props}\n    >\n      {children || <ChevronDown size={16} />}\n    </Select.ScrollDownArrow>\n  );\n}\n\nfunction SelectList({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.List>) {\n  return <Select.List className={cn(styles.list, className)} {...props} />;\n}\n\nfunction SelectItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Item>) {\n  return <Select.Item className={cn(styles.item, className)} {...props} />;\n}\n\nfunction SelectItemText({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.ItemText>) {\n  return (\n    <Select.ItemText className={cn(styles.itemText, className)} {...props} />\n  );\n}\n\nfunction SelectGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Group>) {\n  return (\n    <Select.Group className={cn(styles.selectGroup, className)} {...props} />\n  );\n}\n\nfunction SelectGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.GroupLabel>) {\n  return (\n    <Select.GroupLabel\n      className={cn(styles.groupLabel, className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Select.Separator>) {\n  return (\n    <Select.Separator className={cn(styles.separator, className)} {...props} />\n  );\n}\n\nfunction SelectItemIndicator({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Select.ItemIndicator>) {\n  return (\n    <Select.ItemIndicator\n      className={cn(styles.indicator, className)}\n      {...props}\n    >\n      {children || <Check size={16} />}\n    </Select.ItemIndicator>\n  );\n}\n\nexport {\n  SelectRoot as Select,\n  SelectArrow,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectList,\n  SelectOverlay,\n  SelectPopup,\n  SelectPortal,\n  SelectPositioner,\n  SelectRoot,\n  SelectScrollDownArrow,\n  SelectScrollUpArrow,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:file",
      "target": "~/components/ui/select/select.tsx"
    },
    {
      "path": "registry/brook/ui/select/select.module.css",
      "content": ".container {\n  position: relative;\n  display: inline-block;\n  z-index: 150;\n}\n\n.trigger {\n  min-width: 9rem;\n  background-color: var(--mix-card-50-bg);\n}\n.trigger:hover:not(.disabled) {\n  background-color: var(--muted);\n  color: var(--title-hover);\n}\n\n.trigger:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.trigger[data-popup-open] {\n  background-color: var(--muted);\n  color: var(--title-hover);\n}\n\n.trigger.disabled {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n.value {\n  flex: 1;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.value[data-placeholder] {\n  color: var(--muted-foreground);\n}\n\n.icon {\n  margin-left: 0.5rem;\n  height: 1rem;\n  width: 1rem;\n  flex-shrink: 0;\n  opacity: 0.5;\n  transition: transform 0.2s ease-in-out;\n}\n\n.trigger[data-popup-open] .icon {\n  transform: rotate(180deg);\n}\n\n.positioner {\n  z-index: 150;\n}\n\n.popup {\n  min-width: var(--anchor-width);\n  background: var(--mix-card-75-bg);\n  border: 1px solid var(--border);\n  border-radius: var(--radius);\n  transform-origin: var(--transform-origin);\n  overflow-y: auto;\n  z-index: 150;\n\n  transition:\n    transform 150ms,\n    opacity 150ms;\n\n  &[data-starting-style],\n  &[data-ending-style] {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n\n  &[data-side=\"none\"] {\n    transition: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.arrow {\n  width: 0.75rem;\n  height: 0.75rem;\n  background: var(--mix-card-33-bg);\n  border: 1px solid var(--border);\n  border-right: none;\n  border-bottom: none;\n  transform: rotate(45deg);\n  z-index: -1;\n}\n\n.scrollArrow {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 1.5rem;\n  background: var(--mix-card-33-bg);\n  border: none;\n  cursor: pointer;\n  color: var(--foreground);\n  transition: background-color 0.2s ease-in-out;\n}\n\n.scrollArrow:hover {\n  background-color: var(--muted);\n}\n\n.scrollArrow[data-state=\"hidden\"] {\n  display: none;\n}\n\n.list {\n  padding-block: 0.25rem;\n  scroll-padding-block: 1.5rem;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-block: 0.5rem;\n  padding-left: 0.75rem;\n  padding-right: 1rem;\n  min-width: var(--anchor-width);\n  font-size: 0.875rem;\n  color: var(--foreground);\n  cursor: pointer;\n  border-radius: calc(var(--radius) - 2px);\n  transition: all 0.2s ease-in-out;\n  outline: none;\n}\n\n.item:hover:not(.itemDisabled) {\n  background-color: var(--muted);\n  color: var(--title-hover);\n}\n\n.item[data-highlighted] {\n  background-color: var(--muted);\n  color: var(--title-hover);\n}\n\n.item[data-selected] {\n  background-color: transparent;\n}\n\n.item.itemDisabled {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n.itemText {\n  flex: 1;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.indicator {\n  margin-left: 0.5rem;\n  height: 1rem;\n  width: 1rem;\n  flex-shrink: 0;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n}\n\n.item[data-selected] .indicator {\n  opacity: 1;\n}\n\n.separator {\n  height: 1px;\n  background-color: var(--border);\n  margin: 0.25rem 0;\n}\n\n.selectGroup {\n  padding: 0;\n}\n\n.groupLabel {\n  padding: 0.375rem 0.75rem;\n  font-size: 0.75rem;\n  font-weight: 600;\n  color: var(--muted-foreground);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.backdrop {\n  position: fixed;\n  inset: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 140;\n  transition: opacity 150ms;\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/select/select.module.css"
    }
  ]
}