{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:item",
  "title": "Carousel",
  "description": "A slideshow component for cycling through content.",
  "files": [
    {
      "path": "registry/brook/ui/carousel/carousel.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  cloneElement,\n  isValidElement,\n  type ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport styles from \"./carousel.module.css\";\n\nexport type CarouselItem = {\n  id: string;\n  content: React.ReactNode;\n};\n\n/**\n * Carousel component for displaying multiple items in a scrollable horizontal layout with optional navigation and indicators.\n *\n * @param items - Array of carousel items to display\n * @param showIndicators - Show dot indicators for each item (default: false)\n * @param showNavigation - Show previous/next navigation buttons (default: true)\n * @param itemsPerView - Number of items visible at once (default: 3.2)\n * @param gap - Gap between items in pixels (default: 16)\n * @param className - Optional CSS class names\n *\n * @example\n * ```tsx\n * const items = [\n *   { id: '1', content: <Card>Item 1</Card> },\n *   { id: '2', content: <Card>Item 2</Card> },\n *   { id: '3', content: <Card>Item 3</Card> },\n * ];\n *\n * <Carousel\n *   items={items}\n *   showNavigation={true}\n *   showIndicators={false}\n *   itemsPerView={3.2}\n * />\n * ```\n */\nfunction Carousel({\n  className,\n  items,\n  showIndicators = false,\n  showNavigation = true,\n  itemsPerView = 3.2,\n  gap = 16,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  items: CarouselItem[];\n  showIndicators?: boolean;\n  showNavigation?: boolean;\n  itemsPerView?: number;\n  gap?: number;\n}) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const viewportRef = useRef<HTMLDivElement>(null);\n  const isScrollingRef = useRef(false);\n\n  const totalItems = items.length;\n\n  const itemWidth = useMemo(\n    () => `calc((100% - ${gap * (itemsPerView - 1)}px) / ${itemsPerView})`,\n    [itemsPerView, gap],\n  );\n\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [maxScrollLeft, setMaxScrollLeft] = useState(0);\n\n  const canGoNext = scrollLeft < maxScrollLeft;\n  const canGoPrev = scrollLeft > 0;\n\n  const showLeftFade = scrollLeft > 20;\n  const showRightFade = scrollLeft < maxScrollLeft - 20;\n\n  const goToIndex = useCallback(\n    (index: number) => {\n      const viewport = viewportRef.current;\n      if (!viewport) {\n        return;\n      }\n\n      const containerWidth = viewport.clientWidth;\n      const itemWidth =\n        (containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n      const itemWithGap = itemWidth + gap;\n\n      const previousItemOffset = index > 0 ? itemWidth * 0.2 : 0;\n      const targetScroll = Math.max(\n        0,\n        index * itemWithGap - previousItemOffset,\n      );\n\n      isScrollingRef.current = true;\n      viewport.scrollTo({ left: targetScroll, behavior: \"smooth\" });\n\n      setTimeout(() => {\n        isScrollingRef.current = false;\n      }, 300);\n    },\n    [itemsPerView, gap],\n  );\n\n  const nextSlide = useCallback(() => {\n    setCurrentIndex((prev) => {\n      const newIndex = Math.min(prev + 1, totalItems - Math.ceil(itemsPerView));\n      goToIndex(newIndex);\n      return newIndex;\n    });\n  }, [totalItems, itemsPerView, goToIndex]);\n\n  const prevSlide = useCallback(() => {\n    setCurrentIndex((prev) => {\n      const newIndex = Math.max(prev - 1, 0);\n      goToIndex(newIndex);\n      return newIndex;\n    });\n  }, [goToIndex]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const isActiveInCarousel = carouselRef.current?.contains(\n        document.activeElement,\n      );\n      const isActiveOnCarouselContainer =\n        document.activeElement === carouselRef.current?.parentElement;\n\n      if (!(isActiveInCarousel || isActiveOnCarouselContainer)) {\n        return;\n      }\n\n      switch (event.key) {\n        case \"ArrowLeft\":\n          if (canGoPrev) {\n            event.preventDefault();\n            prevSlide();\n          }\n          break;\n        case \"ArrowRight\":\n          if (canGoNext) {\n            event.preventDefault();\n            nextSlide();\n          }\n          break;\n        case \"Home\":\n          event.preventDefault();\n          goToIndex(0);\n          break;\n        case \"End\":\n          event.preventDefault();\n          goToIndex(Math.max(0, totalItems - Math.ceil(itemsPerView)));\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [\n    prevSlide,\n    nextSlide,\n    goToIndex,\n    canGoNext,\n    canGoPrev,\n    totalItems,\n    itemsPerView,\n  ]);\n\n  useEffect(() => {\n    const viewport = viewportRef.current;\n    if (!viewport) {\n      return;\n    }\n\n    const updateScrollInfo = () => {\n      const newScrollLeft = viewport.scrollLeft;\n      const newMaxScrollLeft = viewport.scrollWidth - viewport.clientWidth;\n\n      setScrollLeft(newScrollLeft);\n      setMaxScrollLeft(newMaxScrollLeft);\n\n      if (!isScrollingRef.current) {\n        const containerWidth = viewport.clientWidth;\n        const itemWidth =\n          (containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n        const itemWithGap = itemWidth + gap;\n\n        const adjustedScrollLeft = newScrollLeft + itemWidth * 0.2;\n        const newIndex = Math.round(adjustedScrollLeft / itemWithGap);\n        setCurrentIndex(Math.max(0, Math.min(newIndex, totalItems - 1)));\n      }\n    };\n\n    updateScrollInfo();\n\n    viewport.addEventListener(\"scroll\", updateScrollInfo, { passive: true });\n\n    window.addEventListener(\"resize\", updateScrollInfo);\n\n    return () => {\n      viewport.removeEventListener(\"scroll\", updateScrollInfo);\n      window.removeEventListener(\"resize\", updateScrollInfo);\n    };\n  }, [itemsPerView, totalItems, gap]);\n\n  return (\n    <div\n      aria-label=\"Interactive carousel\"\n      aria-roledescription=\"carousel\"\n      className={cn(styles.carousel, className)}\n      data-slot=\"carousel\"\n      role=\"region\"\n      {...props}\n    >\n      <div\n        aria-atomic=\"false\"\n        aria-live=\"polite\"\n        className={cn(\n          styles.viewport,\n          showLeftFade && styles.showLeftFade,\n          showRightFade && styles.showRightFade,\n        )}\n        ref={viewportRef}\n      >\n        <div\n          className={styles.container}\n          id=\"carousel-slides\"\n          ref={carouselRef}\n          style={{\n            gap: `${gap}px`,\n          }}\n        >\n          {items.map((item, index) => {\n            const isVisible =\n              index >= Math.max(0, currentIndex - 1) &&\n              index < currentIndex + Math.ceil(itemsPerView);\n\n            return (\n              <div\n                aria-hidden={!isVisible}\n                aria-label={`${index + 1} of ${items.length}`}\n                aria-roledescription=\"slide\"\n                className={styles.slide}\n                inert={isVisible ? undefined : true}\n                key={item.id}\n                role=\"group\"\n                style={{\n                  width: itemWidth,\n                  minWidth: itemWidth,\n                  visibility: isVisible ? \"visible\" : \"hidden\",\n                }}\n              >\n                {item.content ? (\n                  isValidElement(item.content) ? (\n                    cloneElement(\n                      item.content as ReactElement<\n                        React.HTMLAttributes<HTMLElement>\n                      >,\n                      {\n                        tabIndex: isVisible ? 0 : -1,\n                        \"aria-label\": `Item ${index + 1} content`,\n                        style: {\n                          ...((\n                            item.content as ReactElement<\n                              React.HTMLAttributes<HTMLElement>\n                            >\n                          )?.props?.style || {}),\n                          outline: \"none\",\n                          width: \"100%\",\n                          height: \"100%\",\n                        },\n                      },\n                    )\n                  ) : (\n                    <div\n                      aria-label={`Item ${index + 1} content`}\n                      style={{\n                        outline: \"none\",\n                        width: \"100%\",\n                        height: \"100%\",\n                      }}\n                      tabIndex={isVisible ? 0 : -1}\n                    >\n                      {item.content}\n                    </div>\n                  )\n                ) : (\n                  <div>Invalid carousel item</div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {showNavigation && items.length > 1 && (\n        <div className={styles.navContainer}>\n          <button\n            aria-controls=\"carousel-slides\"\n            aria-label=\"Scroll to previous items\"\n            className={cn(styles.navButton, styles.prevButton)}\n            disabled={!canGoPrev}\n            onClick={prevSlide}\n            type=\"button\"\n          >\n            <svg\n              aria-hidden=\"true\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"m15 18-6-6 6-6\" />\n            </svg>\n          </button>\n          <button\n            aria-controls=\"carousel-slides\"\n            aria-label=\"Scroll to next items\"\n            className={cn(styles.navButton, styles.nextButton)}\n            disabled={!canGoNext}\n            onClick={nextSlide}\n            type=\"button\"\n          >\n            <svg\n              aria-hidden=\"true\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"m9 18 6-6-6-6\" />\n            </svg>\n          </button>\n        </div>\n      )}\n\n      {showIndicators && items.length > 1 && (\n        <div\n          aria-label=\"Choose slide to display\"\n          className={styles.indicators}\n          role=\"tablist\"\n        >\n          {items.map((_, index) => (\n            <button\n              aria-controls=\"carousel-slides\"\n              aria-label={`Scroll to item ${index + 1}`}\n              aria-selected={false}\n              className={cn(\n                styles.indicator,\n                currentIndex === index && styles.indicatorActive,\n              )}\n              key={index}\n              onClick={() => goToIndex(index)}\n              role=\"tab\"\n              type=\"button\"\n            />\n          ))}\n        </div>\n      )}\n\n      <div className={styles.srOnly}>\n        <div aria-atomic=\"true\" aria-live=\"polite\">\n          Showing items {currentIndex + 1} to{\" \"}\n          {Math.min(items.length, currentIndex + Math.ceil(itemsPerView))} of{\" \"}\n          {items.length}\n        </div>\n        <p>Use arrow keys or tab/shift+tab to navigate slides.</p>\n      </div>\n    </div>\n  );\n}\n\nexport { Carousel };\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.tsx"
    },
    {
      "path": "registry/brook/ui/carousel/carousel.module.css",
      "content": ".carousel {\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  border-radius: 0.5rem;\n  overflow: visible;\n}\n\n.carousel:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.viewport {\n  position: relative;\n  width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  scroll-behavior: smooth;\n  scroll-snap-type: none;\n}\n\n.viewport::-webkit-scrollbar {\n  display: none;\n}\n\n.container {\n  display: flex;\n  align-items: stretch;\n  padding-left: 2rem;\n}\n\n.slide {\n  flex-shrink: 0;\n  position: relative;\n}\n\n.slide[aria-hidden=\"true\"] {\n  pointer-events: none;\n}\n\n.slide:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: -2px;\n}\n\n.slide > *:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.slide > *:focus:not(:focus-visible) {\n  outline: none;\n}\n\n.navContainer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n  margin-top: 1.5rem;\n  padding-right: 0;\n}\n\n.navButton {\n  position: relative;\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  border: none;\n  background: var(--card);\n  color: var(--foreground);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: var(--shadow-md);\n  transition: all 0.2s ease;\n  opacity: 0.9;\n  border: 1px solid var(--border);\n}\n\n.navButton:hover {\n  opacity: 1;\n  background: var(--muted);\n  transform: scale(1.05);\n}\n\n.navButton:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.navButton:active {\n  transform: scale(0.95);\n}\n\n.navButton:disabled {\n  opacity: 0.3;\n  cursor: default;\n  background: var(--muted);\n  color: var(--muted-foreground);\n  pointer-events: none;\n}\n\n.navButton:disabled:hover {\n  opacity: 0.3;\n  transform: none;\n  background: var(--muted);\n}\n\n.navButton svg {\n  width: 1rem;\n  height: 1rem;\n}\n\n.indicators {\n  position: absolute;\n  bottom: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 0.5rem;\n  z-index: 10;\n}\n\n.indicator {\n  width: 0.75rem;\n  height: 0.75rem;\n  border-radius: 50%;\n  border: none;\n  background: rgba(255, 255, 255, 0.5);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.indicator:hover {\n  background: rgba(255, 255, 255, 0.7);\n  transform: scale(1.1);\n}\n\n.indicator:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.indicatorActive {\n  background: var(--primary);\n  transform: scale(1.2);\n}\n\n.indicatorActive:hover {\n  background: var(--primary);\n}\n\n.srOnly {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n@media (max-width: 768px) {\n  .carousel {\n    max-width: 100%;\n    border-radius: 0.25rem;\n  }\n\n  .viewport {\n    height: auto;\n  }\n\n  .container {\n    padding-left: 1.5rem;\n  }\n\n  .navContainer {\n    margin-top: 1rem;\n    padding-right: 1rem;\n  }\n\n  .navButton {\n    width: 2.25rem;\n    height: 2.25rem;\n  }\n\n  .navButton svg {\n    width: 1rem;\n    height: 1rem;\n  }\n\n  .indicators {\n    bottom: 0.75rem;\n  }\n\n  .indicator {\n    width: 0.625rem;\n    height: 0.625rem;\n  }\n}\n\n@media (max-width: 640px) {\n  .carousel {\n    border-radius: 0.25rem;\n  }\n\n  .container {\n    padding-left: 0.75rem;\n  }\n\n  .navContainer {\n    padding-right: 0.75rem;\n  }\n\n  .navButton {\n    width: 2rem;\n    height: 2rem;\n  }\n\n  .navButton svg {\n    width: 0.875rem;\n    height: 0.875rem;\n  }\n}\n\n[data-theme=\"dark\"] .indicator {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n[data-theme=\"dark\"] .indicator:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .container {\n    transition: none;\n  }\n\n  .navButton,\n  .indicator {\n    transition: none;\n  }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.module.css"
    }
  ]
}