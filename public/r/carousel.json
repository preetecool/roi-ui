{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:item",
  "title": "Carousel",
  "description": "A slideshow component for cycling through content.",
  "files": [
    {
      "path": "registry/brook/ui/carousel/carousel.tsx",
      "content": "\"use client\";\n\nimport { useControlled } from \"@base-ui-components/utils/useControlled\";\nimport {\n\tcreateContext,\n\ttype ReactNode,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport styles from \"./carousel.module.css\";\n\nconst FADE_THRESHOLD_PX = 20;\nconst PREVIOUS_ITEM_OFFSET_PERCENTAGE = 0.2;\nconst SCROLL_TIMEOUT_MS = 300;\n\ntype CarouselContextValue = {\n\tcurrentIndex: number;\n\tsetCurrentIndex: (index: number) => void;\n\ttotalItems: number;\n\titemsPerView: number;\n\tgap: number;\n\titemWidth: string;\n\tgoToIndex: (index: number) => void;\n\tnextSlide: () => void;\n\tprevSlide: () => void;\n\tcanGoNext: boolean;\n\tcanGoPrev: boolean;\n\tshowLeftFade: boolean;\n\tshowRightFade: boolean;\n\tscrollLeft: number;\n\tmaxScrollLeft: number;\n\tsetScrollLeft: (value: number) => void;\n\tsetMaxScrollLeft: (value: number) => void;\n\tviewportRef: React.RefObject<HTMLDivElement | null>;\n\tcontainerRef: React.RefObject<HTMLDivElement | null>;\n\tisScrollingRef: React.MutableRefObject<boolean>;\n\tregisterItem: () => void;\n};\n\nconst CarouselContext = createContext<CarouselContextValue | null>(null);\n\nfunction useCarousel() {\n\tconst context = useContext(CarouselContext);\n\tif (!context) {\n\t\tthrow new Error(\"Carousel components must be used within Carousel.Root\");\n\t}\n\treturn context;\n}\n\nexport type CarouselRootProps = React.ComponentProps<\"section\"> & {\n\t/** Number of items visible in viewport. @default 3.2 */\n\titemsPerView?: number;\n\t/** Gap between items in pixels. @default 16 */\n\tgap?: number;\n\t/** Controlled index value. */\n\tindex?: number;\n\t/** Default index for uncontrolled mode. @default 0 */\n\tdefaultIndex?: number;\n\t/** Callback when index changes. */\n\tonIndexChange?: (index: number) => void;\n\tchildren: ReactNode;\n};\n\n/** Root component. Manages state and provides context. */\nexport function Root({\n\tchildren,\n\titemsPerView = 3.2,\n\tgap = 16,\n\tindex: indexProp,\n\tdefaultIndex = 0,\n\tonIndexChange,\n\tclassName,\n\t...props\n}: CarouselRootProps) {\n\tconst [currentIndex, setCurrentIndex] = useControlled({\n\t\tcontrolled: indexProp,\n\t\tdefault: defaultIndex,\n\t\tname: \"Carousel\",\n\t\tstate: \"index\",\n\t});\n\n\tconst [totalItems, setTotalItems] = useState(0);\n\tconst [scrollLeft, setScrollLeft] = useState(0);\n\tconst [maxScrollLeft, setMaxScrollLeft] = useState(0);\n\n\tconst viewportRef = useRef<HTMLDivElement>(null);\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\tconst isScrollingRef = useRef(false);\n\n\tconst canGoNext = scrollLeft < maxScrollLeft;\n\tconst canGoPrev = scrollLeft > 0;\n\n\tconst showLeftFade = scrollLeft > FADE_THRESHOLD_PX;\n\tconst showRightFade = scrollLeft < maxScrollLeft - FADE_THRESHOLD_PX;\n\n\tconst itemWidth = useMemo(\n\t\t() => `calc((100% - ${gap * (itemsPerView - 1)}px) / ${itemsPerView})`,\n\t\t[itemsPerView, gap],\n\t);\n\n\tconst goToIndex = useCallback(\n\t\t(index: number) => {\n\t\t\tconst viewport = viewportRef.current;\n\t\t\tif (!viewport) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst containerWidth = viewport.clientWidth;\n\t\t\tconst calculatedItemWidth =\n\t\t\t\t(containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n\t\t\tconst itemWithGap = calculatedItemWidth + gap;\n\n\t\t\tconst previousItemOffset =\n\t\t\t\tindex > 0 ? calculatedItemWidth * PREVIOUS_ITEM_OFFSET_PERCENTAGE : 0;\n\t\t\tconst targetScroll = Math.max(\n\t\t\t\t0,\n\t\t\t\tindex * itemWithGap - previousItemOffset,\n\t\t\t);\n\n\t\t\tisScrollingRef.current = true;\n\t\t\tviewport.scrollTo({ left: targetScroll, behavior: \"smooth\" });\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tisScrollingRef.current = false;\n\t\t\t}, SCROLL_TIMEOUT_MS);\n\t\t},\n\t\t[itemsPerView, gap],\n\t);\n\n\tconst handleIndexChange = useCallback(\n\t\t(newIndex: number) => {\n\t\t\tsetCurrentIndex(newIndex);\n\t\t\tonIndexChange?.(newIndex);\n\t\t},\n\t\t[setCurrentIndex, onIndexChange],\n\t);\n\n\tconst nextSlide = useCallback(() => {\n\t\tconst newIndex = Math.min(\n\t\t\tcurrentIndex + 1,\n\t\t\ttotalItems - Math.ceil(itemsPerView),\n\t\t);\n\t\tgoToIndex(newIndex);\n\t\thandleIndexChange(newIndex);\n\t}, [currentIndex, totalItems, itemsPerView, goToIndex, handleIndexChange]);\n\n\tconst prevSlide = useCallback(() => {\n\t\tconst newIndex = Math.max(currentIndex - 1, 0);\n\t\tgoToIndex(newIndex);\n\t\thandleIndexChange(newIndex);\n\t}, [currentIndex, goToIndex, handleIndexChange]);\n\n\tconst registerItem = useCallback(() => {\n\t\tsetTotalItems((prev) => prev + 1);\n\t}, []);\n\n\tconst value: CarouselContextValue = {\n\t\tcurrentIndex,\n\t\tsetCurrentIndex: handleIndexChange,\n\t\ttotalItems,\n\t\titemsPerView,\n\t\tgap,\n\t\titemWidth,\n\t\tgoToIndex,\n\t\tnextSlide,\n\t\tprevSlide,\n\t\tcanGoNext,\n\t\tcanGoPrev,\n\t\tshowLeftFade,\n\t\tshowRightFade,\n\t\tscrollLeft,\n\t\tmaxScrollLeft,\n\t\tsetScrollLeft,\n\t\tsetMaxScrollLeft,\n\t\tviewportRef,\n\t\tcontainerRef,\n\t\tisScrollingRef,\n\t\tregisterItem,\n\t};\n\n\treturn (\n\t\t<CarouselContext.Provider value={value}>\n\t\t\t<section\n\t\t\t\taria-label=\"Interactive carousel\"\n\t\t\t\taria-roledescription=\"carousel\"\n\t\t\t\tclassName={cn(styles.carousel, className)}\n\t\t\t\tdata-slot=\"carousel\"\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</section>\n\t\t</CarouselContext.Provider>\n\t);\n}\n\nexport type CarouselViewportProps = React.ComponentProps<\"div\">;\n\n/** Scrollable viewport. Handles scroll events and fade effects. */\nexport function Viewport({\n\tclassName,\n\tchildren,\n\t...props\n}: CarouselViewportProps) {\n\tconst {\n\t\tviewportRef,\n\t\tshowLeftFade,\n\t\tshowRightFade,\n\t\tsetScrollLeft,\n\t\tsetMaxScrollLeft,\n\t\tsetCurrentIndex,\n\t\titemsPerView,\n\t\ttotalItems,\n\t\tgap,\n\t\tisScrollingRef,\n\t} = useCarousel();\n\n\tuseEffect(() => {\n\t\tconst viewport = viewportRef.current;\n\t\tif (!viewport) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst updateScrollInfo = () => {\n\t\t\tconst newScrollLeft = viewport.scrollLeft;\n\t\t\tconst newMaxScrollLeft = viewport.scrollWidth - viewport.clientWidth;\n\n\t\t\tsetScrollLeft(newScrollLeft);\n\t\t\tsetMaxScrollLeft(newMaxScrollLeft);\n\n\t\t\tif (!isScrollingRef.current) {\n\t\t\t\tconst containerWidth = viewport.clientWidth;\n\t\t\t\tconst calculatedItemWidth =\n\t\t\t\t\t(containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n\t\t\t\tconst itemWithGap = calculatedItemWidth + gap;\n\n\t\t\t\tconst adjustedScrollLeft =\n\t\t\t\t\tnewScrollLeft + calculatedItemWidth * PREVIOUS_ITEM_OFFSET_PERCENTAGE;\n\t\t\t\tconst newIndex = Math.round(adjustedScrollLeft / itemWithGap);\n\t\t\t\tsetCurrentIndex(Math.max(0, Math.min(newIndex, totalItems - 1)));\n\t\t\t}\n\t\t};\n\n\t\tupdateScrollInfo();\n\n\t\tviewport.addEventListener(\"scroll\", updateScrollInfo, { passive: true });\n\t\twindow.addEventListener(\"resize\", updateScrollInfo);\n\n\t\treturn () => {\n\t\t\tviewport.removeEventListener(\"scroll\", updateScrollInfo);\n\t\t\twindow.removeEventListener(\"resize\", updateScrollInfo);\n\t\t};\n\t}, [\n\t\titemsPerView,\n\t\ttotalItems,\n\t\tgap,\n\t\tsetScrollLeft,\n\t\tsetMaxScrollLeft,\n\t\tsetCurrentIndex,\n\t\tviewportRef,\n\t\tisScrollingRef,\n\t]);\n\n\treturn (\n\t\t<div\n\t\t\taria-atomic=\"false\"\n\t\t\taria-live=\"polite\"\n\t\t\tclassName={cn(\n\t\t\t\tstyles.viewport,\n\t\t\t\tshowLeftFade && styles.showLeftFade,\n\t\t\t\tshowRightFade && styles.showRightFade,\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tref={viewportRef}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport type CarouselContentProps = React.ComponentProps<\"div\">;\n\n/** Content wrapper. Flex container for horizontal layout. */\nexport function Content({\n\tclassName,\n\tchildren,\n\t...props\n}: CarouselContentProps) {\n\tconst { containerRef, gap } = useCarousel();\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(styles.container, className)}\n\t\t\tid=\"carousel-slides\"\n\t\t\tref={containerRef}\n\t\t\tstyle={{\n\t\t\t\tgap: `${gap}px`,\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport type CarouselItemProps = React.ComponentProps<\"fieldset\"> & {\n\t/** Item index (required). */\n\tindex: number;\n};\n\n/** Individual carousel slide. Auto-registers with carousel context. */\nexport function Item({\n\tindex,\n\tclassName,\n\tchildren,\n\t...props\n}: CarouselItemProps) {\n\tconst { currentIndex, itemsPerView, totalItems, itemWidth, registerItem } =\n\t\tuseCarousel();\n\n\tuseEffect(() => {\n\t\tregisterItem();\n\t}, [registerItem]);\n\n\tconst isVisible =\n\t\tindex >= Math.max(0, currentIndex - 1) &&\n\t\tindex < currentIndex + Math.ceil(itemsPerView);\n\n\treturn (\n\t\t<fieldset\n\t\t\taria-hidden={!isVisible}\n\t\t\taria-label={`${index + 1} of ${totalItems}`}\n\t\t\taria-roledescription=\"slide\"\n\t\t\tclassName={cn(styles.slide, className)}\n\t\t\tinert={isVisible ? undefined : true}\n\t\t\tstyle={{\n\t\t\t\twidth: itemWidth,\n\t\t\t\tminWidth: itemWidth,\n\t\t\t\tvisibility: isVisible ? \"visible\" : \"hidden\",\n\t\t\t\tborder: \"none\",\n\t\t\t\tpadding: 0,\n\t\t\t\tmargin: 0,\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</fieldset>\n\t);\n}\n\nexport type CarouselPreviousProps = React.ComponentProps<\"button\">;\n\n/** Previous button. Auto-disabled at start. */\nexport function Previous({\n\tclassName,\n\tchildren,\n\t...props\n}: CarouselPreviousProps) {\n\tconst { prevSlide, canGoPrev } = useCarousel();\n\n\treturn (\n\t\t<button\n\t\t\taria-controls=\"carousel-slides\"\n\t\t\taria-label=\"Scroll to previous items\"\n\t\t\tclassName={cn(styles.navButton, styles.prevButton, className)}\n\t\t\tdisabled={!canGoPrev}\n\t\t\tonClick={prevSlide}\n\t\t\ttype=\"button\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children || (\n\t\t\t\t<svg\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t>\n\t\t\t\t\t<path d=\"m15 18-6-6 6-6\" />\n\t\t\t\t</svg>\n\t\t\t)}\n\t\t</button>\n\t);\n}\n\nexport type CarouselNextProps = React.ComponentProps<\"button\">;\n\n/** Next button. Auto-disabled at end. */\nexport function Next({ className, children, ...props }: CarouselNextProps) {\n\tconst { nextSlide, canGoNext } = useCarousel();\n\n\treturn (\n\t\t<button\n\t\t\taria-controls=\"carousel-slides\"\n\t\t\taria-label=\"Scroll to next items\"\n\t\t\tclassName={cn(styles.navButton, styles.nextButton, className)}\n\t\t\tdisabled={!canGoNext}\n\t\t\tonClick={nextSlide}\n\t\t\ttype=\"button\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children || (\n\t\t\t\t<svg\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t>\n\t\t\t\t\t<path d=\"m9 18 6-6-6-6\" />\n\t\t\t\t</svg>\n\t\t\t)}\n\t\t</button>\n\t);\n}\n\nexport type CarouselNavigationProps = React.ComponentProps<\"div\">;\n\n/** Navigation wrapper. Renders default buttons if no children provided. Hidden with one item. */\nexport function Navigation({\n\tclassName,\n\tchildren,\n\t...props\n}: CarouselNavigationProps) {\n\tconst { totalItems } = useCarousel();\n\n\tif (totalItems <= 1) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div className={cn(styles.navContainer, className)} {...props}>\n\t\t\t{children || (\n\t\t\t\t<>\n\t\t\t\t\t<Previous />\n\t\t\t\t\t<Next />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport type CarouselIndicatorsProps = React.ComponentProps<\"div\">;\n\n/** Dot indicators for each item. Hidden with one item. */\nexport function Indicators({ className, ...props }: CarouselIndicatorsProps) {\n\tconst { totalItems, currentIndex, goToIndex } = useCarousel();\n\n\tif (totalItems <= 1) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div\n\t\t\taria-label=\"Choose slide to display\"\n\t\t\tclassName={cn(styles.indicators, className)}\n\t\t\trole=\"tablist\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{Array.from({ length: totalItems }, (_, index) => (\n\t\t\t\t<button\n\t\t\t\t\taria-controls=\"carousel-slides\"\n\t\t\t\t\taria-label={`Scroll to item ${index + 1}`}\n\t\t\t\t\taria-selected={currentIndex === index}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\tstyles.indicator,\n\t\t\t\t\t\tcurrentIndex === index && styles.indicatorActive,\n\t\t\t\t\t)}\n\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: Indicators are stable and don't reorder\n\t\t\t\t\tkey={`indicator-${index}`}\n\t\t\t\t\tonClick={() => goToIndex(index)}\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport type CarouselSRInfoProps = React.ComponentProps<\"div\">;\n\n/** Screen reader info. Announces position and navigation instructions. */\nexport function SRInfo({ className, ...props }: CarouselSRInfoProps) {\n\tconst { currentIndex, itemsPerView, totalItems } = useCarousel();\n\n\treturn (\n\t\t<div className={cn(styles.srOnly, className)} {...props}>\n\t\t\t<div aria-atomic=\"true\" aria-live=\"polite\">\n\t\t\t\tShowing items {currentIndex + 1} to{\" \"}\n\t\t\t\t{Math.min(totalItems, currentIndex + Math.ceil(itemsPerView))} of{\" \"}\n\t\t\t\t{totalItems}\n\t\t\t</div>\n\t\t\t<p>Use arrow keys or tab/shift+tab to navigate slides.</p>\n\t\t</div>\n\t);\n}\n\nfunction useKeyboardNavigation() {\n\tconst {\n\t\tcontainerRef,\n\t\tcanGoNext,\n\t\tcanGoPrev,\n\t\tprevSlide,\n\t\tnextSlide,\n\t\tgoToIndex,\n\t\ttotalItems,\n\t\titemsPerView,\n\t} = useCarousel();\n\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\t\tconst isActiveInCarousel = containerRef.current?.contains(\n\t\t\t\tdocument.activeElement,\n\t\t\t);\n\t\t\tconst isActiveOnCarouselContainer =\n\t\t\t\tdocument.activeElement === containerRef.current?.parentElement;\n\n\t\t\tif (!(isActiveInCarousel || isActiveOnCarouselContainer)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (event.key) {\n\t\t\t\tcase \"ArrowLeft\":\n\t\t\t\t\tif (canGoPrev) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tprevSlide();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ArrowRight\":\n\t\t\t\t\tif (canGoNext) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tnextSlide();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Home\":\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tgoToIndex(0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"End\":\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tgoToIndex(Math.max(0, totalItems - Math.ceil(itemsPerView)));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener(\"keydown\", handleKeyDown);\n\t\treturn () => document.removeEventListener(\"keydown\", handleKeyDown);\n\t}, [\n\t\tprevSlide,\n\t\tnextSlide,\n\t\tgoToIndex,\n\t\tcanGoNext,\n\t\tcanGoPrev,\n\t\ttotalItems,\n\t\titemsPerView,\n\t\tcontainerRef,\n\t]);\n}\n\n/** Enables keyboard navigation. Supports arrow keys, Home, and End. */\nexport function KeyboardHandler() {\n\tuseKeyboardNavigation();\n\treturn null;\n}\n\n/**\n * Composable carousel component with horizontal scrolling.\n * Required: Carousel, Viewport, Content, Item.\n * Optional: Navigation, Previous, Next, Indicators, SRInfo, KeyboardHandler.\n */\nconst CarouselNamespace = Object.assign(Root, {\n\tViewport,\n\tContent,\n\tItem,\n\tPrevious,\n\tNext,\n\tNavigation,\n\tIndicators,\n\tSRInfo,\n\tKeyboardHandler,\n});\n\nexport { CarouselNamespace as Carousel };\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.tsx"
    },
    {
      "path": "registry/brook/ui/carousel/carousel.module.css",
      "content": ".carousel {\n    position: relative;\n    width: 100%;\n    margin: 0 auto;\n    border-radius: 0.5rem;\n    overflow: visible;\n}\n\n.carousel:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n.viewport {\n    position: relative;\n    width: 100%;\n    overflow-x: auto;\n    overflow-y: hidden;\n\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    scroll-behavior: smooth;\n    scroll-snap-type: none;\n}\n\n.viewport::-webkit-scrollbar {\n    display: none;\n}\n\n.container {\n    display: flex;\n    align-items: stretch;\n\n}\n\n.slide {\n    flex-shrink: 0;\n    position: relative;\n}\n\n.slide[aria-hidden=\"true\"] {\n    pointer-events: none;\n}\n\n.slide:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: -2px;\n}\n\n.slide>*:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n.slide>*:focus:not(:focus-visible) {\n    outline: none;\n}\n\n.navContainer {\n    display: flex;\n    justify-content: flex-end;\n    gap: 0.5rem;\n    margin-top: 1.5rem;\n    padding-right: 0;\n}\n\n.navButton {\n    position: relative;\n    width: 2.5rem;\n    height: 2.5rem;\n    border-radius: 50%;\n    border: 1px solid var(--border);\n    background: var(--card);\n    color: var(--foreground);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: var(--shadow-md);\n    transition: all 0.2s ease;\n    opacity: 0.9;\n}\n\n.navButton:hover {\n    opacity: 1;\n    background: var(--muted);\n    transform: scale(1.05);\n}\n\n.navButton:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n.navButton:active {\n    transform: scale(0.95);\n}\n\n.navButton:disabled {\n    opacity: 0.3;\n    cursor: default;\n    background: var(--muted);\n    color: var(--muted-foreground);\n    pointer-events: none;\n}\n\n.navButton:disabled:hover {\n    opacity: 0.3;\n    transform: none;\n    background: var(--muted);\n}\n\n.navButton svg {\n    width: 1rem;\n    height: 1rem;\n}\n\n.indicators {\n    position: absolute;\n    bottom: 1rem;\n    left: 50%;\n    transform: translateX(-50%);\n    display: flex;\n    gap: 0.5rem;\n    z-index: 10;\n}\n\n.indicator {\n    width: 0.75rem;\n    height: 0.75rem;\n    border-radius: 50%;\n    border: none;\n    background: rgba(255, 255, 255, 0.5);\n    cursor: pointer;\n    transition: all 0.2s ease;\n    position: relative;\n}\n\n.indicator:hover {\n    background: rgba(255, 255, 255, 0.7);\n    transform: scale(1.1);\n}\n\n.indicator:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n.indicatorActive {\n    background: var(--primary);\n    transform: scale(1.2);\n}\n\n.indicatorActive:hover {\n    background: var(--primary);\n}\n\n.srOnly {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n@media (max-width: 768px) {\n    .carousel {\n        max-width: 100%;\n        border-radius: 0.25rem;\n    }\n\n    .viewport {\n        height: auto;\n    }\n\n    .container {\n        padding-left: 1.5rem;\n    }\n\n    .navContainer {\n        margin-top: 1rem;\n        padding-right: 1rem;\n    }\n\n    .navButton {\n        width: 2.25rem;\n        height: 2.25rem;\n    }\n\n    .navButton svg {\n        width: 1rem;\n        height: 1rem;\n    }\n\n    .indicators {\n        bottom: 0.75rem;\n    }\n\n    .indicator {\n        width: 0.625rem;\n        height: 0.625rem;\n    }\n}\n\n@media (max-width: 640px) {\n    .carousel {\n        border-radius: 0.25rem;\n    }\n\n    .container {\n        padding-left: 0.75rem;\n    }\n\n    .navContainer {\n        padding-right: 0.75rem;\n    }\n\n    .navButton {\n        width: 2rem;\n        height: 2rem;\n    }\n\n    .navButton svg {\n        width: 0.875rem;\n        height: 0.875rem;\n    }\n}\n\n[data-theme=\"dark\"] .indicator {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n[data-theme=\"dark\"] .indicator:hover {\n    background: rgba(255, 255, 255, 0.5);\n}\n\n@media (prefers-reduced-motion: reduce) {\n    .container {\n        transition: none;\n    }\n\n    .navButton,\n    .indicator {\n        transition: none;\n    }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.module.css"
    }
  ]
}