{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:item",
  "title": "Carousel",
  "description": "A slideshow component for cycling through content.",
  "files": [
    {
      "path": "registry/brook/ui/carousel/carousel.tsx",
      "content": "\"use client\";\n\nimport {\n  createContext,\n  type ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport styles from \"./carousel.module.css\";\n\nconst FADE_THRESHOLD_PX = 20;\nconst PREVIOUS_ITEM_OFFSET_PERCENTAGE = 0.2;\nconst SCROLL_TIMEOUT_MS = 300;\n\ntype CarouselContextValue = {\n  currentIndex: number;\n  setCurrentIndex: (index: number) => void;\n  totalItems: number;\n  itemsPerView: number;\n  gap: number;\n  itemWidth: string;\n  goToIndex: (index: number) => void;\n  nextSlide: () => void;\n  prevSlide: () => void;\n  canGoNext: boolean;\n  canGoPrev: boolean;\n  showLeftFade: boolean;\n  showRightFade: boolean;\n  scrollLeft: number;\n  maxScrollLeft: number;\n  setScrollLeft: (value: number) => void;\n  setMaxScrollLeft: (value: number) => void;\n  viewportRef: React.RefObject<HTMLDivElement | null>;\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  isScrollingRef: React.MutableRefObject<boolean>;\n  registerItem: () => void;\n};\n\nconst CarouselContext = createContext<CarouselContextValue | null>(null);\n\nfunction useCarousel() {\n  const context = useContext(CarouselContext);\n  if (!context) {\n    throw new Error(\"Carousel components must be used within Carousel.Root\");\n  }\n  return context;\n}\n\n/**\n * Props for the Carousel root component.\n */\nexport type CarouselRootProps = React.ComponentProps<\"section\"> & {\n  /** Number of items visible in the viewport at once. @default 3.2 */\n  itemsPerView?: number;\n  /** Gap between carousel items in pixels. @default 16 */\n  gap?: number;\n  children: ReactNode;\n};\n\n/**\n * Root component for the Carousel. Manages state and provides context to all child components.\n *\n * @example\n * ```tsx\n * <Carousel itemsPerView={3} gap={16}>\n *   <Carousel.Viewport>\n *     <Carousel.Content>\n *       <Carousel.Item index={0}>Item 1</Carousel.Item>\n *     </Carousel.Content>\n *   </Carousel.Viewport>\n *   <Carousel.Navigation />\n * </Carousel>\n * ```\n */\nexport function Root({\n  children,\n  itemsPerView = 3.2,\n  gap = 16,\n  className,\n  ...props\n}: CarouselRootProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [maxScrollLeft, setMaxScrollLeft] = useState(0);\n\n  const viewportRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const isScrollingRef = useRef(false);\n\n  const canGoNext = scrollLeft < maxScrollLeft;\n  const canGoPrev = scrollLeft > 0;\n\n  const showLeftFade = scrollLeft > FADE_THRESHOLD_PX;\n  const showRightFade = scrollLeft < maxScrollLeft - FADE_THRESHOLD_PX;\n\n  const itemWidth = useMemo(\n    () => `calc((100% - ${gap * (itemsPerView - 1)}px) / ${itemsPerView})`,\n    [itemsPerView, gap]\n  );\n\n  const goToIndex = useCallback(\n    (index: number) => {\n      const viewport = viewportRef.current;\n      if (!viewport) {\n        return;\n      }\n\n      const containerWidth = viewport.clientWidth;\n      const calculatedItemWidth =\n        (containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n      const itemWithGap = calculatedItemWidth + gap;\n\n      const previousItemOffset =\n        index > 0 ? calculatedItemWidth * PREVIOUS_ITEM_OFFSET_PERCENTAGE : 0;\n      const targetScroll = Math.max(\n        0,\n        index * itemWithGap - previousItemOffset\n      );\n\n      isScrollingRef.current = true;\n      viewport.scrollTo({ left: targetScroll, behavior: \"smooth\" });\n\n      setTimeout(() => {\n        isScrollingRef.current = false;\n      }, SCROLL_TIMEOUT_MS);\n    },\n    [itemsPerView, gap]\n  );\n\n  const nextSlide = useCallback(() => {\n    setCurrentIndex((prev) => {\n      const newIndex = Math.min(prev + 1, totalItems - Math.ceil(itemsPerView));\n      goToIndex(newIndex);\n      return newIndex;\n    });\n  }, [totalItems, itemsPerView, goToIndex]);\n\n  const prevSlide = useCallback(() => {\n    setCurrentIndex((prev) => {\n      const newIndex = Math.max(prev - 1, 0);\n      goToIndex(newIndex);\n      return newIndex;\n    });\n  }, [goToIndex]);\n\n  const registerItem = useCallback(() => {\n    setTotalItems((prev) => prev + 1);\n  }, []);\n\n  const value: CarouselContextValue = {\n    currentIndex,\n    setCurrentIndex,\n    totalItems,\n    itemsPerView,\n    gap,\n    itemWidth,\n    goToIndex,\n    nextSlide,\n    prevSlide,\n    canGoNext,\n    canGoPrev,\n    showLeftFade,\n    showRightFade,\n    scrollLeft,\n    maxScrollLeft,\n    setScrollLeft,\n    setMaxScrollLeft,\n    viewportRef,\n    containerRef,\n    isScrollingRef,\n    registerItem,\n  };\n\n  return (\n    <CarouselContext.Provider value={value}>\n      <section\n        aria-label=\"Interactive carousel\"\n        aria-roledescription=\"carousel\"\n        className={cn(styles.carousel, className)}\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </section>\n    </CarouselContext.Provider>\n  );\n}\n\n/**\n * Props for the Carousel Viewport component.\n */\nexport type CarouselViewportProps = React.ComponentProps<\"div\">;\n\n/**\n * Viewport component that contains the scrollable area for carousel items.\n * Handles scroll events and applies fade effects at the edges.\n *\n * @example\n * ```tsx\n * <Carousel.Viewport>\n *   <Carousel.Content>\n *     ...items\n *   </Carousel.Content>\n * </Carousel.Viewport>\n * ```\n */\nexport function Viewport({\n  className,\n  children,\n  ...props\n}: CarouselViewportProps) {\n  const {\n    viewportRef,\n    showLeftFade,\n    showRightFade,\n    setScrollLeft,\n    setMaxScrollLeft,\n    setCurrentIndex,\n    itemsPerView,\n    totalItems,\n    gap,\n    isScrollingRef,\n  } = useCarousel();\n\n  useEffect(() => {\n    const viewport = viewportRef.current;\n    if (!viewport) {\n      return;\n    }\n\n    const updateScrollInfo = () => {\n      const newScrollLeft = viewport.scrollLeft;\n      const newMaxScrollLeft = viewport.scrollWidth - viewport.clientWidth;\n\n      setScrollLeft(newScrollLeft);\n      setMaxScrollLeft(newMaxScrollLeft);\n\n      if (!isScrollingRef.current) {\n        const containerWidth = viewport.clientWidth;\n        const calculatedItemWidth =\n          (containerWidth - gap * (itemsPerView - 1)) / itemsPerView;\n        const itemWithGap = calculatedItemWidth + gap;\n\n        const adjustedScrollLeft =\n          newScrollLeft + calculatedItemWidth * PREVIOUS_ITEM_OFFSET_PERCENTAGE;\n        const newIndex = Math.round(adjustedScrollLeft / itemWithGap);\n        setCurrentIndex(Math.max(0, Math.min(newIndex, totalItems - 1)));\n      }\n    };\n\n    updateScrollInfo();\n\n    viewport.addEventListener(\"scroll\", updateScrollInfo, { passive: true });\n    window.addEventListener(\"resize\", updateScrollInfo);\n\n    return () => {\n      viewport.removeEventListener(\"scroll\", updateScrollInfo);\n      window.removeEventListener(\"resize\", updateScrollInfo);\n    };\n  }, [\n    itemsPerView,\n    totalItems,\n    gap,\n    setScrollLeft,\n    setMaxScrollLeft,\n    setCurrentIndex,\n    viewportRef,\n    isScrollingRef,\n  ]);\n\n  return (\n    <div\n      aria-atomic=\"false\"\n      aria-live=\"polite\"\n      className={cn(\n        styles.viewport,\n        showLeftFade && styles.showLeftFade,\n        showRightFade && styles.showRightFade,\n        className\n      )}\n      ref={viewportRef}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n/**\n * Props for the Carousel Content component.\n */\nexport type CarouselContentProps = React.ComponentProps<\"div\">;\n\n/**\n * Content component that wraps all carousel items.\n * Provides the flex container for horizontal layout.\n *\n * @example\n * ```tsx\n * <Carousel.Content>\n *   <Carousel.Item index={0}>Item 1</Carousel.Item>\n *   <Carousel.Item index={1}>Item 2</Carousel.Item>\n * </Carousel.Content>\n * ```\n */\nexport function Content({\n  className,\n  children,\n  ...props\n}: CarouselContentProps) {\n  const { containerRef, gap } = useCarousel();\n\n  return (\n    <div\n      className={cn(styles.container, className)}\n      id=\"carousel-slides\"\n      ref={containerRef}\n      style={{\n        gap: `${gap}px`,\n      }}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n/**\n * Props for the Carousel Item component.\n */\nexport type CarouselItemProps = React.ComponentProps<\"fieldset\"> & {\n  /** The index of the item in the carousel (required). */\n  index: number;\n};\n\n/**\n * Item component that represents a single carousel slide.\n * Automatically registers itself with the carousel context.\n *\n * @example\n * ```tsx\n * <Carousel.Item index={0}>\n *   <Card>Item content</Card>\n * </Carousel.Item>\n * ```\n */\nexport function Item({\n  index,\n  className,\n  children,\n  ...props\n}: CarouselItemProps) {\n  const { currentIndex, itemsPerView, totalItems, itemWidth, registerItem } =\n    useCarousel();\n\n  useEffect(() => {\n    registerItem();\n  }, [registerItem]);\n\n  const isVisible =\n    index >= Math.max(0, currentIndex - 1) &&\n    index < currentIndex + Math.ceil(itemsPerView);\n\n  return (\n    <fieldset\n      aria-hidden={!isVisible}\n      aria-label={`${index + 1} of ${totalItems}`}\n      aria-roledescription=\"slide\"\n      className={cn(styles.slide, className)}\n      inert={isVisible ? undefined : true}\n      style={{\n        width: itemWidth,\n        minWidth: itemWidth,\n        visibility: isVisible ? \"visible\" : \"hidden\",\n        border: \"none\",\n        padding: 0,\n        margin: 0,\n      }}\n      {...props}\n    >\n      {children}\n    </fieldset>\n  );\n}\n\n/**\n * Props for the Carousel Previous button component.\n */\nexport type CarouselPreviousProps = React.ComponentProps<\"button\">;\n\n/**\n * Previous button component for navigating to the previous carousel slide.\n * Automatically disabled when at the beginning of the carousel.\n *\n * @example\n * ```tsx\n * <Carousel.Previous>\n *   <ChevronLeft />\n * </Carousel.Previous>\n * ```\n */\nexport function Previous({\n  className,\n  children,\n  ...props\n}: CarouselPreviousProps) {\n  const { prevSlide, canGoPrev } = useCarousel();\n\n  return (\n    <button\n      aria-controls=\"carousel-slides\"\n      aria-label=\"Scroll to previous items\"\n      className={cn(styles.navButton, styles.prevButton, className)}\n      disabled={!canGoPrev}\n      onClick={prevSlide}\n      type=\"button\"\n      {...props}\n    >\n      {children || (\n        <svg\n          aria-hidden=\"true\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m15 18-6-6 6-6\" />\n        </svg>\n      )}\n    </button>\n  );\n}\n\n/**\n * Props for the Carousel Next button component.\n */\nexport type CarouselNextProps = React.ComponentProps<\"button\">;\n\n/**\n * Next button component for navigating to the next carousel slide.\n * Automatically disabled when at the end of the carousel.\n *\n * @example\n * ```tsx\n * <Carousel.Next>\n *   <ChevronRight />\n * </Carousel.Next>\n * ```\n */\nexport function Next({ className, children, ...props }: CarouselNextProps) {\n  const { nextSlide, canGoNext } = useCarousel();\n\n  return (\n    <button\n      aria-controls=\"carousel-slides\"\n      aria-label=\"Scroll to next items\"\n      className={cn(styles.navButton, styles.nextButton, className)}\n      disabled={!canGoNext}\n      onClick={nextSlide}\n      type=\"button\"\n      {...props}\n    >\n      {children || (\n        <svg\n          aria-hidden=\"true\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m9 18 6-6-6-6\" />\n        </svg>\n      )}\n    </button>\n  );\n}\n\n/**\n * Props for the Carousel Navigation component.\n */\nexport type CarouselNavigationProps = React.ComponentProps<\"div\">;\n\n/**\n * Navigation component that wraps Previous and Next buttons.\n * Renders default buttons if no children are provided.\n * Automatically hidden when there is only one item.\n *\n * @example\n * ```tsx\n * // Default navigation\n * <Carousel.Navigation />\n *\n * // Custom navigation\n * <Carousel.Navigation>\n *   <Carousel.Previous>Prev</Carousel.Previous>\n *   <Carousel.Next>Next</Carousel.Next>\n * </Carousel.Navigation>\n * ```\n */\nexport function Navigation({\n  className,\n  children,\n  ...props\n}: CarouselNavigationProps) {\n  const { totalItems } = useCarousel();\n\n  if (totalItems <= 1) {\n    return null;\n  }\n\n  return (\n    <div className={cn(styles.navContainer, className)} {...props}>\n      {children || (\n        <>\n          <Previous />\n          <Next />\n        </>\n      )}\n    </div>\n  );\n}\n\n/**\n * Props for the Carousel Indicators component.\n */\nexport type CarouselIndicatorsProps = React.ComponentProps<\"div\">;\n\n/**\n * Indicators component that displays dot indicators for each carousel item.\n * Automatically hidden when there is only one item.\n *\n * @example\n * ```tsx\n * <Carousel.Indicators />\n * ```\n */\nexport function Indicators({ className, ...props }: CarouselIndicatorsProps) {\n  const { totalItems, currentIndex, goToIndex } = useCarousel();\n\n  if (totalItems <= 1) {\n    return null;\n  }\n\n  return (\n    <div\n      aria-label=\"Choose slide to display\"\n      className={cn(styles.indicators, className)}\n      role=\"tablist\"\n      {...props}\n    >\n      {Array.from({ length: totalItems }, (_, index) => (\n        <button\n          aria-controls=\"carousel-slides\"\n          aria-label={`Scroll to item ${index + 1}`}\n          aria-selected={currentIndex === index}\n          className={cn(\n            styles.indicator,\n            currentIndex === index && styles.indicatorActive\n          )}\n          // biome-ignore lint/suspicious/noArrayIndexKey: Indicators are stable and don't reorder\n          key={`indicator-${index}`}\n          onClick={() => goToIndex(index)}\n          role=\"tab\"\n          type=\"button\"\n        />\n      ))}\n    </div>\n  );\n}\n\n/**\n * Props for the Carousel SRInfo component.\n */\nexport type CarouselSRInfoProps = React.ComponentProps<\"div\">;\n\n/**\n * Screen reader information component that provides accessibility information.\n * Announces the current position and navigation instructions.\n *\n * @example\n * ```tsx\n * <Carousel.SRInfo />\n * ```\n */\nexport function SRInfo({ className, ...props }: CarouselSRInfoProps) {\n  const { currentIndex, itemsPerView, totalItems } = useCarousel();\n\n  return (\n    <div className={cn(styles.srOnly, className)} {...props}>\n      <div aria-atomic=\"true\" aria-live=\"polite\">\n        Showing items {currentIndex + 1} to{\" \"}\n        {Math.min(totalItems, currentIndex + Math.ceil(itemsPerView))} of{\" \"}\n        {totalItems}\n      </div>\n      <p>Use arrow keys or tab/shift+tab to navigate slides.</p>\n    </div>\n  );\n}\n\nfunction useKeyboardNavigation() {\n  const {\n    containerRef,\n    canGoNext,\n    canGoPrev,\n    prevSlide,\n    nextSlide,\n    goToIndex,\n    totalItems,\n    itemsPerView,\n  } = useCarousel();\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const isActiveInCarousel = containerRef.current?.contains(\n        document.activeElement\n      );\n      const isActiveOnCarouselContainer =\n        document.activeElement === containerRef.current?.parentElement;\n\n      if (!(isActiveInCarousel || isActiveOnCarouselContainer)) {\n        return;\n      }\n\n      switch (event.key) {\n        case \"ArrowLeft\":\n          if (canGoPrev) {\n            event.preventDefault();\n            prevSlide();\n          }\n          break;\n        case \"ArrowRight\":\n          if (canGoNext) {\n            event.preventDefault();\n            nextSlide();\n          }\n          break;\n        case \"Home\":\n          event.preventDefault();\n          goToIndex(0);\n          break;\n        case \"End\":\n          event.preventDefault();\n          goToIndex(Math.max(0, totalItems - Math.ceil(itemsPerView)));\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [\n    prevSlide,\n    nextSlide,\n    goToIndex,\n    canGoNext,\n    canGoPrev,\n    totalItems,\n    itemsPerView,\n    containerRef,\n  ]);\n}\n\n/**\n * KeyboardHandler component that enables keyboard navigation for the carousel.\n * Supports arrow keys, Home, and End keys.\n *\n * @example\n * ```tsx\n * <Carousel.KeyboardHandler />\n * ```\n */\nexport function KeyboardHandler() {\n  useKeyboardNavigation();\n  return null;\n}\n\n/**\n * Carousel component for displaying multiple items in a scrollable horizontal layout.\n *\n * A composable carousel component that provides full control over layout and behavior.\n * Use the subcomponents to build custom carousel layouts:\n * - `Carousel` - Root component (required)\n * - `Carousel.Viewport` - Scrollable viewport (required)\n * - `Carousel.Content` - Content wrapper (required)\n * - `Carousel.Item` - Individual carousel item (required)\n * - `Carousel.Navigation` - Navigation buttons container (optional)\n * - `Carousel.Previous` - Previous button (optional)\n * - `Carousel.Next` - Next button (optional)\n * - `Carousel.Indicators` - Dot indicators (optional)\n * - `Carousel.SRInfo` - Screen reader info (optional)\n * - `Carousel.KeyboardHandler` - Keyboard navigation support (optional)\n *\n * @example\n * ```tsx\n * import { Carousel } from \"@/components/ui/carousel\";\n *\n * <Carousel itemsPerView={3} gap={16}>\n *   <Carousel.Viewport>\n *     <Carousel.Content>\n *       {items.map((item, index) => (\n *         <Carousel.Item index={index} key={item.id}>\n *           <Card>{item.content}</Card>\n *         </Carousel.Item>\n *       ))}\n *     </Carousel.Content>\n *   </Carousel.Viewport>\n *   <Carousel.Navigation />\n *   <Carousel.KeyboardHandler />\n * </Carousel>\n * ```\n */\nconst CarouselNamespace = Object.assign(Root, {\n  Viewport,\n  Content,\n  Item,\n  Previous,\n  Next,\n  Navigation,\n  Indicators,\n  SRInfo,\n  KeyboardHandler,\n});\n\nexport { CarouselNamespace as Carousel };\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.tsx"
    },
    {
      "path": "registry/brook/ui/carousel/carousel.module.css",
      "content": ".carousel {\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  border-radius: 0.5rem;\n  overflow: visible;\n}\n\n.carousel:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.viewport {\n  position: relative;\n  width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  scroll-behavior: smooth;\n  scroll-snap-type: none;\n}\n\n.viewport::-webkit-scrollbar {\n  display: none;\n}\n\n.container {\n  display: flex;\n  align-items: stretch;\n  padding-left: 2rem;\n}\n\n.slide {\n  flex-shrink: 0;\n  position: relative;\n}\n\n.slide[aria-hidden=\"true\"] {\n  pointer-events: none;\n}\n\n.slide:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: -2px;\n}\n\n.slide > *:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.slide > *:focus:not(:focus-visible) {\n  outline: none;\n}\n\n.navContainer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n  margin-top: 1.5rem;\n  padding-right: 0;\n}\n\n.navButton {\n  position: relative;\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  border: 1px solid var(--border);\n  background: var(--card);\n  color: var(--foreground);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: var(--shadow-md);\n  transition: all 0.2s ease;\n  opacity: 0.9;\n}\n\n.navButton:hover {\n  opacity: 1;\n  background: var(--muted);\n  transform: scale(1.05);\n}\n\n.navButton:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.navButton:active {\n  transform: scale(0.95);\n}\n\n.navButton:disabled {\n  opacity: 0.3;\n  cursor: default;\n  background: var(--muted);\n  color: var(--muted-foreground);\n  pointer-events: none;\n}\n\n.navButton:disabled:hover {\n  opacity: 0.3;\n  transform: none;\n  background: var(--muted);\n}\n\n.navButton svg {\n  width: 1rem;\n  height: 1rem;\n}\n\n.indicators {\n  position: absolute;\n  bottom: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 0.5rem;\n  z-index: 10;\n}\n\n.indicator {\n  width: 0.75rem;\n  height: 0.75rem;\n  border-radius: 50%;\n  border: none;\n  background: rgba(255, 255, 255, 0.5);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.indicator:hover {\n  background: rgba(255, 255, 255, 0.7);\n  transform: scale(1.1);\n}\n\n.indicator:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.indicatorActive {\n  background: var(--primary);\n  transform: scale(1.2);\n}\n\n.indicatorActive:hover {\n  background: var(--primary);\n}\n\n.srOnly {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n@media (max-width: 768px) {\n  .carousel {\n    max-width: 100%;\n    border-radius: 0.25rem;\n  }\n\n  .viewport {\n    height: auto;\n  }\n\n  .container {\n    padding-left: 1.5rem;\n  }\n\n  .navContainer {\n    margin-top: 1rem;\n    padding-right: 1rem;\n  }\n\n  .navButton {\n    width: 2.25rem;\n    height: 2.25rem;\n  }\n\n  .navButton svg {\n    width: 1rem;\n    height: 1rem;\n  }\n\n  .indicators {\n    bottom: 0.75rem;\n  }\n\n  .indicator {\n    width: 0.625rem;\n    height: 0.625rem;\n  }\n}\n\n@media (max-width: 640px) {\n  .carousel {\n    border-radius: 0.25rem;\n  }\n\n  .container {\n    padding-left: 0.75rem;\n  }\n\n  .navContainer {\n    padding-right: 0.75rem;\n  }\n\n  .navButton {\n    width: 2rem;\n    height: 2rem;\n  }\n\n  .navButton svg {\n    width: 0.875rem;\n    height: 0.875rem;\n  }\n}\n\n[data-theme=\"dark\"] .indicator {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n[data-theme=\"dark\"] .indicator:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .container {\n    transition: none;\n  }\n\n  .navButton,\n  .indicator {\n    transition: none;\n  }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.module.css"
    }
  ]
}