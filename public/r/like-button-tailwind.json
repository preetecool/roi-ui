{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "like-button-tailwind",
  "type": "registry:item",
  "title": "Like Button (Tailwind)",
  "description": "A button component for liking content.",
  "files": [
    {
      "path": "registry/brook/tailwind/ui/like-button.tsx",
      "content": "\"use client\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/tw-utils\";\n\n// Constants for animation calculations\nconst DEGREES_TO_RADIANS = 180;\nconst ANGLE_OFFSET_BASE = 90;\nconst DELAY_DIVISOR = 1000;\nconst ROTATION_MULTIPLIER = 6;\nconst SCALE_BASE = 0.8;\nconst SCALE_DIVISOR = 30;\nconst PARTICLE_SIZE_STAR_LARGE = 12;\nconst PARTICLE_SIZE_STAR_MEDIUM = 10;\nconst PARTICLE_SIZE_CIRCLE_LARGE = 6;\nconst PARTICLE_SIZE_CIRCLE_MEDIUM = 5;\nconst PARTICLE_ANGLE_LEFT = -60;\nconst PARTICLE_ANGLE_CENTER = 0;\nconst PARTICLE_ANGLE_RIGHT = 60;\nconst PARTICLE_ANGLE_LEFT_SMALL = -30;\nconst PARTICLE_ANGLE_RIGHT_SMALL = 30;\nconst THUMB_ANIMATION_DURATION = 1200;\nconst PARTICLE_ANIMATION_DURATION = 1000;\nconst LIKE_STATE_DELAY = 100;\nconst AUTO_PLAY_INTERVAL = 3000;\nconst PARTICLE_RETURN_DELAY_OUTER = 0;\nconst PARTICLE_RETURN_DELAY_INNER = 0.05;\n\ntype Particle = {\n  id: number;\n  type: \"star\" | \"circle\";\n  angle: number;\n  distance: number;\n  delay: number;\n  returnDelay: number;\n  rotation: number;\n  size: number;\n  scale: number;\n  color: string;\n};\n\n/**\n * LikeButton component with animated thumbs-up and particle effects.\n * Features smooth animations and visual feedback when clicked.\n *\n * @param isPlaying - Auto-play the animation continuously (default: false)\n * @param onClick - Callback function when the button is clicked\n * @param className - Optional CSS class names\n * @param particleCount - Number of particles to generate (default: 6)\n * @param colors - Array of colors for particles (default: [\"var(--foreground)\"])\n * @param colorMode - How to apply colors: \"alternating\" or \"random\" (default: \"alternating\")\n *\n * @example\n * ```tsx\n * <LikeButton onClick={() => console.log('Liked!')} />\n *\n * // Auto-playing version\n * <LikeButton isPlaying={true} />\n *\n * // Custom particles with colors\n * <LikeButton\n *   particleCount={10}\n *   colors={[\"#ff0000\", \"#00ff00\", \"#0000ff\"]}\n *   colorMode=\"random\"\n * />\n * ```\n */\nfunction LikeButton({\n  isPlaying = false,\n  onClick,\n  className,\n  particleCount = 6,\n  colors = [\"var(--foreground)\"],\n  colorMode = \"alternating\",\n}: {\n  isPlaying?: boolean;\n  onClick?: () => void;\n  className?: string;\n  particleCount?: number;\n  colors?: string[];\n  colorMode?: \"alternating\" | \"random\";\n}) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const [isThumbAnimating, setIsThumbAnimating] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const createParticle = useCallback(\n    (\n      angleOffset: number,\n      type: \"star\" | \"circle\",\n      size: number,\n      color: string\n    ): Particle => {\n      const baseAngle = -Math.PI / 2;\n      const angle = baseAngle + (angleOffset * Math.PI) / DEGREES_TO_RADIANS;\n\n      // Calculate return delay based on absolute angle (outside-in pattern)\n      // ±60° (outermost) → delay 0 (return first)\n      // ±30° (middle) → delay 0.05s (return second)\n      // 0° (center) → delay 0.05s (return last)\n      const absAngle = Math.abs(angleOffset);\n      let returnDelay = PARTICLE_RETURN_DELAY_OUTER;\n      if (absAngle === PARTICLE_ANGLE_CENTER) {\n        returnDelay = PARTICLE_RETURN_DELAY_INNER; // Center particles return last\n      } else if (absAngle === Math.abs(PARTICLE_ANGLE_LEFT_SMALL)) {\n        returnDelay = PARTICLE_RETURN_DELAY_INNER; // Mid particles return second\n      } else if (absAngle === Math.abs(PARTICLE_ANGLE_LEFT)) {\n        returnDelay = PARTICLE_RETURN_DELAY_OUTER; // Outer particles return first\n      }\n\n      return {\n        id: Date.now() + angleOffset + size + Math.random(),\n        type,\n        angle,\n        distance: 40,\n        delay: (angleOffset + ANGLE_OFFSET_BASE) / DELAY_DIVISOR,\n        returnDelay,\n        rotation: angleOffset * ROTATION_MULTIPLIER,\n        size,\n        scale: SCALE_BASE + size / SCALE_DIVISOR,\n        color,\n      };\n    },\n    []\n  );\n\n  const createParticleSet = useCallback((): Particle[] => {\n    const particles: Particle[] = [];\n    const angleSpread = 120; // Total spread in degrees (60 on each side)\n    const angleStep = particleCount > 1 ? angleSpread / (particleCount - 1) : 0;\n    const startAngle = -angleSpread / 2;\n\n    for (let i = 0; i < particleCount; i++) {\n      const angleOffset = startAngle + i * angleStep;\n      const type: \"star\" | \"circle\" = i % 2 === 0 ? \"star\" : \"circle\";\n      const size =\n        type === \"star\"\n          ? i % 3 === 0\n            ? PARTICLE_SIZE_STAR_LARGE\n            : PARTICLE_SIZE_STAR_MEDIUM\n          : i % 3 === 0\n            ? PARTICLE_SIZE_CIRCLE_LARGE\n            : PARTICLE_SIZE_CIRCLE_MEDIUM;\n\n      // Select color based on colorMode\n      let color: string;\n      if (colorMode === \"random\") {\n        color = colors[Math.floor(Math.random() * colors.length)];\n      } else {\n        // alternating\n        color = colors[i % colors.length];\n      }\n\n      particles.push(createParticle(angleOffset, type, size, color));\n    }\n\n    return particles;\n  }, [particleCount, colors, colorMode, createParticle]);\n\n  const startThumbAnimation = useCallback(() => {\n    setIsThumbAnimating(true);\n    setIsFilled(true);\n    setIsAnimating(true);\n    setTimeout(() => {\n      setIsThumbAnimating(false);\n      setIsFilled(false);\n      setIsAnimating(false);\n    }, THUMB_ANIMATION_DURATION);\n  }, []);\n\n  const startParticleAnimation = useCallback(() => {\n    setParticles(createParticleSet());\n    setTimeout(() => {\n      setParticles([]);\n    }, PARTICLE_ANIMATION_DURATION);\n  }, [createParticleSet]);\n\n  const handleClick = (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (isAnimating || isPlaying) {\n      return;\n    }\n\n    const newLikedState = !isLiked;\n\n    if (newLikedState) {\n      startThumbAnimation();\n      startParticleAnimation();\n      setTimeout(() => {\n        setIsLiked(true);\n      }, LIKE_STATE_DELAY);\n    } else {\n      setIsLiked(false);\n      setIsFilled(false);\n    }\n\n    onClick?.();\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (isAnimating) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      startThumbAnimation();\n      startParticleAnimation();\n\n      intervalRef.current = setInterval(() => {\n        startThumbAnimation();\n        startParticleAnimation();\n      }, AUTO_PLAY_INTERVAL);\n    } else if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isPlaying, startThumbAnimation, startParticleAnimation]);\n\n  return (\n    <div\n      className={cn(\n        \"box-border flex min-h-[200px] w-full flex-col items-center justify-center py-[30px]\",\n        \"[-webkit-overflow-scrolling:touch]\",\n        className\n      )}\n    >\n      <div className=\"relative flex w-full max-w-[240px] flex-col items-center justify-center overflow-visible px-5 py-5\">\n        <div className=\"pointer-events-none absolute inset-x-[-40px] inset-y-[-60px] z-[1] overflow-visible\">\n          {particles.map((particle) => (\n            <div\n              className={cn(\n                \"absolute top-1/2 left-1/2 will-change-[transform,opacity]\"\n              )}\n              key={particle.id}\n              style={\n                {\n                  \"--angle\": `${particle.angle}rad`,\n                  \"--distance\": `${particle.distance}px`,\n                  \"--delay\": `${particle.delay}s`,\n                  \"--return-delay\": `${particle.returnDelay}s`,\n                  \"--scale\": particle.scale,\n                  opacity: 0,\n                  transform: \"translate(-50%, -50%) scale(0)\",\n                  animation: `like-button-particle-out 0.5s ease-out var(--delay) forwards, like-button-particle-return 0.5s ease-out calc(0.65s + var(--return-delay)) forwards`,\n                } as React.CSSProperties\n              }\n            >\n              <div\n                className={cn(\n                  particle.type === \"star\"\n                    ? \"relative block before:absolute before:top-0 before:left-0 before:h-full before:w-full before:content-[''] before:[clip-path:polygon(50%_0%,100%_50%,50%_100%,0%_50%)] before:[background:var(--particle-color,var(--foreground))]\"\n                    : \"rounded-full\"\n                )}\n                style={\n                  {\n                    \"--rotation\": `${particle.rotation}deg`,\n                    \"--size\": `${particle.size}px`,\n                    \"--scale\": particle.scale,\n                    \"--particle-color\": particle.color,\n                    width: `${particle.size}px`,\n                    height: `${particle.size}px`,\n                    transform:\n                      particle.type === \"circle\"\n                        ? `scale(${particle.scale})`\n                        : `rotate(${particle.rotation}deg)`,\n                    backgroundColor: particle.type === \"circle\" ? particle.color : undefined,\n                  } as React.CSSProperties\n                }\n              />\n            </div>\n          ))}\n        </div>\n\n        <button\n          aria-label={isLiked ? \"Unlike\" : \"Like\"}\n          className={cn(\n            \"rounded-full p-4 transition-transform duration-[250ms] ease-[cubic-bezier(0.4,0,0.2,1)]\",\n            \"relative z-10 flex cursor-pointer items-center justify-center border-0 bg-transparent\",\n            \"touch-[manipulation] select-none [-webkit-touch-callout:none] [-webkit-user-select:none]\",\n            \"[-webkit-tap-highlight-color:transparent] [tap-highlight-color:transparent]\",\n            \"transform-[translateZ(0)] [-webkit-transform:translateZ(0)]\",\n            \"[-webkit-perspective:1000] [perspective:1000]\",\n            \"[-webkit-backface-visibility:hidden] [backface-visibility:hidden]\",\n            \"my-1 overflow-visible outline-none will-change-[transform,opacity]\",\n            \"hover:scale-105\",\n            \"focus:outline-none focus-visible:outline-2 focus-visible:outline-ring focus-visible:outline-offset-2\",\n            \"max-md:transform-[translate3d(0,0,0)] max-md:min-h-12 max-md:min-w-12 max-md:p-4 max-md:[-webkit-transform:translate3d(0,0,0)]\",\n            \"max-md:[-webkit-backface-visibility:hidden] max-md:[backface-visibility:hidden] max-md:[transform-origin:center]\",\n            \"max-md:[-webkit-transform-style:preserve-3d] max-md:[transform-style:preserve-3d]\"\n          )}\n          data-slot=\"like-button\"\n          disabled={isAnimating}\n          onClick={handleClick}\n          onTouchEnd={handleClick}\n          onTouchStart={handleTouchStart}\n          style={{\n            pointerEvents: isAnimating ? \"none\" : \"auto\",\n            visibility: \"visible\",\n            opacity: 1,\n            transform: \"translateZ(0)\",\n            WebkitTransform: \"translateZ(0)\",\n            animation: isThumbAnimating\n              ? \"like-button-thumb-tilt 1.15s cubic-bezier(0.455, 0.03, 0.515, 0.955)\"\n              : undefined,\n          }}\n          type=\"button\"\n        >\n          <svg\n            aria-label=\"Like\"\n            className={cn(\n              \"h-6 w-6 transition-all duration-[250ms] ease-[cubic-bezier(0.4,0,0.2,1)]\",\n              \"transform-[translateZ(0)] will-change-[transform,opacity] [-webkit-transform:translateZ(0)]\",\n              isPlaying && \"scale-110\",\n              \"max-md:[-webkit-backface-visibility:hidden] max-md:[backface-visibility:hidden] max-md:[transform-origin:center]\",\n              \"max-md:[-webkit-transform-style:preserve-3d] max-md:[transform-style:preserve-3d]\"\n            )}\n            height=\"24\"\n            role=\"img\"\n            style={{\n              visibility: \"visible\",\n              opacity: 1,\n            }}\n            viewBox=\"-1 -1 18 18\"\n            width=\"24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2 2 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a10 10 0 0 0-.443.05 9.4 9.4 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111z\"\n              style={{\n                fill: isFilled || isLiked ? \"var(--primary)\" : \"none\",\n                stroke: isFilled || isLiked ? \"none\" : \"var(--foreground)\",\n                strokeWidth: 1,\n                transition: \"fill 0.2s ease-out, stroke 0.2s ease-out\",\n              }}\n            />\n          </svg>\n        </button>\n      </div>\n\n      <style jsx>{`\n        @keyframes like-button-particle-out {\n          0% {\n            transform: translate(-50%, -50%) scale(0.5);\n            opacity: 0;\n          }\n          100% {\n            transform: translate(\n                calc(-50% + (cos(var(--angle)) * var(--distance))),\n                calc(-50% + (sin(var(--angle)) * var(--distance)))\n              )\n              scale(1);\n            opacity: 0.9;\n          }\n        }\n\n        @keyframes like-button-particle-return {\n          0% {\n            transform: translate(\n                calc(-50% + (cos(var(--angle)) * var(--distance))),\n                calc(-50% + (sin(var(--angle)) * var(--distance)))\n              )\n              scale(1);\n            opacity: 0.9;\n          }\n          50% {\n            transform: translate(\n                calc(-50% + (cos(var(--angle)) * var(--distance) * 0.1)),\n                calc(-50% + (sin(var(--angle)) * var(--distance) * 0.1))\n              )\n              scale(0.3);\n            opacity: 0.25;\n          }\n          100% {\n            transform: translate(-50%, -50%) scale(0);\n            opacity: 0;\n          }\n        }\n\n        @keyframes like-button-thumb-tilt {\n          0% {\n            transform: rotate(0deg) scale(1) translateZ(0);\n          }\n          50% {\n            transform: rotate(-30deg) scale(1.2) translateZ(0);\n          }\n          100% {\n            transform: rotate(0deg) scale(1) translateZ(0);\n          }\n        }\n\n        @-webkit-keyframes like-button-thumb-tilt {\n          0% {\n            -webkit-transform: rotate(0deg) scale(1) translateZ(0);\n          }\n          50% {\n            -webkit-transform: rotate(-30deg) scale(1.2) translateZ(0);\n          }\n          100% {\n            -webkit-transform: rotate(0deg) scale(1) translateZ(0);\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport { LikeButton };\n",
      "type": "registry:file",
      "target": "~/components/ui/like-button/like-button.tsx"
    }
  ]
}