{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pie-chart",
  "type": "registry:item",
  "title": "Pie Chart",
  "description": "Circular charts perfect for displaying proportional data and percentages.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nexport interface ChartTooltipProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string | number;\n  labelFormatter?: (value: any) => string;\n  valueFormatter?: (value: any, name?: string) => string;\n}\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n}: ChartTooltipProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  const formatLabel = (value: any) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: any, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === 'number') {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}>\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry: any, index: number) => (\n        <div key={index} style={{ fontSize: \"11px\", marginBottom: \"2px\" }}>\n          <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n          {entry.name || entry.dataKey}: {formatValue(entry.value, entry.name || entry.dataKey)}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/pie-chart.tsx",
      "content": "\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport { PieChart as RechartsePieChart, Pie, Cell, ResponsiveContainer, Tooltip } from \"recharts\";\nimport { motion } from \"motion/react\";\nimport ChartTooltip from \"./chart-tooltip\";\n\nexport interface PieChartData {\n  category: string;\n  value: number;\n  type: string;\n}\n\nexport interface PieChartProps {\n  data: PieChartData[];\n  innerRadius?: number;\n  outerRadius?: number;\n  showLabels?: boolean;\n  animate?: boolean;\n  interactive?: boolean;\n  colors?: string[];\n}\n\nfunction PieChart({\n  data,\n  innerRadius = 0,\n  outerRadius,\n  showLabels = true,\n  animate = true,\n  interactive = true,\n  colors,\n}: PieChartProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const defaultColors = [\"var(--chart1)\", \"var(--chart2)\", \"var(--accent)\", \"var(--warning)\", \"var(--destructive)\"];\n  const pieColors = colors || defaultColors;\n\n  const filteredData = selectedCategory ? data.filter((d) => d.category === selectedCategory) : data;\n\n  const total = useMemo(() => data.reduce((sum, d) => sum + d.value, 0), [data]);\n\n  const tooltipValueFormatter = (value: any, name?: string) => {\n    const percentage = ((value / total) * 100).toFixed(1);\n    return `${value.toLocaleString()} (${percentage}%)`;\n  };\n\n  const renderLabel = (entry: any) => {\n    if (!showLabels) return \"\";\n    const percent = ((entry.value / total) * 100).toFixed(1);\n    return `${percent}%`;\n  };\n\n  const handleClick = (data: any) => {\n    if (interactive && animate) {\n      setSelectedCategory(selectedCategory === data.category ? null : data.category);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"var(--card)\",\n        borderRadius: \"14px\",\n      }}\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RechartsePieChart>\n          <Pie\n            data={filteredData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={showLabels ? renderLabel : false}\n            outerRadius={outerRadius || 120}\n            innerRadius={innerRadius}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            animationBegin={animate ? 0 : undefined}\n            animationDuration={animate ? 800 : 0}\n            onClick={handleClick}\n          >\n            {filteredData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />\n            ))}\n          </Pie>\n          <Tooltip content={<ChartTooltip valueFormatter={tooltipValueFormatter} />} />\n        </RechartsePieChart>\n      </ResponsiveContainer>\n      {animate && interactive && (\n        <motion.div\n          style={{\n            position: \"absolute\",\n            bottom: \"16px\",\n            right: \"16px\",\n            color: \"var(--muted-foreground)\",\n            fontSize: \"11px\",\n            fontWeight: 300,\n            pointerEvents: \"none\",\n          }}\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 1.2 }}\n        >\n          Click segments to update\n        </motion.div>\n      )}\n    </div>\n  );\n}\n\nexport default PieChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/pie-chart.tsx"
    }
  ]
}