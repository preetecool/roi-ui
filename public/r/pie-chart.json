{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pie-chart",
  "type": "registry:item",
  "title": "Pie Chart",
  "description": "Circular charts perfect for displaying proportional data and percentages.",
  "dependencies": [
    "@visx/group",
    "@visx/shape",
    "@visx/scale",
    "@visx/tooltip",
    "@visx/event",
    "@visx/gradient",
    "@visx/responsive"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nimport { TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface ChartDataItem {\n  type: string;\n  [key: string]: unknown;\n}\n\nexport interface ChartTooltipProps<T extends ChartDataItem> {\n  tooltipData: T[];\n  tooltipLeft: number;\n  tooltipTop: number;\n  uniqueTypes: string[];\n  colors: string[];\n  getRD: (d: T) => number;\n  getDate: (d: T) => NumberValue | string;\n  dateFormatter?: (value: NumberValue | string) => string;\n}\n\nexport default function ChartTooltip<T extends ChartDataItem>({\n  tooltipData,\n  tooltipLeft,\n  tooltipTop,\n  uniqueTypes,\n  colors,\n  getRD,\n  getDate,\n  dateFormatter,\n}: ChartTooltipProps<T>) {\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n    transition: \"all 200ms linear\",\n  };\n\n  return (\n    <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n      <p style={{ marginBottom: \"6px\", fontSize: \"11px\", fontWeight: \"500\" }}>\n        {dateFormatter ? dateFormatter(getDate(tooltipData[0])) : String(getDate(tooltipData[0]))}\n      </p>\n      {tooltipData.map((d, i) => (\n        <div\n          key={i}\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"4px\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"4px\" }}>\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: colors[uniqueTypes.indexOf(d.type)],\n                borderRadius: \"50%\",\n              }}\n            />\n            <span style={{ fontSize: \"11px\", color: \"var(--muted-foreground)\" }}>\n              {d.type.charAt(0) + d.type.slice(1).toLowerCase()}\n            </span>\n          </div>\n          <span style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{getRD(d)}M</span>\n        </div>\n      ))}\n    </TooltipWithBounds>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/pie-chart.tsx",
      "content": "\"use client\";\n\nimport { useMemo, useCallback, useId, useState, useEffect } from \"react\";\nimport { Group } from \"@visx/group\";\nimport Pie, { ProvidedProps, PieArcDatum } from \"@visx/shape/lib/shapes/Pie\";\nimport { arc as d3Arc, DefaultArcObject, Arc } from \"d3-shape\";\nimport { scaleOrdinal } from \"@visx/scale\";\nimport { useTooltip, TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\nimport { localPoint } from \"@visx/event\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { motion, AnimatePresence, useMotionValue, useTransform, animate as frameAnimate } from \"motion/react\";\n\nexport interface PieChartData {\n  category: string;\n  value: number;\n  type: string;\n}\n\nexport interface Margin {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport interface PieChartProps {\n  data: PieChartData[];\n  width: number;\n  height: number;\n  margin?: Margin;\n  innerRadius?: number;\n  outerRadius?: number;\n  padAngle?: number;\n  cornerRadius?: number;\n  showLabels?: boolean;\n  animate?: boolean;\n  interactive?: boolean;\n}\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n  animate?: boolean;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum: (d: PieArcDatum<Datum>) => void;\n  onHoverDatum?: (d: PieArcDatum<Datum>, event: React.MouseEvent) => void;\n  onLeaveDatum?: () => void;\n  showLabels?: boolean;\n  total?: number;\n  delay?: number;\n  innerRadius: number;\n  outerRadius: number;\n  cornerRadius?: number;\n};\n\nfunction AnimatedPieSlice<Datum>({\n  arc,\n  path,\n  getKey,\n  getColor,\n  onClickDatum,\n  onHoverDatum,\n  onLeaveDatum,\n  showLabels,\n  total,\n  innerRadius,\n  outerRadius,\n  animate,\n}: {\n  arc: PieArcDatum<Datum>;\n  path: Arc<unknown, PieArcDatum<Datum>>;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum: (d: PieArcDatum<Datum>) => void;\n  onHoverDatum?: (d: PieArcDatum<Datum>, event: React.MouseEvent) => void;\n  onLeaveDatum?: () => void;\n  showLabels?: boolean;\n  total?: number;\n  innerRadius: number;\n  outerRadius: number;\n  animate?: boolean;\n}) {\n  const progress = useMotionValue(0);\n  const [centroidX, centroidY] = path.centroid(arc);\n  const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n  const key = getKey(arc);\n\n  const arcGenerator = d3Arc().innerRadius(innerRadius).outerRadius(outerRadius).cornerRadius(0).padAngle(0);\n\n  const animatedPath = useTransform(progress, (latest) => {\n    if (!animate) return arcGenerator(arc as unknown as DefaultArcObject) || \"\";\n\n    const sweepAngle = latest * (arc.endAngle - arc.startAngle);\n    const animatedArc = {\n      ...arc,\n      endAngle: arc.startAngle + sweepAngle,\n    };\n    return arcGenerator(animatedArc as unknown as DefaultArcObject) || \"\";\n  });\n\n  useEffect(() => {\n    if (animate) {\n      const controls = frameAnimate(progress, 1, {\n        duration: 1.2,\n        delay: 0.2,\n        ease: \"easeInOut\",\n      });\n      return controls.stop;\n    }\n  }, [progress, animate]);\n\n  return (\n    <motion.g key={key}>\n      <motion.path\n        fill={getColor(arc)}\n        stroke=\"none\"\n        onClick={() => onClickDatum(arc)}\n        onTouchStart={() => onClickDatum(arc)}\n        onMouseMove={(event) => onHoverDatum?.(arc, event)}\n        onMouseLeave={() => onLeaveDatum?.()}\n        style={{ cursor: \"pointer\" }}\n        d={animatedPath}\n      />\n      {showLabels && hasSpaceForLabel && (\n        <motion.text\n          fill=\"white\"\n          x={centroidX}\n          y={centroidY}\n          dy=\".33em\"\n          fontSize={9}\n          fontWeight=\"500\"\n          textAnchor=\"middle\"\n          style={{ pointerEvents: \"none\" }}\n          initial={animate ? { opacity: 0 } : undefined}\n          animate={{ opacity: 1 }}\n          transition={{\n            duration: 0.4,\n            delay: animate ? 1.0 : 0,\n            ease: \"easeOut\",\n          }}\n        >\n          {total ? `${(((arc.data as PieChartData).value / total) * 100).toFixed(1)}%` : key}\n        </motion.text>\n      )}\n    </motion.g>\n  );\n}\n\nfunction AnimatedPie<Datum>({\n  animate,\n  arcs,\n  path,\n  getKey,\n  getColor,\n  onClickDatum,\n  onHoverDatum,\n  onLeaveDatum,\n  showLabels = true,\n  total,\n  innerRadius,\n  outerRadius,\n}: AnimatedPieProps<Datum>) {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {arcs.map((arc) => (\n        <AnimatedPieSlice\n          key={getKey(arc)}\n          arc={arc}\n          path={path}\n          getKey={getKey}\n          getColor={getColor}\n          onClickDatum={onClickDatum}\n          onHoverDatum={onHoverDatum}\n          onLeaveDatum={onLeaveDatum}\n          showLabels={showLabels}\n          total={total}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius}\n          animate={animate}\n        />\n      ))}\n    </AnimatePresence>\n  );\n}\n\nfunction PieChart({\n  data,\n  width,\n  height,\n  margin = { top: 20, right: 20, bottom: 20, left: 20 },\n  innerRadius = 0,\n  outerRadius,\n  padAngle = 0,\n  cornerRadius = 0,\n  showLabels = true,\n  animate = true,\n  interactive = true,\n}: PieChartProps) {\n  const { tooltipData, tooltipLeft = 0, tooltipTop = 0, showTooltip, hideTooltip } = useTooltip<PieChartData>();\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const gradientId = useId();\n\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const radius = outerRadius || Math.min(centerX, centerY) - Math.max(margin.left, margin.right);\n\n  const colors = [\"var(--chart1)\", \"var(--chart2)\", \"var(--accent)\", \"var(--warning)\", \"var(--destructive)\"];\n\n  const colorScale = scaleOrdinal({\n    domain: data.map((d) => d.category),\n    range: colors,\n  });\n\n  const getValue = (d: PieChartData) => d.value;\n\n  const filteredData = selectedCategory ? data.filter((d) => d.category === selectedCategory) : data;\n\n  const total = useMemo(() => data.reduce((sum, d) => sum + getValue(d), 0), [data]);\n\n  const handleTooltip = useCallback(\n    (event: React.MouseEvent, datum: PieChartData) => {\n      const { x, y } = localPoint(event) || { x: 0, y: 0 };\n      showTooltip({\n        tooltipData: datum,\n        tooltipLeft: x,\n        tooltipTop: y,\n      });\n    },\n    [showTooltip],\n  );\n\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n  };\n\n  if (width < 10) return null;\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg width={width} height={height} shapeRendering=\"crispEdges\">\n        <rect x={0} y={0} width={width} height={height} fill=\"var(--card)\" rx={14} />\n        <defs>\n          <LinearGradient id={gradientId} from=\"var(--chart1)\" to=\"var(--chart2)\" fromOpacity={0.8} toOpacity={0.6} />\n        </defs>\n        <Group left={centerX} top={centerY}>\n          <Pie\n            data={filteredData}\n            pieValue={getValue}\n            outerRadius={radius}\n            innerRadius={innerRadius}\n            cornerRadius={cornerRadius}\n            padAngle={padAngle}\n          >\n            {(pie) => (\n              <AnimatedPie<PieChartData>\n                {...pie}\n                animate={animate}\n                getKey={(arc) => arc.data.category}\n                onClickDatum={({ data: { category } }) =>\n                  animate &&\n                  interactive &&\n                  setSelectedCategory(selectedCategory && selectedCategory === category ? null : category)\n                }\n                onHoverDatum={(arc, event) => handleTooltip(event, arc.data)}\n                onLeaveDatum={() => hideTooltip()}\n                getColor={(arc) => colorScale(arc.data.category)}\n                showLabels={showLabels}\n                total={total}\n                innerRadius={innerRadius}\n                outerRadius={radius}\n                cornerRadius={cornerRadius}\n              />\n            )}\n          </Pie>\n        </Group>\n        {animate && interactive && (\n          <motion.text\n            textAnchor=\"end\"\n            x={width - 16}\n            y={height - 16}\n            fill=\"var(--muted-foreground)\"\n            fontSize={11}\n            fontWeight={300}\n            style={{ pointerEvents: \"none\" }}\n            initial={{ opacity: 0, y: height - 6 }}\n            animate={{ opacity: 1, y: height - 16 }}\n            transition={{ duration: 0.5, delay: 1.2 }}\n          >\n            Click segments to update\n          </motion.text>\n        )}\n      </svg>\n      {tooltipData ? (\n        <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n          <div style={{ textAlign: \"center\" }}>\n            <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"2px\" }}>{tooltipData.category}</div>\n            <div style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{tooltipData.value.toLocaleString()}</div>\n            <div style={{ fontSize: \"10px\", color: \"var(--muted-foreground)\", marginTop: \"2px\" }}>\n              {((tooltipData.value / total) * 100).toFixed(1)}%\n            </div>\n          </div>\n        </TooltipWithBounds>\n      ) : null}\n    </div>\n  );\n}\n\nexport default PieChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/pie-chart.tsx"
    }
  ]
}