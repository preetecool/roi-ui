{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pie-chart",
  "type": "registry:item",
  "title": "Pie Chart",
  "description": "Circular charts perfect for displaying proportional data and percentages.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nexport interface ChartTooltipProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string | number;\n  labelFormatter?: (value: any) => string;\n  valueFormatter?: (value: any, name?: string) => string;\n}\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n}: ChartTooltipProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  const formatLabel = (value: any) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: any, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === 'number') {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}>\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry: any, index: number) => (\n        <div key={index} style={{ \n          fontSize: \"11px\", \n          marginBottom: \"2px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          gap: \"12px\"\n        }}>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>\n              {entry.name || entry.dataKey}\n            </span>\n          </div>\n          <span style={{ \n            fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\", \n            fontWeight: \"500\" \n          }}>\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/pie-chart.tsx",
      "content": "\"use client\";\n\nimport { useMemo } from \"react\";\nimport { PieChart as RechartsePieChart, Pie, Cell, ResponsiveContainer, Tooltip } from \"recharts\";\nimport ChartTooltip from \"./chart-tooltip\";\nimport styles from \"./pie-chart.module.css\";\n\nexport interface PieChartData {\n  category: string;\n  value: number;\n  type: string;\n}\n\nexport interface PieChartProps {\n  data: PieChartData[];\n  innerRadius?: number;\n  outerRadius?: number;\n  animate?: boolean;\n  interactive?: boolean;\n  colors?: string[];\n}\n\nfunction PieChart({\n  data,\n  innerRadius = 0,\n  outerRadius,\n  animate = true,\n\n  colors,\n}: PieChartProps) {\n  const defaultColors = [\"var(--chart1)\", \"var(--chart2)\", \"var(--accent)\", \"var(--warning)\", \"var(--destructive)\"];\n  const pieColors = colors || defaultColors;\n\n  const total = useMemo(() => data.reduce((sum, d) => sum + d.value, 0), [data]);\n\n  const dataWithColors = useMemo(\n    () =>\n      data.map((item, index) => ({\n        ...item,\n        fill: pieColors[index % pieColors.length],\n      })),\n    [data, pieColors],\n  );\n\n  const tooltipValueFormatter = (value: number) => {\n    const percentage = ((value / total) * 100).toFixed(1);\n    return `${percentage}%`;\n  };\n\n  interface PieTooltipPayload {\n    value: number;\n    payload: PieChartData & { fill: string };\n  }\n\n  const CustomTooltip = ({ active, payload }: { active?: boolean; payload?: PieTooltipPayload[] }) => {\n    if (!active || !payload || !payload.length) return null;\n\n    const data = payload[0];\n    return (\n      <ChartTooltip\n        active={active}\n        payload={[\n          {\n            ...data,\n            color: data.payload.fill,\n            name: data.payload.category,\n          },\n        ]}\n        valueFormatter={tooltipValueFormatter}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.pieChart}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RechartsePieChart>\n          <Pie\n            data={dataWithColors}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={false}\n            outerRadius={outerRadius || 120}\n            innerRadius={innerRadius}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            animationBegin={animate ? 0 : undefined}\n            animationDuration={animate ? 800 : 0}\n            stroke=\"none\"\n          >\n            {dataWithColors.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.fill} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n        </RechartsePieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default PieChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/pie-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/pie-chart.module.css",
      "content": ".pieChart {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.pieChart *:focus,\n.pieChart *:focus-visible {\n    outline: none !important;\n}",
      "type": "registry:file",
      "target": "~/components/ui/charts/pie-chart.module.css"
    }
  ]
}