{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart",
  "type": "registry:item",
  "title": "Area Chart",
  "description": "Area charts that fill the space below the line, perfect for showing volume and trends.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\ninterface PayloadEntry {\n  name?: string;\n  dataKey?: string;\n  value: number | string;\n  color?: string;\n}\n\nexport interface ChartTooltipProps {\n  active?: boolean;\n  payload?: PayloadEntry[];\n  label?: string | number;\n  labelFormatter?: (value: string | number) => string;\n  valueFormatter?: (value: number | string, name?: string) => string;\n  nameFormatter?: (name: string) => string;\n}\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n  nameFormatter,\n}: ChartTooltipProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  const formatLabel = (value: string | number) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: number | string, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === \"number\") {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  const formatName = (name: string) => {\n    if (nameFormatter) {\n      return nameFormatter(name);\n    }\n\n    return name.toLowerCase().replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}>{formatLabel(label)}</div>}\n      {payload.map((entry, index) => (\n        <div\n          key={index}\n          style={{\n            fontSize: \"11px\",\n            marginBottom: \"2px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>{formatName(entry.name || entry.dataKey || \"\")}</span>\n          </div>\n          <span\n            style={{\n              fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n              fontWeight: \"500\",\n            }}\n          >\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/area-chart.tsx",
      "content": "\"use client\";\n\nimport {\n  AreaChart as RechartsAreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Dot,\n} from \"recharts\";\nimport ChartTooltip from \"./chart-tooltip\";\nimport styles from \"./area-chart.module.css\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface AreaChartData {\n  year: number;\n  amount: number;\n  type: string;\n}\n\nexport type CurveType = \"linear\" | \"monotoneX\" | \"cardinal\" | \"basis\" | \"step\";\n\nexport interface AreaChartProps {\n  data: AreaChartData[];\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  showPoints?: boolean;\n  pointSize?: number;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  fillOpacity?: number;\n  animated?: boolean;\n}\n\nfunction AreaChart({\n  data,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = true,\n  showYGrid = true,\n  showPoints = false,\n  pointSize = 4,\n  xAxisFormatter,\n  fillOpacity = 0.3,\n  animated = false,\n}: AreaChartProps) {\n  const color = \"var(--chart1)\";\n\n  const formatDate = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return Math.round(Number(value)).toString();\n  };\n\n  const tooltipLabelFormatter = (value: NumberValue | string) => formatDate(value);\n\n  const tooltipValueFormatter = (value: number | string, name?: string) => {\n    const numValue = typeof value === \"number\" ? value : parseFloat(String(value));\n    return isNaN(numValue) ? String(value) : numValue.toLocaleString();\n  };\n\n  interface AreaTooltipPayload {\n    value: number;\n    payload: AreaChartData;\n  }\n\n  const CustomTooltip = ({\n    active,\n    payload,\n    label,\n  }: {\n    active?: boolean;\n    payload?: AreaTooltipPayload[];\n    label?: NumberValue | string;\n  }) => {\n    if (!active || !payload || !payload.length) return null;\n\n    const data = payload[0];\n\n    const actualLabel = data.payload\n      ? data.payload.year\n      : typeof label === \"object\" && label !== null\n        ? Number(label)\n        : label;\n\n    return (\n      <ChartTooltip\n        active={active}\n        payload={[\n          {\n            ...data,\n            name: \"Revenue\",\n            color: color,\n          },\n        ]}\n        label={actualLabel}\n        labelFormatter={tooltipLabelFormatter}\n        valueFormatter={tooltipValueFormatter}\n      />\n    );\n  };\n\n  interface AreaDotProps {\n    cx?: number;\n    cy?: number;\n    [key: string]: unknown;\n  }\n\n  const CustomDot = (props: AreaDotProps) => {\n    const { cx, cy } = props;\n    if (showPoints && cx !== undefined && cy !== undefined) {\n      return <Dot cx={cx} cy={cy} r={pointSize} fill={color} stroke=\"var(--background)\" strokeWidth={2} />;\n    }\n    return null;\n  };\n\n  return (\n    <div\n      className={styles.areaChart}\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RechartsAreaChart data={data} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\n          <defs>\n            <linearGradient id=\"colorArea\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor={color} stopOpacity={fillOpacity * 2} />\n              <stop offset=\"95%\" stopColor={color} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          {showXGrid ||\n            (showYGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" strokeOpacity={0.2} />)}\n          {showXAxis && (\n            <XAxis\n              dataKey=\"year\"\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              tickFormatter={formatDate}\n            />\n          )}\n          {showYAxis && (\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              width={30}\n            />\n          )}\n          <Tooltip\n            cursor={{ stroke: \"var(--secondary)\", strokeWidth: 1 }}\n            content={<CustomTooltip />}\n            allowEscapeViewBox={{ x: false, y: false }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"amount\"\n            stroke={color}\n            strokeWidth={3}\n            fillOpacity={1}\n            fill=\"url(#colorArea)\"\n            dot={showPoints ? <CustomDot /> : false}\n            animationDuration={animated ? 1000 : 0}\n            animationBegin={animated ? 0 : undefined}\n            connectNulls={false}\n          />\n        </RechartsAreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default AreaChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/area-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/area-chart.module.css",
      "content": ".areaChart {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.areaChart *:focus,\n.areaChart *:focus-visible {\n    outline: none !important;\n}\n\n.areaChart svg {\n    max-width: 100%;\n    max-height: 100%;\n}",
      "type": "registry:file",
      "target": "~/components/ui/charts/area-chart.module.css"
    }
  ]
}