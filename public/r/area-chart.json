{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart",
  "type": "registry:item",
  "title": "Area Chart",
  "description": "Area charts that fill the space below the line, perfect for showing volume and trends.",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\ntype PayloadEntry = {\n  name?: string;\n  dataKey?: string;\n  value: number | string;\n  color?: string;\n};\n\nexport type ChartTooltipProps = {\n  active?: boolean;\n  payload?: PayloadEntry[];\n  label?: string | number;\n  labelFormatter?: (value: string | number) => string;\n  valueFormatter?: (value: number | string, name?: string) => string;\n  nameFormatter?: (name: string) => string;\n};\n\nexport function ChartTooltip({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  valueFormatter,\n  nameFormatter,\n}: ChartTooltipProps) {\n  if (!(active && payload && payload.length)) {\n    return null;\n  }\n\n  const formatLabel = (value: string | number) => {\n    if (labelFormatter) {\n      return labelFormatter(value);\n    }\n    return String(value);\n  };\n\n  const formatValue = (value: number | string, name?: string) => {\n    if (valueFormatter) {\n      return valueFormatter(value, name);\n    }\n    if (typeof value === \"number\") {\n      return value.toLocaleString();\n    }\n    return String(value);\n  };\n\n  const formatName = (name: string) => {\n    if (nameFormatter) {\n      return nameFormatter(name);\n    }\n\n    return name.toLowerCase().replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"var(--muted)\",\n        color: \"var(--foreground)\",\n        borderRadius: \"var(--radius)\",\n        padding: \"8px\",\n        fontSize: \"12px\",\n        border: \"1px solid var(--border)\",\n        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n      }}\n    >\n      {label && (\n        <div\n          style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"4px\" }}\n        >\n          {formatLabel(label)}\n        </div>\n      )}\n      {payload.map((entry, index) => (\n        <div\n          key={`${entry.dataKey || entry.name || \"entry\"}-${index}`}\n          style={{\n            fontSize: \"11px\",\n            marginBottom: \"2px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <span style={{ color: entry.color, marginRight: \"4px\" }}>‚óè</span>\n            <span style={{ color: \"var(--muted-foreground)\" }}>\n              {formatName(entry.name || entry.dataKey || \"\")}\n            </span>\n          </div>\n          <span\n            style={{\n              fontFamily:\n                \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n              fontWeight: \"500\",\n            }}\n          >\n            {formatValue(entry.value, entry.name || entry.dataKey)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTooltip;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/area-chart.tsx",
      "content": "\"use client\";\n\nimport {\n  Area,\n  CartesianGrid,\n  Dot,\n  AreaChart as RechartsAreaChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport styles from \"./area-chart.module.css\";\nimport ChartTooltip from \"./chart-tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport type AreaChartData = {\n  year: number;\n  amount: number;\n  type: string;\n};\n\nexport type CurveType = \"linear\" | \"monotoneX\" | \"cardinal\" | \"basis\" | \"step\";\n\nexport type AreaChartProps = {\n  data: AreaChartData[];\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  showPoints?: boolean;\n  pointSize?: number;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  fillOpacity?: number;\n  animated?: boolean;\n};\n\nconst ANIMATION_DURATION_MS = 1000;\n\ntype AreaTooltipPayload = {\n  value: number;\n  payload: AreaChartData;\n};\n\ntype AreaTooltipProps = {\n  active?: boolean;\n  payload?: AreaTooltipPayload[];\n  label?: NumberValue | string;\n  tooltipLabelFormatter: (value: NumberValue | string) => string;\n  tooltipValueFormatter: (value: number | string, name?: string) => string;\n  color: string;\n};\n\nfunction CustomTooltip({\n  active,\n  payload,\n  label,\n  tooltipLabelFormatter,\n  tooltipValueFormatter,\n  color,\n}: AreaTooltipProps) {\n  if (!(active && payload && payload.length)) {\n    return null;\n  }\n\n  const tooltipData = payload[0];\n\n  function getActualLabel(\n    data: AreaTooltipPayload,\n    labelValue?: NumberValue | string\n  ): number | string | undefined {\n    if (data.payload) {\n      return data.payload.year;\n    }\n    if (typeof labelValue === \"object\" && labelValue !== null) {\n      return Number(labelValue);\n    }\n    return labelValue;\n  }\n\n  const actualLabel = getActualLabel(tooltipData, label);\n\n  return (\n    <ChartTooltip\n      active={active}\n      label={actualLabel}\n      labelFormatter={tooltipLabelFormatter}\n      payload={[\n        {\n          ...tooltipData,\n          name: \"Revenue\",\n          color,\n        },\n      ]}\n      valueFormatter={tooltipValueFormatter}\n    />\n  );\n}\n\ntype AreaDotProps = {\n  cx?: number;\n  cy?: number;\n  showPoints: boolean;\n  pointSize: number;\n  color: string;\n  [key: string]: unknown;\n};\n\nfunction CustomDot({ cx, cy, showPoints, pointSize, color }: AreaDotProps) {\n  if (showPoints && cx !== undefined && cy !== undefined) {\n    return (\n      <Dot\n        cx={cx}\n        cy={cy}\n        fill={color}\n        r={pointSize}\n        stroke=\"var(--background)\"\n        strokeWidth={2}\n      />\n    );\n  }\n  return null;\n}\n\nfunction AreaChart({\n  data,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = true,\n  showYGrid = true,\n  showPoints = false,\n  pointSize = 4,\n  xAxisFormatter,\n  fillOpacity = 0.3,\n  animated = false,\n}: AreaChartProps) {\n  const color = \"var(--chart1)\";\n\n  const formatDate = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return Math.round(Number(value)).toString();\n  };\n\n  const tooltipLabelFormatter = (value: NumberValue | string) =>\n    formatDate(value);\n\n  const tooltipValueFormatter = (value: number | string, _name?: string) => {\n    const numValue =\n      typeof value === \"number\" ? value : Number.parseFloat(String(value));\n    return Number.isNaN(numValue) ? String(value) : numValue.toLocaleString();\n  };\n\n  return (\n    <div\n      className={styles.areaChart}\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <ResponsiveContainer height=\"100%\" width=\"100%\">\n        <RechartsAreaChart\n          data={data}\n          margin={{ top: 5, right: 5, left: 5, bottom: 5 }}\n        >\n          <defs>\n            <linearGradient id=\"colorArea\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n              <stop\n                offset=\"5%\"\n                stopColor={color}\n                stopOpacity={fillOpacity * 2}\n              />\n              <stop offset=\"95%\" stopColor={color} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          {showXGrid ||\n            (showYGrid && (\n              <CartesianGrid\n                stroke=\"var(--border)\"\n                strokeDasharray=\"3 3\"\n                strokeOpacity={0.2}\n              />\n            ))}\n          {showXAxis && (\n            <XAxis\n              axisLine={false}\n              dataKey=\"year\"\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              tickFormatter={formatDate}\n              tickLine={false}\n            />\n          )}\n          {showYAxis && (\n            <YAxis\n              axisLine={false}\n              tick={{ fontSize: 11, fill: \"var(--muted-foreground)\" }}\n              tickLine={false}\n              width={30}\n            />\n          )}\n          <Tooltip\n            allowEscapeViewBox={{ x: false, y: false }}\n            content={\n              <CustomTooltip\n                color={color}\n                tooltipLabelFormatter={tooltipLabelFormatter}\n                tooltipValueFormatter={tooltipValueFormatter}\n              />\n            }\n            cursor={{ stroke: \"var(--secondary)\", strokeWidth: 1 }}\n          />\n          <Area\n            animationBegin={animated ? 0 : undefined}\n            animationDuration={animated ? ANIMATION_DURATION_MS : 0}\n            connectNulls={false}\n            dataKey=\"amount\"\n            dot={\n              showPoints ? (\n                <CustomDot\n                  color={color}\n                  pointSize={pointSize}\n                  showPoints={showPoints}\n                />\n              ) : (\n                false\n              )\n            }\n            fill=\"url(#colorArea)\"\n            fillOpacity={1}\n            stroke={color}\n            strokeWidth={3}\n            type=\"monotone\"\n          />\n        </RechartsAreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default AreaChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/area-chart.tsx"
    },
    {
      "path": "registry/brook/ui/charts/area-chart.module.css",
      "content": ".areaChart {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.areaChart *:focus,\n.areaChart *:focus-visible {\n  outline: none !important;\n}\n\n.areaChart svg {\n  max-width: 100%;\n  max-height: 100%;\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/area-chart.module.css"
    }
  ]
}