{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart",
  "type": "registry:item",
  "title": "Area Chart",
  "description": "Area charts that fill the space below the line, perfect for showing volume and trends.",
  "dependencies": [
    "@visx/group",
    "@visx/scale",
    "@visx/axis",
    "@visx/shape",
    "@visx/gradient",
    "@visx/grid",
    "@visx/tooltip",
    "@visx/event",
    "@visx/glyph",
    "@visx/curve",
    "d3-array",
    "@visx/responsive"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nimport { TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface ChartDataItem {\n  type: string;\n  [key: string]: unknown;\n}\n\nexport interface ChartTooltipProps<T extends ChartDataItem> {\n  tooltipData: T[];\n  tooltipLeft: number;\n  tooltipTop: number;\n  uniqueTypes: string[];\n  colors: string[];\n  getRD: (d: T) => number;\n  getDate: (d: T) => NumberValue | string;\n  dateFormatter?: (value: NumberValue | string) => string;\n}\n\nexport default function ChartTooltip<T extends ChartDataItem>({\n  tooltipData,\n  tooltipLeft,\n  tooltipTop,\n  uniqueTypes,\n  colors,\n  getRD,\n  getDate,\n  dateFormatter,\n}: ChartTooltipProps<T>) {\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n    transition: \"all 200ms linear\",\n  };\n\n  return (\n    <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n      <p style={{ marginBottom: \"6px\", fontSize: \"11px\", fontWeight: \"500\" }}>\n        {dateFormatter ? dateFormatter(getDate(tooltipData[0])) : String(getDate(tooltipData[0]))}\n      </p>\n      {tooltipData.map((d, i) => (\n        <div\n          key={i}\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"4px\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"4px\" }}>\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: colors[uniqueTypes.indexOf(d.type)],\n                borderRadius: \"50%\",\n              }}\n            />\n            <span style={{ fontSize: \"11px\", color: \"var(--muted-foreground)\" }}>\n              {d.type.charAt(0) + d.type.slice(1).toLowerCase()}\n            </span>\n          </div>\n          <span style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{getRD(d)}M</span>\n        </div>\n      ))}\n    </TooltipWithBounds>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/area-chart.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useId, Fragment } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { scaleLinear } from \"@visx/scale\";\nimport { AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { AreaClosed, LinePath } from \"@visx/shape\";\nimport { extent } from \"d3-array\";\n\ntype NumberValue = number | { valueOf(): number };\nimport { line } from \"d3-shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { GridRows, GridColumns } from \"@visx/grid\";\nimport { useTooltip } from \"@visx/tooltip\";\nimport ChartTooltip, { ChartDataItem } from \"./chart-tooltip\";\nimport { localPoint } from \"@visx/event\";\nimport { GlyphCircle } from \"@visx/glyph\";\nimport { curveLinear, curveMonotoneX, curveCardinal, curveBasis, curveStep } from \"@visx/curve\";\nimport { motion } from \"motion/react\";\n\nexport interface AreaChartData extends ChartDataItem {\n  year: number;\n  amount: number;\n  type: string;\n}\n\nexport type CurveType = \"linear\" | \"monotoneX\" | \"cardinal\" | \"basis\" | \"step\";\n\nexport interface Margin {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport interface AreaChartProps {\n  data: AreaChartData[];\n  width: number;\n  height: number;\n  showXAxis?: boolean;\n  showYAxis?: boolean;\n  showXGrid?: boolean;\n  showYGrid?: boolean;\n  curve?: CurveType;\n  showPoints?: boolean;\n  pointSize?: number;\n  margin?: Margin;\n  xAxisFormatter?: (value: NumberValue | string) => string;\n  fillOpacity?: number;\n  animated?: boolean;\n}\n\nfunction AreaChart({\n  data,\n  width,\n  height,\n  showXAxis = true,\n  showYAxis = true,\n  showXGrid = true,\n  showYGrid = true,\n  curve = \"linear\",\n  showPoints = false,\n  pointSize = 4,\n  margin = { top: 40, right: 40, bottom: 40, left: 40 },\n  xAxisFormatter,\n  fillOpacity = 0.3,\n  animated = false,\n}: AreaChartProps) {\n  const { tooltipData, tooltipLeft = 0, tooltipTop = 0, showTooltip, hideTooltip } = useTooltip<AreaChartData>();\n  const gradientId = useId();\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  const color = \"var(--chart1)\";\n\n  const getCurveFunction = (curveType: CurveType) => {\n    switch (curveType) {\n      case \"monotoneX\":\n        return curveMonotoneX;\n      case \"cardinal\":\n        return curveCardinal;\n      case \"basis\":\n        return curveBasis;\n      case \"step\":\n        return curveStep;\n      case \"linear\":\n      default:\n        return curveLinear;\n    }\n  };\n\n  const getAmount = (d: AreaChartData) => d.amount;\n  const getDate = (d: AreaChartData) => d.year;\n\n  const formatDate = (value: NumberValue | string) => {\n    if (xAxisFormatter) {\n      return xAxisFormatter(value);\n    }\n    return Math.round(Number(value)).toString();\n  };\n\n  const timeScale = scaleLinear({\n    range: [0, innerWidth],\n    domain: extent(data, getDate) as [number, number],\n    nice: true,\n  });\n\n  const amountScale = scaleLinear({\n    range: [innerHeight, 0],\n    domain: [0, Math.max(...data.map(getAmount)) * 1.1],\n    nice: true,\n  });\n\n  const handleTooltip = useCallback(\n    (event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\n      const { x, y } = localPoint(event) || { x: 0, y: 0 };\n      const x0 = timeScale.invert(x - margin.left);\n\n      const distances = data.map((d, i) => ({\n        distance: Math.abs(getDate(d) - x0),\n        index: i,\n        data: d,\n      }));\n      \n      const closest = distances.reduce((min, curr) => \n        curr.distance < min.distance ? curr : min\n      );\n\n      showTooltip({\n        tooltipData: closest.data,\n        tooltipLeft: x,\n        tooltipTop: y,\n      });\n    },\n    [showTooltip, timeScale, margin.left, data],\n  );\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg width={width} height={height}>\n        <rect x={0} y={0} width={width} height={height} fill=\"var(--card)\" rx={14} />\n        <defs>\n          <LinearGradient id={gradientId} from={color} to={color} fromOpacity={fillOpacity} toOpacity={0} />\n        </defs>\n        <Group left={margin.left} top={margin.top}>\n          {showYGrid && (\n            <GridRows\n              scale={amountScale}\n              width={innerWidth}\n              height={innerHeight - margin.top}\n              stroke=\"var(--border)\"\n              strokeOpacity={0.2}\n            />\n          )}\n          {showXGrid && (\n            <GridColumns\n              scale={timeScale}\n              width={innerWidth}\n              height={innerHeight}\n              stroke=\"var(--border)\"\n              strokeOpacity={0.2}\n            />\n          )}\n          \n          {animated ? (\n            <motion.g\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{\n                duration: 1,\n                delay: 0.2,\n                ease: \"easeOut\",\n              }}\n            >\n              <AreaClosed\n                data={data}\n                x={(d) => timeScale(getDate(d)) ?? 0}\n                y={(d) => amountScale(getAmount(d)) ?? 0}\n                yScale={amountScale}\n                fill={`url(#${gradientId})`}\n                curve={getCurveFunction(curve)}\n              />\n            </motion.g>\n          ) : (\n            <AreaClosed\n              data={data}\n              x={(d) => timeScale(getDate(d)) ?? 0}\n              y={(d) => amountScale(getAmount(d)) ?? 0}\n              yScale={amountScale}\n              fill={`url(#${gradientId})`}\n              curve={getCurveFunction(curve)}\n            />\n          )}\n          \n          {animated ? (\n            <motion.g>\n              <motion.path\n                d={(() => {\n                  const pathGenerator = line<AreaChartData>()\n                    .x((d) => timeScale(getDate(d)) ?? 0)\n                    .y((d) => amountScale(getAmount(d)) ?? 0)\n                    .curve(getCurveFunction(curve));\n                  return pathGenerator(data) || \"\";\n                })()}\n                stroke={color}\n                strokeWidth={3}\n                fill=\"none\"\n                initial={{ strokeDasharray: \"1000 1000\", strokeDashoffset: 1000 }}\n                animate={{ strokeDashoffset: 0 }}\n                transition={{\n                  duration: 1.5,\n                  delay: 0,\n                  ease: \"easeOut\",\n                }}\n              />\n            </motion.g>\n          ) : (\n            <LinePath\n              data={data}\n              x={(d) => timeScale(getDate(d)) ?? 0}\n              y={(d) => amountScale(getAmount(d)) ?? 0}\n              stroke={color}\n              strokeWidth={3}\n              curve={getCurveFunction(curve)}\n            />\n          )}\n\n          {showYAxis && (\n            <AxisLeft\n              stroke=\"var(--border)\"\n              tickStroke=\"var(--border)\"\n              scale={amountScale}\n              numTicks={Math.min(10, innerHeight / 40)}\n              tickLabelProps={() => ({\n                fill: \"var(--muted-foreground)\",\n                fontSize: 11,\n                textAnchor: \"end\",\n              })}\n            />\n          )}\n          \n          {showXAxis && (\n            <AxisBottom\n              scale={timeScale}\n              stroke=\"var(--border)\"\n              tickStroke=\"var(--border)\"\n              top={innerHeight}\n              numTicks={Math.min(10, innerWidth / 80)}\n              tickFormat={formatDate}\n              tickLabelProps={() => ({\n                fill: \"var(--muted-foreground)\",\n                fontSize: 11,\n                textAnchor: \"middle\",\n              })}\n            />\n          )}\n\n          {showPoints &&\n            pointSize > 0 &&\n            data.map((d, i) => (\n              <Fragment key={i}>\n                {animated ? (\n                  <motion.g\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{\n                      duration: 0.4,\n                      delay: 1.2 + i * 0.05,\n                      ease: \"easeOut\",\n                    }}\n                  >\n                    <GlyphCircle\n                      left={timeScale(getDate(d)) ?? 0}\n                      top={amountScale(getAmount(d)) ?? 0}\n                      size={pointSize * pointSize * Math.PI}\n                      fill={color}\n                      stroke=\"var(--background)\"\n                      strokeWidth={2}\n                    />\n                  </motion.g>\n                ) : (\n                  <GlyphCircle\n                    left={timeScale(getDate(d)) ?? 0}\n                    top={amountScale(getAmount(d)) ?? 0}\n                    size={pointSize * pointSize * Math.PI}\n                    fill={color}\n                    stroke=\"var(--background)\"\n                    strokeWidth={2}\n                  />\n                )}\n              </Fragment>\n            ))}\n\n          {tooltipData && (\n            <GlyphCircle\n              left={timeScale(getDate(tooltipData)) ?? 0}\n              top={amountScale(getAmount(tooltipData)) ?? 0}\n              size={80}\n              fill={color}\n              stroke=\"var(--background)\"\n              strokeWidth={2}\n            />\n          )}\n\n          <rect\n            x={0}\n            y={0}\n            width={innerWidth}\n            height={innerHeight}\n            onTouchStart={handleTooltip}\n            fill=\"transparent\"\n            onTouchMove={handleTooltip}\n            onMouseMove={handleTooltip}\n            onMouseLeave={() => hideTooltip()}\n          />\n        </Group>\n      </svg>\n      {tooltipData ? (\n        <ChartTooltip\n          tooltipData={[tooltipData]}\n          tooltipLeft={tooltipLeft}\n          tooltipTop={tooltipTop}\n          uniqueTypes={[tooltipData.type]}\n          colors={[color]}\n          getRD={getAmount}\n          getDate={getDate}\n          dateFormatter={xAxisFormatter}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default AreaChart;",
      "type": "registry:file",
      "target": "~/components/ui/charts/area-chart.tsx"
    }
  ]
}