{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radial-bar-chart",
  "type": "registry:item",
  "title": "Radial Bar Chart",
  "description": "Circular progress-style charts for displaying progress and comparative metrics.",
  "dependencies": [
    "@visx/group",
    "@visx/shape",
    "@visx/scale",
    "@visx/text",
    "@visx/tooltip",
    "@visx/event",
    "@visx/gradient",
    "@visx/responsive"
  ],
  "files": [
    {
      "path": "registry/brook/ui/charts/chart-tooltip.tsx",
      "content": "\"use client\";\n\nimport { TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\n\ntype NumberValue = number | { valueOf(): number };\n\nexport interface ChartDataItem {\n  type: string;\n  [key: string]: unknown;\n}\n\nexport interface ChartTooltipProps<T extends ChartDataItem> {\n  tooltipData: T[];\n  tooltipLeft: number;\n  tooltipTop: number;\n  uniqueTypes: string[];\n  colors: string[];\n  getRD: (d: T) => number;\n  getDate: (d: T) => NumberValue | string;\n  dateFormatter?: (value: NumberValue | string) => string;\n}\n\nexport default function ChartTooltip<T extends ChartDataItem>({\n  tooltipData,\n  tooltipLeft,\n  tooltipTop,\n  uniqueTypes,\n  colors,\n  getRD,\n  getDate,\n  dateFormatter,\n}: ChartTooltipProps<T>) {\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n    transition: \"all 200ms linear\",\n  };\n\n  return (\n    <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n      <p style={{ marginBottom: \"6px\", fontSize: \"11px\", fontWeight: \"500\" }}>\n        {dateFormatter ? dateFormatter(getDate(tooltipData[0])) : String(getDate(tooltipData[0]))}\n      </p>\n      {tooltipData.map((d, i) => (\n        <div\n          key={i}\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"4px\",\n            gap: \"12px\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"4px\" }}>\n            <div\n              style={{\n                width: \"6px\",\n                height: \"6px\",\n                backgroundColor: colors[uniqueTypes.indexOf(d.type)],\n                borderRadius: \"50%\",\n              }}\n            />\n            <span style={{ fontSize: \"11px\", color: \"var(--muted-foreground)\" }}>\n              {d.type.charAt(0) + d.type.slice(1).toLowerCase()}\n            </span>\n          </div>\n          <span style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{getRD(d)}M</span>\n        </div>\n      ))}\n    </TooltipWithBounds>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/chart-tooltip.tsx"
    },
    {
      "path": "registry/brook/ui/charts/radial-bar-chart.tsx",
      "content": "\"use client\";\n\nimport { useMemo, useCallback, Fragment, useId, useState, useEffect } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { Arc } from \"@visx/shape\";\nimport { scaleLinear, scaleBand } from \"@visx/scale\";\nimport { Text } from \"@visx/text\";\nimport { useTooltip, TooltipWithBounds, defaultStyles } from \"@visx/tooltip\";\nimport { localPoint } from \"@visx/event\";\nimport { motion } from \"motion/react\";\nimport { LinearGradient } from \"@visx/gradient\";\n\nexport interface RadialBarChartData {\n  category: string;\n  value: number;\n}\n\nexport interface Margin {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport interface RadialBarChartProps {\n  data: RadialBarChartData[];\n  width: number;\n  height: number;\n  margin?: Margin;\n  innerRadius?: number;\n  outerRadius?: number;\n  cornerRadius?: number;\n  padAngle?: number;\n  paddingInner?: number;\n  showLabels?: boolean;\n  animated?: boolean;\n}\n\nfunction RadialBarChart({\n  data,\n  width,\n  height,\n  margin = { top: 20, right: 20, bottom: 20, left: 20 },\n  innerRadius,\n  outerRadius,\n  cornerRadius = 4,\n  padAngle = 0.02,\n  paddingInner = 0.1,\n  showLabels = true,\n  animated = false,\n}: RadialBarChartProps) {\n  const { tooltipData, tooltipLeft = 0, tooltipTop = 0, showTooltip, hideTooltip } = useTooltip<RadialBarChartData>();\n  const gradientId = useId();\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const maxRadius = Math.min(centerX, centerY) - Math.max(margin.left, margin.right);\n\n  const finalInnerRadius = innerRadius ?? maxRadius * 0.3;\n  const finalOuterRadius = outerRadius ?? maxRadius * 0.8;\n\n  const toDegrees = (x: number) => (x * 180) / Math.PI;\n\n  const angleScale = useMemo(() => {\n    return scaleBand<string>({\n      range: [0, 2 * Math.PI],\n      domain: data.map((d) => d.category),\n      paddingInner,\n    });\n  }, [data, paddingInner]);\n\n  const radiusScale = useMemo(() => {\n    return scaleLinear<number>({\n      range: [finalInnerRadius, finalOuterRadius],\n      domain: [0, Math.max(...data.map((d) => d.value))],\n    });\n  }, [data, finalInnerRadius, finalOuterRadius]);\n\n  const handleBarHover = useCallback(\n    (event: React.MouseEvent, datum: RadialBarChartData, index: number) => {\n      const { x, y } = localPoint(event) || { x: 0, y: 0 };\n      showTooltip({\n        tooltipData: datum,\n        tooltipLeft: x,\n        tooltipTop: y,\n      });\n      setHoveredIndex(index);\n    },\n    [showTooltip],\n  );\n\n  const handleBarLeave = useCallback(() => {\n    hideTooltip();\n    setHoveredIndex(null);\n  }, [hideTooltip]);\n\n  const tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 50,\n    backgroundColor: \"var(--background)\",\n    color: \"var(--foreground)\",\n    borderRadius: \"var(--radius)\",\n    padding: \"8px\",\n    fontSize: \"12px\",\n  };\n\n  if (!isClient) {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <svg width={width} height={height}>\n          <defs>\n            <LinearGradient id={gradientId} from=\"var(--chart1)\" to=\"var(--chart2)\" fromOpacity={0.8} toOpacity={0.1} />\n          </defs>\n          <Group left={centerX} top={centerY}>\n          </Group>\n        </svg>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg width={width} height={height}>\n        <defs>\n          <LinearGradient id={gradientId} from=\"var(--chart1)\" to=\"var(--chart2)\" fromOpacity={0.8} toOpacity={0.1} />\n        </defs>\n        <Group left={centerX} top={centerY}>\n          {data.map((d, i) => {\n            const startAngle = angleScale(d.category) ?? 0;\n            const midAngle = startAngle + angleScale.bandwidth() / 2;\n            const endAngle = startAngle + angleScale.bandwidth();\n\n            const targetOuterRadius = radiusScale(d.value) ?? 0;\n\n            const textOffset = 10;\n\n            const shouldFlip = (midAngle + Math.PI) % (2 * Math.PI) < Math.PI;\n            const textAnchor: \"start\" | \"end\" = shouldFlip ? \"end\" : \"start\";\n\n            const baseRotation = toDegrees(midAngle) - 90;\n            const additionalRotation = shouldFlip ? 180 : 0;\n            const totalRotation = baseRotation + additionalRotation;\n\n            const labelRadius = targetOuterRadius + textOffset;\n            const textX = labelRadius * Math.cos(midAngle - Math.PI / 2);\n            const textY = labelRadius * Math.sin(midAngle - Math.PI / 2);\n\n            const isHovered = hoveredIndex === i;\n\n            return (\n              <Fragment key={`radial-bar-${i}`}>\n                {animated ? (\n                  <motion.g\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{\n                      scale: isHovered ? 1.05 : 1,\n                      opacity: isHovered ? 1 : 0.8,\n                    }}\n                    whileHover={{\n                      scale: 1.05,\n                      opacity: 1,\n                    }}\n                    transition={{\n                      duration: 0.3,\n                      delay: i * 0.02,\n                      ease: \"easeOut\",\n                    }}\n                    style={{ transformOrigin: \"center\" }}\n                  >\n                    <Arc\n                      innerRadius={finalInnerRadius}\n                      outerRadius={targetOuterRadius}\n                      startAngle={startAngle}\n                      endAngle={endAngle}\n                      padAngle={padAngle}\n                      cornerRadius={cornerRadius}\n                      fill={`url(#${gradientId})`}\n                      onMouseMove={(event) => handleBarHover(event, d, i)}\n                      onMouseLeave={handleBarLeave}\n                      style={{ cursor: \"pointer\" }}\n                    />\n                  </motion.g>\n                ) : (\n                  <motion.g\n                    animate={{\n                      scale: isHovered ? 1.05 : 1,\n                      opacity: isHovered ? 1 : 0.8,\n                    }}\n                    whileHover={{\n                      scale: 1.05,\n                      opacity: 1,\n                    }}\n                    transition={{\n                      duration: 0.1,\n                      ease: \"easeOut\",\n                    }}\n                    style={{ transformOrigin: \"center\" }}\n                  >\n                    <Arc\n                      innerRadius={finalInnerRadius}\n                      outerRadius={targetOuterRadius}\n                      startAngle={startAngle}\n                      endAngle={endAngle}\n                      padAngle={padAngle}\n                      cornerRadius={cornerRadius}\n                      fill={`url(#${gradientId})`}\n                      onMouseMove={(event) => handleBarHover(event, d, i)}\n                      onMouseLeave={handleBarLeave}\n                      style={{ cursor: \"pointer\" }}\n                    />\n                  </motion.g>\n                )}\n                {showLabels &&\n                  (animated ? (\n                    <motion.g\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{\n                        duration: 0.2,\n                        delay: 0.2 + i * 0.03,\n                      }}\n                    >\n                      <Text\n                        x={textX}\n                        y={textY}\n                        dominantBaseline=\"middle\"\n                        textAnchor={textAnchor}\n                        fontSize={11}\n                        fontWeight=\"400\"\n                        fill=\"var(--foreground)\"\n                        angle={totalRotation}\n                      >\n                        {d.category}\n                      </Text>\n                    </motion.g>\n                  ) : (\n                    <Text\n                      x={textX}\n                      y={textY}\n                      dominantBaseline=\"middle\"\n                      textAnchor={textAnchor}\n                      fontSize={11}\n                      fontWeight=\"400\"\n                      fill=\"var(--foreground)\"\n                      angle={totalRotation}\n                    >\n                      {d.category}\n                    </Text>\n                  ))}\n              </Fragment>\n            );\n          })}\n        </Group>\n      </svg>\n\n      {tooltipData ? (\n        <TooltipWithBounds top={tooltipTop} left={tooltipLeft} style={tooltipStyles} offsetLeft={15} offsetTop={-10}>\n          <div style={{ textAlign: \"center\" }}>\n            <div style={{ fontSize: \"11px\", fontWeight: \"500\", marginBottom: \"2px\" }}>{tooltipData.category}</div>\n            <div style={{ fontSize: \"11px\", fontFamily: \"monospace\" }}>{tooltipData.value.toLocaleString()}</div>\n          </div>\n        </TooltipWithBounds>\n      ) : null}\n    </div>\n  );\n}\n\nexport default RadialBarChart;\n",
      "type": "registry:file",
      "target": "~/components/ui/charts/radial-bar-chart.tsx"
    }
  ]
}