{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autocomplete",
  "type": "registry:item",
  "title": "Autocomplete",
  "description": "An input that suggests options as you type.",
  "files": [
    {
      "path": "registry/brook/ui/autocomplete/autocomplete.tsx",
      "content": "\"use client\";\n\nimport { Autocomplete } from \"@base-ui-components/react/autocomplete\";\nimport { Search, X } from \"lucide-react\";\nimport type React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/registry/brook/ui/input/input\";\nimport styles from \"./autocomplete.module.css\";\n\nfunction AutocompleteRoot({\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Root>) {\n  return <Autocomplete.Root {...props} />;\n}\n\nfunction AutocompleteValue({\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Value>) {\n  return <Autocomplete.Value {...props} />;\n}\n\nfunction AutocompleteInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Input>) {\n  return (\n    <Autocomplete.Input\n      render={(props) => <Input {...props} className={cn(className)} />}\n      {...props}\n    />\n  );\n}\n\nfunction AutocompleteTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Trigger>) {\n  return (\n    <Autocomplete.Trigger className={cn(styles.trigger, className)} {...props}>\n      {children || <Search className={styles.icon} size={16} />}\n    </Autocomplete.Trigger>\n  );\n}\n\nfunction AutocompleteIcon({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Icon>) {\n  return (\n    <Autocomplete.Icon className={cn(styles.icon, className)} {...props}>\n      {children || <Search size={16} />}\n    </Autocomplete.Icon>\n  );\n}\n\nfunction AutocompleteClear({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Clear>) {\n  return (\n    <Autocomplete.Clear className={cn(styles.clear, className)} {...props}>\n      {children || <X size={16} />}\n    </Autocomplete.Clear>\n  );\n}\n\nconst AutocompletePortal = Autocomplete.Portal;\n\nfunction AutocompleteBackdrop({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Backdrop>) {\n  return (\n    <Autocomplete.Backdrop\n      className={cn(styles.backdrop, className)}\n      {...props}\n    />\n  );\n}\n\nfunction AutocompletePositioner({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Positioner>) {\n  return (\n    <Autocomplete.Positioner\n      className={cn(styles.positioner, className)}\n      sideOffset={4}\n      {...props}\n    />\n  );\n}\n\nfunction AutocompletePopup({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Popup>) {\n  return (\n    <Autocomplete.Popup className={cn(styles.popup, className)} {...props} />\n  );\n}\n\nfunction AutocompleteArrow({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Arrow>) {\n  return (\n    <Autocomplete.Arrow className={cn(styles.arrow, className)} {...props} />\n  );\n}\n\nfunction AutocompleteStatus({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Status>) {\n  return (\n    <Autocomplete.Status className={cn(styles.status, className)} {...props} />\n  );\n}\n\nfunction AutocompleteList({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.List>) {\n  return (\n    <Autocomplete.List className={cn(styles.list, className)} {...props} />\n  );\n}\n\nfunction AutocompleteEmpty({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Empty>) {\n  return (\n    <Autocomplete.Empty className={cn(styles.empty, className)} {...props}>\n      {children || \"No items found\"}\n    </Autocomplete.Empty>\n  );\n}\n\nfunction AutocompleteCollection({\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Collection>) {\n  return <Autocomplete.Collection {...props} />;\n}\n\nfunction AutocompleteRow({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Row>) {\n  return <Autocomplete.Row className={cn(styles.row, className)} {...props} />;\n}\n\nfunction AutocompleteItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Item>) {\n  return (\n    <Autocomplete.Item className={cn(styles.item, className)} {...props} />\n  );\n}\n\nfunction AutocompleteGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Group>) {\n  return (\n    <Autocomplete.Group className={cn(styles.group, className)} {...props} />\n  );\n}\n\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.GroupLabel>) {\n  return (\n    <Autocomplete.GroupLabel\n      className={cn(styles.groupLabel, className)}\n      {...props}\n    />\n  );\n}\n\nfunction AutocompleteSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Autocomplete.Separator>) {\n  return (\n    <Autocomplete.Separator\n      className={cn(styles.separator, className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  AutocompleteRoot as Autocomplete,\n  AutocompleteValue,\n  AutocompleteInput,\n  AutocompleteTrigger,\n  AutocompleteIcon,\n  AutocompleteClear,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteArrow,\n  AutocompleteStatus,\n  AutocompleteList,\n  AutocompleteEmpty,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteSeparator,\n};\n",
      "type": "registry:file",
      "target": "~/components/ui/autocomplete/autocomplete.tsx"
    },
    {
      "path": "registry/brook/ui/autocomplete/autocomplete.module.css",
      "content": ".trigger {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  color: var(--muted-foreground);\n  transition: color 150ms ease;\n\n  &:hover {\n    color: var(--foreground);\n  }\n\n  &:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n  }\n\n  &[data-disabled] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.icon {\n  height: 1rem;\n  width: 1rem;\n  flex-shrink: 0;\n  opacity: 0.6;\n}\n\n.clear {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.25rem;\n  border-radius: calc(var(--radius) - 2px);\n  cursor: pointer;\n  color: var(--muted-foreground);\n  transition: all 150ms ease;\n\n  &:hover {\n    color: var(--foreground);\n    background: var(--accent);\n  }\n\n  &:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n  }\n\n  &[data-disabled] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.backdrop {\n  position: fixed;\n  inset: 0;\n  z-index: 140;\n  background-color: var(--dialog-overlay);\n  opacity: 0;\n  transition: opacity 150ms ease;\n\n  &[data-open] {\n    opacity: 1;\n  }\n}\n\n.positioner {\n  position: absolute;\n  z-index: 150;\n  width: var(--anchor-width);\n  outline: none;\n}\n\n.popup {\n  box-sizing: border-box;\n  padding: 0.25rem;\n  border-radius: var(--radius);\n  margin-top: 1px;\n  background-color: var(--mix-card-75-bg);\n  color: var(--popover-foreground);\n  width: var(--anchor-width);\n  max-height: min(var(--available-height), 23rem);\n  max-width: var(--available-width);\n  overflow-y: auto;\n  scroll-padding-block: 0.5rem;\n  overscroll-behavior: contain;\n  border: 1px solid var(--border);\n  box-shadow:\n    0 10px 15px -3px rgb(0 0 0 / 0.1),\n    0 4px 6px -4px rgb(0 0 0 / 0.1);\n  transform-origin: var(--transform-origin);\n  animation: slideDownAndFade 150ms ease-out;\n\n  &[data-starting-style],\n  &[data-ending-style] {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n}\n\n@keyframes slideDownAndFade {\n  from {\n    opacity: 0;\n    transform: translateY(-0.5rem) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.arrow {\n  position: absolute;\n  width: 0.5rem;\n  height: 0.5rem;\n  background: var(--mix-card-33-bg);\n  border: 1px solid var(--border);\n  transform: rotate(45deg);\n}\n\n.arrow[data-side=\"top\"] {\n  bottom: -0.25rem;\n  border-right: none;\n  border-bottom: none;\n}\n\n.arrow[data-side=\"right\"] {\n  left: -0.25rem;\n  border-bottom: none;\n  border-left: none;\n}\n\n.arrow[data-side=\"bottom\"] {\n  top: -0.25rem;\n  border-top: none;\n  border-left: none;\n}\n\n.arrow[data-side=\"left\"] {\n  right: -0.25rem;\n  border-top: none;\n  border-right: none;\n}\n\n.status {\n  padding: 0.5rem 1rem;\n  font-size: 0.875rem;\n  color: var(--muted-foreground);\n}\n\n.list {\n  outline: none;\n}\n\n.empty {\n  box-sizing: border-box;\n  padding: 1rem;\n  font-size: 0.925rem;\n  color: var(--muted-foreground);\n  text-align: center;\n\n  &:empty {\n    margin: 0;\n    padding: 0;\n  }\n}\n\n.row {\n  display: flex;\n  align-items: center;\n}\n\n.item {\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 0.75rem;\n  font-size: 0.875rem;\n  cursor: pointer;\n  user-select: none;\n  outline: 0;\n  z-index: 0;\n\n  &[data-highlighted] {\n    z-index: 1;\n    position: relative;\n  }\n\n  &[data-highlighted]::before {\n    content: \"\";\n    z-index: -1;\n    position: absolute;\n    inset: 0;\n    border-radius: calc(var(--radius) - 2px);\n    background: var(--mix-accent-33-trans);\n  }\n\n  &[data-disabled] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.group {\n  padding: 0.25rem 0;\n}\n\n.groupLabel {\n  padding: 0.5rem 0.75rem 0.25rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n  color: var(--muted-foreground);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n.separator {\n  margin: 0.375rem 0.75rem;\n  height: 1px;\n  background-color: var(--border);\n}\n\n@media (max-width: 640px) {\n  .popup {\n    max-width: calc(100vw - 2rem);\n  }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/autocomplete/autocomplete.module.css"
    }
  ]
}
