{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-tailwind",
  "type": "registry:item",
  "title": "Button (Tailwind)",
  "description": "A button component.",
  "files": [
    {
      "path": "registry/brook/tailwind/ui/button.tsx",
      "content": "import { useRender } from \"@base-ui-components/react/use-render\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/tw-utils\";\n\nconst buttonVariants = cva(\n  [\n    \"group inline-flex items-center justify-center rounded-[var(--radius)] font-[450]\",\n    \"transition-transform duration-200 ease-[var(--ease-out-quad)]\",\n    \"relative cursor-pointer overflow-hidden border border-transparent outline-none\",\n    \"leading-[1.2] tracking-[-0.014em]\",\n    \"active:scale-[0.97] active:disabled:scale-100 active:[&.loading]:scale-100\",\n    \"focus-visible:outline-2 focus-visible:outline-[color:var(--color-ring)] focus-visible:outline-offset-2\",\n    \"disabled:cursor-not-allowed disabled:opacity-70\",\n    \"[&.loading]:cursor-not-allowed [&.loading]:opacity-70\",\n  ],\n  {\n    variants: {\n      variant: {\n        primary: [\n          \"bg-[color:var(--color-primary)] text-[color:var(--color-primary-foreground)]\",\n          \"shadow-[0_0.5px_0.5px_rgba(0,0,0,0.1)]\",\n          \"hover:bg-[color:oklch(from_var(--color-primary)_l_c_h_/_0.8)] hover:disabled:bg-[color:var(--color-primary)]\",\n        ],\n        secondary: [\n          \"bg-[color:var(--color-secondary)] text-[color:var(--color-secondary-foreground)]\",\n          \"hover:bg-[color:oklch(from_var(--color-secondary)_l_c_h_/_0.8)] hover:disabled:bg-[color:var(--color-secondary)]\",\n        ],\n        destructive: [\n          \"bg-[color:var(--color-destructive)] text-[color:var(--color-destructive-foreground)]\",\n          \"hover:bg-[color:oklch(from_var(--color-destructive)_l_c_h_/_0.85)] hover:disabled:bg-[color:var(--color-destructive)]\",\n        ],\n        ghost: [\n          \"bg-transparent text-[color:var(--color-foreground)]\",\n          \"hover:bg-[color:oklch(from_var(--color-accent)_l_c_h_/_0.66)] hover:disabled:bg-transparent\",\n        ],\n        outline: [\n          \"border-[color:oklch(from_var(--color-border)_l_c_h_/_0.7)] bg-[var(--mix-card-50-bg)] text-[color:var(--color-foreground)]\",\n          \"hover:bg-[var(--mix-card-66-bg)] hover:disabled:bg-[var(--mix-card-50-bg)]\",\n        ],\n        link: [\n          \"bg-transparent p-0 text-[color:var(--color-muted-foreground)] no-underline\",\n          \"transition-[text-decoration] duration-200 ease-out\",\n          \"hover:text-[color:var(--color-foreground)] hover:underline hover:disabled:text-[color:var(--color-muted-foreground)] hover:disabled:no-underline\",\n        ],\n      },\n      size: {\n        sm: \"h-8 px-3 text-sm\",\n        md: \"h-10 px-4 py-2 text-[0.925rem]\",\n        lg: \"h-12 px-6 py-2 text-base\",\n        icon: [\n          \"aspect-square h-auto w-auto p-1.5 text-sm\",\n          \"before:absolute before:top-1/2 before:left-1/2 before:block before:content-['']\",\n          \"before:-translate-x-1/2 before:-translate-y-1/2 before:h-full before:w-full\",\n          \"before:-z-10 before:min-h-[44px] before:min-w-[44px]\",\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"md\",\n    },\n  }\n);\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 animate-[spin_1s_linear_infinite]\"\n      fill=\"none\"\n      height=\"16\"\n      viewBox=\"0 0 24 24\"\n      width=\"16\"\n    >\n      <circle\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeDasharray=\"31.416\"\n        strokeDashoffset=\"31.416\"\n        strokeLinecap=\"round\"\n        strokeWidth=\"2\"\n        style={{\n          animation: \"spin 1s linear infinite\",\n        }}\n      />\n      <style>\n        {`\n          @keyframes spin {\n            from {\n              transform: rotate(0deg);\n              stroke-dashoffset: 31.416;\n            }\n            to {\n              transform: rotate(360deg);\n              stroke-dashoffset: 0;\n            }\n          }\n        `}\n      </style>\n    </svg>\n  );\n}\n\n/**\n * ArrowPointer component for displaying directional arrows within buttons.\n *\n * @param pointLeft - When true, arrow points left instead of right\n * @param pointExternal - When true, applies external link arrow styling (diagonal orientation)\n *\n * @example\n * ```tsx\n * // Right-pointing arrow (default)\n * <ArrowPointer />\n *\n * // Left-pointing arrow\n * <ArrowPointer pointLeft />\n *\n * // External link arrow\n * <ArrowPointer pointExternal />\n * ```\n */\nfunction ArrowPointer({\n  pointLeft = false,\n  pointExternal = false,\n}: {\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n}) {\n  const arrowClasses = cn(\n    \"-mt-px -mr-2 relative top-0 ml-2 h-3 w-3.5 overflow-visible\",\n    \"transition-all duration-200 ease-[var(--ease-in-out-cubic)]\",\n    pointLeft && \"-ml-2 mr-2\",\n    pointExternal && \"group-hover:-rotate-45 origin-[8%]\"\n  );\n\n  const pointClasses =\n    \"transition-all duration-200 ease-[var(--ease-in-out-cubic)] group-hover:translate-x-0.5\";\n  const shaftClasses =\n    \"transition-all duration-200 ease-[var(--ease-in-out-cubic)] opacity-0 group-hover:opacity-100 group-hover:-translate-x-0.5\";\n\n  const pointLeftClasses = \"group-hover:-translate-x-0.5\";\n  const shaftLeftClasses = \"group-hover:opacity-100 group-hover:translate-x-px\";\n\n  return (\n    <svg\n      className={arrowClasses}\n      fill=\"none\"\n      viewBox=\"0 0 14 10\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g fillRule=\"nonzero\">\n        <path\n          className={cn(pointClasses, pointLeft && pointLeftClasses)}\n          d={pointLeft ? \"M7.2 1l-4 4 4 4\" : \"M-0.8 1l4 4-4 4\"}\n          stroke=\"currentColor\"\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n        <path\n          className={cn(shaftClasses, pointLeft && shaftLeftClasses)}\n          d={pointLeft ? \"M7.2 5H2.2\" : \"M0 5h4.8\"}\n          stroke=\"currentColor\"\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n      </g>\n    </svg>\n  );\n}\n\ninterface ButtonProps\n  extends useRender.ComponentProps<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  showArrow?: boolean;\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n  loading?: boolean;\n}\n\nfunction Button({\n  render,\n  className,\n  variant,\n  size,\n  showArrow = false,\n  pointLeft = false,\n  pointExternal = false,\n  loading = false,\n  ...props\n}: ButtonProps) {\n  const decoratedChildren = (\n    <>\n      {loading && <Spinner />}\n      {!loading && showArrow && pointLeft && (\n        <ArrowPointer pointExternal={pointExternal} pointLeft />\n      )}\n      {props.children}\n      {!loading && showArrow && !pointLeft && (\n        <ArrowPointer pointExternal={pointExternal} />\n      )}\n    </>\n  );\n\n  return useRender({\n    defaultTagName: \"button\",\n    render,\n    props: {\n      ...props,\n      \"data-slot\": \"button\",\n      className: cn(\n        buttonVariants({ variant, size }),\n        loading && \"loading\",\n        className\n      ),\n      disabled: props.disabled || loading,\n      children: decoratedChildren,\n    },\n  });\n}\n\nButton.displayName = \"Button\";\n\nexport { Button, ArrowPointer };\n",
      "type": "registry:file",
      "target": "~/components/ui/button/button.tsx"
    }
  ]
}