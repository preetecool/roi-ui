{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel-tailwind",
  "type": "registry:item",
  "title": "Carousel (Tailwind)",
  "description": "A slideshow component for cycling through content.",
  "files": [
    {
      "path": "registry/brook/tailwind/ui/carousel.tsx",
      "content": "\"use client\";\n\nimport { useControlled } from \"@base-ui-components/utils/useControlled\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { cn } from \"@/lib/tw-utils\";\n\ntype CarouselContextValue = {\n  currentIndex: number;\n  setCurrentIndex: (index: number) => void;\n  totalItems: number;\n  gap: number;\n  variant: \"default\" | \"inset\";\n  goToIndex: (index: number) => void;\n  nextSlide: () => void;\n  prevSlide: () => void;\n  canGoNext: boolean;\n  canGoPrev: boolean;\n  viewportRef: React.RefObject<HTMLDivElement | null>;\n};\n\nconst CarouselContext = createContext<CarouselContextValue | null>(null);\n\nfunction useCarousel() {\n  const context = useContext(CarouselContext);\n  if (!context) {\n    throw new Error(\"Carousel components must be used within Carousel.Root\");\n  }\n  return context;\n}\n\nexport type CarouselRootProps = React.ComponentProps<\"div\"> & {\n  /** Total number of items in the carousel. */\n  totalItems: number;\n  /** Gap between items in pixels. @default 16 */\n  gap?: number;\n  /** Controlled index value. */\n  index?: number;\n  /** Default index for uncontrolled mode. @default 0 */\n  defaultIndex?: number;\n  /** Callback when index changes. */\n  onIndexChange?: (index: number) => void;\n  /** Align carousel content. @default \"start\" */\n  align?: \"start\" | \"center\";\n  /** Carousel variant. @default \"default\" */\n  variant?: \"default\" | \"inset\";\n};\n\n/** Root component. Manages state and provides context. */\nexport function Root({\n  children,\n  totalItems,\n  gap = 16,\n  index: indexProp,\n  defaultIndex = 0,\n  onIndexChange,\n  align = \"start\",\n  variant = \"default\",\n  className,\n  ...props\n}: CarouselRootProps) {\n  const [currentIndex, setCurrentIndexInternal] = useControlled({\n    controlled: indexProp,\n    default: defaultIndex,\n    name: \"Carousel\",\n    state: \"index\",\n  });\n\n  const viewportRef = useRef<HTMLDivElement>(null);\n  const bleedRefFromContext = useBleedRef();\n  const [insetPaddingLeft, setInsetPaddingLeft] = useState(0);\n  const [insetPaddingRight, setInsetPaddingRight] = useState(0);\n\n  const maxIndex = totalItems - 1;\n  const canGoNext = currentIndex < maxIndex;\n  const canGoPrev = currentIndex > 0;\n\n  const setCurrentIndex = useCallback(\n    (index: number) => {\n      setCurrentIndexInternal(index);\n      onIndexChange?.(index);\n    },\n    [setCurrentIndexInternal, onIndexChange]\n  );\n\n  const goToIndex = useCallback(\n    (index: number) => {\n      const viewport = viewportRef.current;\n      if (!viewport) {\n        return;\n      }\n\n      const slides = viewport.querySelectorAll('[role=\"group\"]');\n      const targetSlide = slides[index] as HTMLElement;\n\n      if (targetSlide) {\n        let targetScroll = targetSlide.offsetLeft;\n\n        // For inset variant, adjust scroll position to account for left padding\n        if (variant === \"inset\" && bleedRefFromContext?.current) {\n          const parent = bleedRefFromContext.current.parentElement;\n          if (parent) {\n            const parentRect = parent.getBoundingClientRect();\n            const leftPadding = parentRect.left;\n            targetScroll = targetSlide.offsetLeft - leftPadding;\n          }\n        }\n\n        viewport.scrollTo({ left: targetScroll, behavior: \"smooth\" });\n      }\n\n      setCurrentIndex(index);\n    },\n    [setCurrentIndex, variant, bleedRefFromContext]\n  );\n\n  const getVisibleItemsCount = useCallback(() => {\n    const viewport = viewportRef.current;\n    if (!viewport) {\n      return 1;\n    }\n\n    const slides = viewport.querySelectorAll('[role=\"group\"]');\n    if (slides.length === 0) {\n      return 1;\n    }\n\n    const viewportRect = viewport.getBoundingClientRect();\n    let visibleCount = 0;\n    const VISIBILITY_THRESHOLD = 0.5;\n\n    for (const slide of slides) {\n      const slideRect = slide.getBoundingClientRect();\n      // Check if slide is at least 50% visible in viewport\n      const visibleWidth =\n        Math.min(slideRect.right, viewportRect.right) -\n        Math.max(slideRect.left, viewportRect.left);\n      const slideWidth = slideRect.width;\n\n      if (visibleWidth / slideWidth >= VISIBILITY_THRESHOLD) {\n        visibleCount++;\n      }\n    }\n\n    return Math.max(1, visibleCount);\n  }, []);\n\n  const nextSlide = useCallback(() => {\n    const visibleItems = getVisibleItemsCount();\n    const newIndex = Math.min(currentIndex + visibleItems, maxIndex);\n    goToIndex(newIndex);\n  }, [currentIndex, maxIndex, goToIndex, getVisibleItemsCount]);\n\n  const prevSlide = useCallback(() => {\n    const visibleItems = getVisibleItemsCount();\n    const newIndex = Math.max(currentIndex - visibleItems, 0);\n    goToIndex(newIndex);\n  }, [currentIndex, goToIndex, getVisibleItemsCount]);\n\n  const value: CarouselContextValue = {\n    currentIndex,\n    setCurrentIndex,\n    totalItems,\n    gap,\n    variant,\n    goToIndex,\n    nextSlide,\n    prevSlide,\n    canGoNext,\n    canGoPrev,\n    viewportRef,\n  };\n\n  // Calculate inset padding based on parent container\n  useEffect(() => {\n    if (\n      variant !== \"inset\" ||\n      !bleedRefFromContext?.current ||\n      !viewportRef.current\n    ) {\n      return;\n    }\n\n    const calculatePadding = () => {\n      const bleed = bleedRefFromContext.current;\n      const viewport = viewportRef.current;\n      if (!(bleed && viewport)) {\n        return;\n      }\n\n      const parent = bleed.parentElement;\n      if (!parent) {\n        return;\n      }\n\n      const parentRect = parent.getBoundingClientRect();\n      const viewportRect = viewport.getBoundingClientRect();\n\n      // Get parent's computed padding to account for container padding\n      const parentStyles = window.getComputedStyle(parent);\n      const parentPaddingLeft = Number.parseFloat(parentStyles.paddingLeft);\n      const parentPaddingRight = Number.parseFloat(parentStyles.paddingRight);\n\n      // Calculate the padding needed to align cards with parent's content area (inside padding)\n      // Left padding: distance from viewport's left edge to parent's content left edge, minus gap\n      const leftPadding = Math.max(\n        0,\n        parentRect.left + parentPaddingLeft - viewportRect.left - gap\n      );\n\n      // Right padding: distance from parent's content right edge to viewport's right edge\n      const rightPadding = Math.max(\n        0,\n        viewportRect.right - (parentRect.right - parentPaddingRight)\n      );\n\n      setInsetPaddingLeft(leftPadding);\n      setInsetPaddingRight(rightPadding);\n    };\n\n    calculatePadding();\n\n    window.addEventListener(\"resize\", calculatePadding);\n    return () => window.removeEventListener(\"resize\", calculatePadding);\n  }, [variant, bleedRefFromContext, gap]);\n\n  return (\n    <CarouselContext.Provider value={value}>\n      <div\n        className={cn(\n          \"relative mx-auto w-full overflow-visible rounded-lg\",\n          align === \"center\" && \"flex flex-col items-center\",\n          className\n        )}\n        data-slot=\"carousel\"\n        style={\n          {\n            \"--calculated-inset-padding-left\": `${insetPaddingLeft}px`,\n            \"--calculated-inset-padding-right\": `${insetPaddingRight}px`,\n          } as React.CSSProperties\n        }\n        {...props}\n      >\n        {children}\n        <div\n          aria-atomic=\"true\"\n          aria-live=\"polite\"\n          className=\"-m-px absolute h-px w-px overflow-hidden whitespace-nowrap border-0 p-0\"\n          style={{ clip: \"rect(0, 0, 0, 0)\" }}\n        >\n          Item {currentIndex + 1} of {totalItems}\n        </div>\n      </div>\n    </CarouselContext.Provider>\n  );\n}\n\nexport type CarouselBleedProps = React.ComponentProps<\"div\">;\n\nconst BleedRefContext =\n  createContext<React.RefObject<HTMLDivElement | null> | null>(null);\n\nexport function useBleedRef() {\n  return useContext(BleedRefContext);\n}\n\n/** Bleed wrapper. Extends carousel to full viewport width. */\nexport function Bleed({ className, children, ...props }: CarouselBleedProps) {\n  const bleedRef = useRef<HTMLDivElement | null>(null);\n\n  return (\n    <BleedRefContext.Provider value={bleedRef}>\n      <div\n        className={cn(\n          \"-ml-[50vw] -mr-[50vw] relative right-1/2 left-1/2 w-screen max-sm:left-[calc(50%-20vw)]\",\n          className\n        )}\n        ref={bleedRef}\n        {...props}\n      >\n        {children}\n      </div>\n    </BleedRefContext.Provider>\n  );\n}\n\nexport type CarouselViewportProps = React.ComponentProps<\"div\">;\n\n/** Scrollable viewport. */\nexport function Viewport({\n  className,\n  children,\n  ...props\n}: CarouselViewportProps) {\n  const { viewportRef } = useCarousel();\n\n  return (\n    <div\n      aria-atomic=\"false\"\n      aria-live=\"polite\"\n      className={cn(\n        \"scroll-snap-stop-always relative w-full overflow-y-hidden overflow-x-scroll overscroll-x-contain\",\n        \"py-[calc(2px+2px)] [-ms-overflow-style:none] [scrollbar-width:none]\",\n        \"[&::-webkit-scrollbar]:hidden\",\n        className\n      )}\n      ref={viewportRef}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport type CarouselContentProps = React.ComponentProps<\"div\">;\n\n/** Content wrapper. Flex container for horizontal layout. */\nexport function Content({\n  className,\n  children,\n  ...props\n}: CarouselContentProps) {\n  const { gap, variant } = useCarousel();\n\n  return (\n    <div\n      className={cn(\n        \"flex items-stretch\",\n        \"before:w-[var(--inset-padding-left,0)] before:flex-shrink-0 before:content-['']\",\n        \"after:w-[var(--inset-padding-right,0)] after:flex-shrink-0 after:content-['']\",\n        className\n      )}\n      style={\n        {\n          gap: `${gap}px`,\n          \"--inset-padding-left\":\n            variant === \"inset\"\n              ? \"var(--calculated-inset-padding-left, max(var(--min-edge), var(--min-padding)))\"\n              : undefined,\n          \"--inset-padding-right\":\n            variant === \"inset\"\n              ? \"var(--calculated-inset-padding-right, max(var(--min-edge), var(--min-padding)))\"\n              : undefined,\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport type CarouselItemProps = React.ComponentProps<\"div\"> & {\n  /** Item index (required). */\n  index: number;\n};\n\n/** Individual carousel slide. */\nexport function Item({\n  index,\n  className,\n  children,\n  ...props\n}: CarouselItemProps) {\n  const { totalItems, goToIndex, nextSlide, prevSlide, canGoNext, canGoPrev } =\n    useCarousel();\n\n  const isVisible = true;\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent) => {\n      switch (e.key) {\n        case \"ArrowLeft\":\n          if (canGoPrev) {\n            e.preventDefault();\n            prevSlide();\n          }\n          break;\n        case \"ArrowRight\":\n          if (canGoNext) {\n            e.preventDefault();\n            nextSlide();\n          }\n          break;\n        case \"Home\":\n          e.preventDefault();\n          goToIndex(0);\n          break;\n        case \"End\":\n          e.preventDefault();\n          goToIndex(totalItems - 1);\n          break;\n        default:\n          // No action for other keys\n          break;\n      }\n    },\n    [canGoPrev, canGoNext, prevSlide, nextSlide, goToIndex, totalItems]\n  );\n\n  return (\n    // biome-ignore lint/a11y/noNoninteractiveElementInteractions: Keyboard navigation is required for carousel accessibility\n    <div\n      aria-label={`${index + 1} of ${totalItems}`}\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"relative flex-shrink-0\",\n        \"focus-visible:outline-2 focus-visible:outline-[color:var(--color-ring)] focus-visible:outline-offset-[1px]\",\n        className\n      )}\n      onKeyDown={handleKeyDown}\n      role=\"group\"\n      tabIndex={isVisible ? 0 : -1}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport type CarouselPreviousProps = React.ComponentProps<\"button\">;\n\n/** Previous button. Auto-disabled at start. */\nexport function Previous({\n  className,\n  children,\n  ...props\n}: CarouselPreviousProps) {\n  const { prevSlide, canGoPrev } = useCarousel();\n\n  return (\n    <button\n      aria-controls=\"carousel-slides\"\n      aria-label=\"Scroll to previous items\"\n      className={cn(\n        \"relative h-10 w-10 rounded-full border-[0.5px] border-[color:oklch(from_var(--border)_l_c_h_/_0.8)]\",\n        \"flex cursor-pointer items-center justify-center bg-[color:var(--card)] text-[color:var(--foreground)]\",\n        \"opacity-90 shadow-[var(--shadow-md)] transition-all duration-200 ease-[var(--ease-out-quad)]\",\n        \"hover:scale-105 hover:bg-[color:var(--muted)] hover:opacity-100\",\n        \"focus-visible:outline-2 focus-visible:outline-[color:var(--ring)] focus-visible:outline-offset-2\",\n        \"active:scale-95\",\n        \"disabled:pointer-events-none disabled:cursor-default disabled:bg-[color:var(--muted)] disabled:text-[color:var(--muted-foreground)] disabled:opacity-30\",\n        \"disabled:hover:scale-100 disabled:hover:bg-[color:var(--muted)] disabled:hover:opacity-30\",\n        \"motion-reduce:transition-none [&_svg]:h-4 [&_svg]:w-4\",\n        className\n      )}\n      disabled={!canGoPrev}\n      onClick={prevSlide}\n      type=\"button\"\n      {...props}\n    >\n      {children || (\n        <svg\n          aria-hidden=\"true\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m15 18-6-6 6-6\" />\n        </svg>\n      )}\n    </button>\n  );\n}\n\nexport type CarouselNextProps = React.ComponentProps<\"button\">;\n\n/** Next button. Auto-disabled at end. */\nexport function Next({ className, children, ...props }: CarouselNextProps) {\n  const { nextSlide, canGoNext } = useCarousel();\n\n  return (\n    <button\n      aria-controls=\"carousel-slides\"\n      aria-label=\"Scroll to next items\"\n      className={cn(\n        \"relative h-10 w-10 rounded-full border-[0.5px] border-[color:oklch(from_var(--border)_l_c_h_/_0.8)]\",\n        \"flex cursor-pointer items-center justify-center bg-[color:var(--card)] text-[color:var(--foreground)]\",\n        \"opacity-90 shadow-[var(--shadow-md)] transition-all duration-200 ease-[var(--ease-out-quad)]\",\n        \"hover:scale-105 hover:bg-[color:var(--muted)] hover:opacity-100\",\n        \"focus-visible:outline-2 focus-visible:outline-[color:var(--ring)] focus-visible:outline-offset-2\",\n        \"active:scale-95\",\n        \"disabled:pointer-events-none disabled:cursor-default disabled:bg-[color:var(--muted)] disabled:text-[color:var(--muted-foreground)] disabled:opacity-30\",\n        \"disabled:hover:scale-100 disabled:hover:bg-[color:var(--muted)] disabled:hover:opacity-30\",\n        \"motion-reduce:transition-none [&_svg]:h-4 [&_svg]:w-4\",\n        className\n      )}\n      disabled={!canGoNext}\n      onClick={nextSlide}\n      type=\"button\"\n      {...props}\n    >\n      {children || (\n        <svg\n          aria-hidden=\"true\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m9 18 6-6-6-6\" />\n        </svg>\n      )}\n    </button>\n  );\n}\n\nexport type CarouselNavigationProps = React.ComponentProps<\"div\">;\n\n/** Navigation wrapper. Renders default buttons if no children provided. Hidden with one item. */\nexport function Navigation({\n  className,\n  children,\n  ...props\n}: CarouselNavigationProps) {\n  const { totalItems, variant } = useCarousel();\n\n  if (totalItems <= 1) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\"mt-12 flex justify-center gap-2\", className)}\n      style={\n        variant === \"inset\"\n          ? ({\n              \"--inset-padding\": \"var(--calculated-inset-padding, 0)\",\n            } as React.CSSProperties)\n          : undefined\n      }\n      {...props}\n    >\n      {children || (\n        <>\n          <Previous />\n          <Next />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport type CarouselIndicatorsProps = React.ComponentProps<\"div\">;\n\n/** Dot indicators for each item. Hidden with one item. */\nexport function Indicators({ className, ...props }: CarouselIndicatorsProps) {\n  const { totalItems, currentIndex, goToIndex } = useCarousel();\n\n  if (totalItems <= 1) {\n    return null;\n  }\n\n  return (\n    <div\n      aria-label=\"Choose slide to display\"\n      className={cn(\n        \"-translate-x-1/2 absolute bottom-4 left-1/2 z-10 flex gap-2\",\n        className\n      )}\n      role=\"tablist\"\n      {...props}\n    >\n      {Array.from({ length: totalItems }, (_, index) => (\n        <button\n          aria-controls=\"carousel-slides\"\n          aria-label={`Scroll to item ${index + 1}`}\n          aria-selected={currentIndex === index}\n          className={cn(\n            \"relative h-3 w-3 cursor-pointer rounded-full border-none\",\n            \"bg-white/50 transition-all duration-200 ease-in-out\",\n            \"hover:scale-110 hover:bg-white/70\",\n            \"focus-visible:outline-2 focus-visible:outline-[color:var(--color-ring)] focus-visible:outline-offset-2\",\n            \"motion-reduce:transition-none\",\n            currentIndex === index &&\n              \"scale-[1.2] bg-[color:var(--color-primary)] hover:bg-[color:var(--color-primary)]\"\n          )}\n          // biome-ignore lint/suspicious/noArrayIndexKey: Indicators are stable and don't reorder\n          key={`indicator-${index}`}\n          onClick={() => goToIndex(index)}\n          role=\"tab\"\n          type=\"button\"\n        />\n      ))}\n    </div>\n  );\n}\n\n/**\n * Composable carousel component with horizontal scrolling.\n * Built-in keyboard navigation with arrow keys, Home, and End.\n * Built-in screen reader announcements for current position.\n * Required: Carousel.Root, Carousel.Viewport, Carousel.Content, Carousel.Item.\n * Optional: Carousel.Bleed, Carousel.Navigation, Carousel.Previous, Carousel.Next, Carousel.Indicators.\n */\nexport const Carousel = {\n  Root,\n  Bleed,\n  Viewport,\n  Content,\n  Item,\n  Previous,\n  Next,\n  Navigation,\n  Indicators,\n};\n",
      "type": "registry:file",
      "target": "~/components/ui/carousel/carousel.tsx"
    }
  ]
}