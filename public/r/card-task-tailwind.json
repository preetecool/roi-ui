{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-task-tailwind",
  "type": "registry:block",
  "title": "Card Task (Tailwind)",
  "description": "A task card component with badges, avatars, and action menu.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://roiui.com/r/alert-dialog-tailwind.json",
    "https://roiui.com/r/avatar-tailwind.json",
    "https://roiui.com/r/badge-tailwind.json",
    "https://roiui.com/r/button-tailwind.json",
    "https://roiui.com/r/card-tailwind.json",
    "https://roiui.com/r/combobox-tailwind.json",
    "https://roiui.com/r/dialog-tailwind.json",
    "https://roiui.com/r/dropdown-menu-tailwind.json",
    "https://roiui.com/r/tooltip-tailwind.json"
  ],
  "files": [
    {
      "path": "registry/brook/tailwind/blocks/card-task/card-task.tsx",
      "content": "\"use client\";\n\nimport { Calendar, ListTodo, MessageCircleMore, Users } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/registry/brook/tailwind/ui/badge\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/brook/tailwind/ui/card\";\nimport { AvatarGroup } from \"./avatar-group\";\nimport { CollaboratorDialog } from \"./collaborator-dialog\";\nimport { DeleteTaskAlertDialog } from \"./delete-task-alert-dialog\";\nimport { TaskCardDropdownMenu } from \"./task-card-dropdown-menu\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\nconst users: User[] = [\n  {\n    value: \"preetecool\",\n    label: \"preetecool\",\n    email: \"@preetecool\",\n    avatar: \"/preetecool.png\",\n  },\n  {\n    value: \"john-doe\",\n    label: \"John Doe\",\n    email: \"john@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\",\n  },\n  {\n    value: \"jane-smith\",\n    label: \"Jane Smith\",\n    email: \"jane@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=32&h=32&fit=crop&crop=face\",\n  },\n  {\n    value: \"mike-johnson\",\n    label: \"Mike Johnson\",\n    email: \"mike@example.com\",\n    avatar:\n      \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=32&h=32&fit=crop&crop=face\",\n  },\n];\n\nexport function CardTask() {\n  const [alertOpen, setAlertOpen] = useState(false);\n  const [collaboratorDialogOpen, setCollaboratorDialogOpen] = useState(false);\n  const [currentCollaborators, setCurrentCollaborators] = useState<User[]>([\n    users[0],\n  ]);\n  const [selectedCollaborators, setSelectedCollaborators] = useState<User[]>([\n    users[0],\n  ]);\n  const [newlyAddedCollaborators, setNewlyAddedCollaborators] = useState<\n    string[]\n  >([]);\n\n  const handleConfirm = () => {\n    const previousCollaborators = currentCollaborators;\n    setCurrentCollaborators(selectedCollaborators);\n\n    // Track newly added: items that weren't in the previous list OR were removed and re-added\n    const newlyAdded = selectedCollaborators\n      .filter((s) => !previousCollaborators.find((c) => c.value === s.value))\n      .map((s) => s.value);\n\n    // Preserve previously newly-added items that are still selected\n    const stillNewlyAdded = newlyAddedCollaborators.filter((value) =>\n      selectedCollaborators.find((s) => s.value === value)\n    );\n\n    // Combine: keep old newly-added + add new ones\n    setNewlyAddedCollaborators([\n      ...new Set([...stillNewlyAdded, ...newlyAdded]),\n    ]);\n    setCollaboratorDialogOpen(false);\n  };\n\n  const handleDialogOpen = (open: boolean) => {\n    if (open) {\n      // Reset selected to current when opening\n      setSelectedCollaborators([...currentCollaborators]);\n      // Clear newly added collaborators when opening\n      setNewlyAddedCollaborators([]);\n    }\n    setCollaboratorDialogOpen(open);\n  };\n\n  return (\n    <>\n      <Card className=\"w-full max-w-[300px] gap-4 p-4 xl:min-h-auto\">\n        <CardHeader>\n          <CardTitle style={{ fontSize: \"1rem\" }}>\n            {\" \"}\n            Update Documentation\n          </CardTitle>\n          <CardDescription>\n            Update the card component documentation to reflect the new style\n          </CardDescription>\n          <CardAction>\n            <TaskCardDropdownMenu\n              onAddCollaborator={() => handleDialogOpen(true)}\n              onDeleteTask={() => setAlertOpen(true)}\n            />\n          </CardAction>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex w-full items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Badge size=\"sm\" variant=\"destructive\">\n                <span>Urgent</span>\n              </Badge>\n              <Badge size=\"sm\">\n                <span>Docs</span>\n              </Badge>\n            </div>\n            <AvatarGroup users={currentCollaborators} />\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"mt-0 mb-0 flex flex-col gap-[0.65rem]\">\n          <div\n            style={{\n              padding: \"5px 0\",\n              width: \"calc(100% + 32px)\",\n              marginLeft: \"-16px\",\n              marginRight: \"-16px\",\n            }}\n          >\n            <div\n              style={{\n                height: \"1px\",\n                width: \"100%\",\n                borderBottom:\n                  \"0.5px solid oklch(from var(--border) l c h / 0.6)\",\n              }}\n            />\n          </div>\n          <div className=\"flex w-full justify-between text-[oklch(from_var(--muted-foreground)_l_c_h_/_0.6)] text-xs\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center justify-center gap-1\">\n                <Users size=\"14\" />\n\n                <span>{currentCollaborators.length}</span>\n              </div>\n              <div className=\"flex items-center justify-center gap-1\">\n                <MessageCircleMore size=\"14\" />\n                <span>4</span>\n              </div>\n              <div className=\"flex items-center justify-center gap-1\">\n                <ListTodo size=\"14\" />\n                <span>4/5</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center gap-1\">\n              <Calendar size=\"14\" />\n              <span className=\"text-[var(--warning-foreground)]\">1d </span>\n            </div>\n          </div>\n        </CardFooter>\n      </Card>\n\n      <DeleteTaskAlertDialog onOpenChange={setAlertOpen} open={alertOpen} />\n\n      <CollaboratorDialog\n        currentCollaborators={currentCollaborators}\n        onConfirm={handleConfirm}\n        onOpenChange={handleDialogOpen}\n        onSelectedCollaboratorsChange={setSelectedCollaborators}\n        open={collaboratorDialogOpen}\n        selectedCollaborators={selectedCollaborators}\n        users={users}\n      />\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/card-task.tsx"
    },
    {
      "path": "registry/brook/tailwind/blocks/card-task/avatar-group.tsx",
      "content": "import {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/brook/tailwind/ui/avatar\";\nimport {\n  Tooltip,\n  TooltipArrow,\n  TooltipPopup,\n  TooltipPortal,\n  TooltipPositioner,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/brook/tailwind/ui/tooltip\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\ntype AvatarGroupProps = {\n  users: User[];\n  maxDisplay?: number;\n};\n\nexport function AvatarGroup({ users, maxDisplay = 3 }: AvatarGroupProps) {\n  const displayUsers = users.slice(0, maxDisplay);\n  const remainingCount = users.length - maxDisplay;\n\n  return (\n    <TooltipProvider>\n      <div className=\"flex items-center\">\n        {displayUsers.map((user, index) => (\n          <Tooltip key={user.value}>\n            <TooltipTrigger\n              render={\n                <div className={index > 0 ? \"-ml-[6px]\" : \"\"}>\n                  <Avatar\n                    className=\"border-2 border-[var(--card)]\"\n                    style={{ width: \"24px\", height: \"24px\" }}\n                  >\n                    <AvatarImage\n                      alt={`profile image for ${user.label}`}\n                      src={user.avatar}\n                    />\n                    <AvatarFallback>\n                      {user.label\n                        ?.split(\" \")\n                        .map((n: string) => n[0])\n                        .join(\"\") || \"??\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </div>\n              }\n            />\n            <TooltipPortal>\n              <TooltipPositioner>\n                <TooltipPopup>\n                  <TooltipArrow />\n                  {user.label}\n                </TooltipPopup>\n              </TooltipPositioner>\n            </TooltipPortal>\n          </Tooltip>\n        ))}\n        {remainingCount > 0 && (\n          <div className=\"-ml-[6px] flex h-6 w-6 items-center justify-center rounded-full border-2 border-[var(--card)] bg-[var(--muted)] font-semibold text-[0.625rem] text-[var(--muted-foreground)]\">\n            +{remainingCount}\n          </div>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/avatar-group.tsx"
    },
    {
      "path": "registry/brook/tailwind/blocks/card-task/delete-task-alert-dialog.tsx",
      "content": "import { cn } from \"@/lib/tw-utils\";\nimport {\n  AlertDialog,\n  AlertDialogClose,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/registry/brook/tailwind/ui/alert-dialog\";\nimport { Button } from \"@/registry/brook/tailwind/ui/button\";\n\ntype DeleteTaskAlertDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport function DeleteTaskAlertDialog({\n  open,\n  onOpenChange,\n}: DeleteTaskAlertDialogProps) {\n  return (\n    <AlertDialog onOpenChange={onOpenChange} open={open}>\n      <AlertDialogContent\n        className={cn(\n          \"flex max-h-[300px] w-[clamp(250px,90vw,400px)] flex-col gap-4 rounded-2xl p-6\",\n          \"max-sm:!left-1/2 max-sm:!right-auto max-sm:!translate-x-[-50%] max-sm:!translate-y-[-50%]\"\n        )}\n      >\n        <AlertDialogHeader>\n          <AlertDialogTitle>Delete Task</AlertDialogTitle>\n          <AlertDialogDescription className=\"text-[var(--muted-foreground)]\">\n            Are you sure you want to delete this task?\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter className=\"mt-8 flex gap-3 [&>*]:flex-1\">\n          <AlertDialogClose\n            render={<Button variant=\"outline\">Cancel</Button>}\n          />\n          <Button onClick={() => onOpenChange(false)} variant=\"destructive\">\n            Delete\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/delete-task-alert-dialog.tsx"
    },
    {
      "path": "registry/brook/tailwind/blocks/card-task/task-card-dropdown-menu.tsx",
      "content": "import { Calendar, MoreHorizontal, Trash, UserPlus } from \"lucide-react\";\nimport { cn } from \"@/lib/tw-utils\";\nimport { Button } from \"@/registry/brook/tailwind/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuItem,\n  DropdownMenuPopup,\n  DropdownMenuPortal,\n  DropdownMenuPositioner,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/brook/tailwind/ui/dropdown-menu\";\n\ntype TaskCardDropdownMenuProps = {\n  onAddCollaborator: () => void;\n  onDeleteTask: () => void;\n};\n\nexport function TaskCardDropdownMenu({\n  onAddCollaborator,\n  onDeleteTask,\n}: TaskCardDropdownMenuProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger\n        render={(props) => (\n          <Button {...props} size=\"icon\" variant=\"ghost\">\n            <MoreHorizontal\n              size=\"16\"\n              style={{\n                color: \"oklch(from var(--muted-foreground) l c h / 0.8)\",\n              }}\n            />\n          </Button>\n        )}\n      />\n      <DropdownMenuPortal>\n        <DropdownMenuPositioner sideOffset={8}>\n          <DropdownMenuPopup render={<ul />} style={{ minWidth: \"160px\" }}>\n            <div style={{ height: \"4px\", width: \"100%\" }} />\n            <DropdownMenuItem\n              icon={<UserPlus size=\"14\" />}\n              onClick={onAddCollaborator}\n              render={<li />}\n            >\n              Add collaborator\n            </DropdownMenuItem>\n            <DropdownMenuItem icon={<Calendar size=\"14\" />} render={<li />}>\n              Change due date\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              className={cn(\n                \"relative isolate text-[var(--destructive)]\",\n                \"[&_svg]:text-[var(--destructive)]\",\n                \"before:!absolute before:!left-1 before:!right-1 before:!top-0 before:!bottom-0 before:!-z-[1] before:!rounded-[0.3rem] before:!bg-transparent before:!content-['']\",\n                \"hover:before:!bg-[var(--destructive)]\",\n                \"data-[highlighted]:before:!bg-[var(--destructive)]\",\n                \"hover:!text-[var(--destructive-foreground)]\",\n                \"data-[highlighted]:!text-[var(--destructive-foreground)]\",\n                \"hover:[&_svg]:!text-[var(--destructive-foreground)]\",\n                \"data-[highlighted]:[&_svg]:!text-[var(--destructive-foreground)]\"\n              )}\n              icon={<Trash size=\"14\" />}\n              onClick={onDeleteTask}\n              render={<li />}\n            >\n              Delete task\n            </DropdownMenuItem>\n            <div style={{ height: \"4px\", width: \"100%\" }} />\n          </DropdownMenuPopup>\n        </DropdownMenuPositioner>\n      </DropdownMenuPortal>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/task-card-dropdown-menu.tsx"
    },
    {
      "path": "registry/brook/tailwind/blocks/card-task/collaborator-dialog.tsx",
      "content": "import { useRef } from \"react\";\nimport { cn } from \"@/lib/tw-utils\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/brook/tailwind/ui/avatar\";\nimport { Button } from \"@/registry/brook/tailwind/ui/button\";\nimport {\n  Combobox,\n  ComboboxEmpty,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxList,\n  ComboboxPopup,\n  ComboboxPortal,\n  ComboboxPositioner,\n  ComboboxTrigger,\n} from \"@/registry/brook/tailwind/ui/combobox\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPopup,\n  DialogPortal,\n  DialogTitle,\n} from \"@/registry/brook/tailwind/ui/dialog\";\nimport {\n  Tooltip,\n  TooltipArrow,\n  TooltipPopup,\n  TooltipPortal,\n  TooltipPositioner,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/brook/tailwind/ui/tooltip\";\n\ntype User = {\n  value: string;\n  label: string;\n  email: string;\n  avatar: string;\n};\n\ntype CollaboratorDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  users: User[];\n  currentCollaborators: User[];\n  selectedCollaborators: User[];\n  onSelectedCollaboratorsChange: (collaborators: User[]) => void;\n  onConfirm: () => void;\n};\n\nexport function CollaboratorDialog({\n  open,\n  onOpenChange,\n  users,\n  currentCollaborators,\n  selectedCollaborators,\n  onSelectedCollaboratorsChange,\n  onConfirm,\n}: CollaboratorDialogProps) {\n  const comboboxAnchorRef = useRef<HTMLDivElement>(null);\n\n  const handleRemoveCollaborator = (userValue: string) => {\n    onSelectedCollaboratorsChange(\n      selectedCollaborators.filter((c) => c.value !== userValue)\n    );\n  };\n\n  return (\n    <Dialog onOpenChange={onOpenChange} open={open}>\n      <DialogPortal>\n        <DialogOverlay />\n        <DialogPopup className=\"max-w-[410px]\">\n          <DialogHeader>\n            <DialogTitle>Add Collaborator</DialogTitle>\n            <DialogDescription>\n              Invite a team member to collaborate on this task.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"flex flex-col gap-4\">\n            {/* Current Collaborators */}\n            <div>\n              <div className=\"mb-2 block font-medium text-sm\">\n                Current Collaborators\n              </div>\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <TooltipProvider>\n                  {selectedCollaborators?.map((collaborator, index) => {\n                    const isNewlyAdded = !currentCollaborators.some(\n                      (c) => c.value === collaborator.value\n                    );\n                    const lastIndex = selectedCollaborators.length - 1;\n                    const isLast = index === lastIndex;\n                    const isFirst = index === 0;\n\n                    return (\n                      <Tooltip key={collaborator.value}>\n                        <TooltipTrigger\n                          render={\n                            <div className=\"group relative inline-block\">\n                              <Avatar\n                                className={cn(\n                                  \"h-8 w-8 rounded-full border-2 transition-[border]\",\n                                  isNewlyAdded\n                                    ? \"border-[var(--success)]\"\n                                    : \"border-transparent\"\n                                )}\n                              >\n                                <AvatarImage\n                                  alt={collaborator.label}\n                                  src={collaborator.avatar}\n                                />\n                                <AvatarFallback>\n                                  {collaborator.label\n                                    ?.split(\" \")\n                                    .map((n: string) => n[0])\n                                    .join(\"\") || \"??\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <button\n                                className={cn(\n                                  \"-top-1 -right-1 absolute flex h-[18px] w-[18px] cursor-pointer items-center justify-center rounded-full border-2 border-[var(--background)] bg-[var(--destructive)] font-semibold text-[10px] text-[var(--destructive-foreground)] leading-none transition-all hover:scale-110 hover:bg-[oklch(from_var(--destructive)_calc(l*0.9)_c_h)]\",\n                                  \"focus-visible:pointer-events-auto focus-visible:opacity-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-[var(--ring)] focus-visible:outline-offset-2\",\n                                  isLast && !isFirst\n                                    ? \"pointer-events-auto opacity-100\"\n                                    : \"pointer-events-none opacity-0 group-hover:pointer-events-auto group-hover:opacity-100\"\n                                )}\n                                onClick={() =>\n                                  handleRemoveCollaborator(collaborator.value)\n                                }\n                                type=\"button\"\n                              >\n                                ×\n                              </button>\n                            </div>\n                          }\n                        />\n                        <TooltipPortal>\n                          <TooltipPositioner>\n                            <TooltipPopup>\n                              <TooltipArrow />\n                              {collaborator.label}\n                            </TooltipPopup>\n                          </TooltipPositioner>\n                        </TooltipPortal>\n                      </Tooltip>\n                    );\n                  })}\n                </TooltipProvider>\n              </div>\n            </div>\n\n            {/* Add New Collaborator */}\n            <div className=\"flex flex-col gap-2\">\n              <div className=\"font-medium text-sm\">Add New Collaborator</div>\n              <Combobox\n                items={users}\n                itemToStringLabel={(item) => item?.label || \"\"}\n                itemToStringValue={(item) => item?.value || \"\"}\n                // @ts-expect-error - Base UI Combobox multiple prop type inference issue\n                multiple={true}\n                onValueChange={(value) => {\n                  if (value && Array.isArray(value)) {\n                    onSelectedCollaboratorsChange(value as User[]);\n                  }\n                }}\n                // @ts-expect-error - Base UI Combobox value type with multiple=true\n                value={selectedCollaborators}\n              >\n                <div\n                  className=\"relative flex w-full items-center rounded-[var(--radius)] border border-[var(--border)] bg-[var(--mix-card-50-bg)] transition-all duration-150 has-[:focus-visible]:outline has-[:focus-visible]:outline-2 has-[:focus-visible]:outline-[var(--ring)] has-[:focus-visible]:outline-offset-2\"\n                  ref={comboboxAnchorRef}\n                >\n                  <ComboboxInput placeholder=\"Search users...\" />\n                  <ComboboxTrigger />\n                </div>\n\n                <ComboboxPortal>\n                  <ComboboxPositioner anchor={comboboxAnchorRef}>\n                    <ComboboxPopup className=\"w-[var(--anchor-width)]\">\n                      <ComboboxEmpty>No user found.</ComboboxEmpty>\n                      <ComboboxList>\n                        {(user: User) => (\n                          <ComboboxItem\n                            indicatorPosition=\"right\"\n                            key={user.value}\n                            value={user}\n                          >\n                            <div className=\"flex flex-1 items-center gap-4\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarImage\n                                  alt={user.label}\n                                  src={user.avatar}\n                                />\n                                <AvatarFallback>\n                                  {user.label\n                                    .split(\" \")\n                                    .map((n: string) => n[0])\n                                    .join(\"\")}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"text-left\">\n                                <div className=\"font-medium text-sm\">\n                                  {user.label}\n                                </div>\n                                <div className=\"text-[var(--muted-foreground)] text-xs\">\n                                  {user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </ComboboxItem>\n                        )}\n                      </ComboboxList>\n                    </ComboboxPopup>\n                  </ComboboxPositioner>\n                </ComboboxPortal>\n              </Combobox>\n            </div>\n          </div>\n\n          <DialogFooter className=\"mt-8 flex gap-3 [&>*]:flex-1\">\n            <DialogClose render={<Button variant=\"outline\">Cancel</Button>} />\n            <Button onClick={onConfirm}>Confirm</Button>\n          </DialogFooter>\n        </DialogPopup>\n      </DialogPortal>\n    </Dialog>\n  );\n}\n",
      "type": "registry:file",
      "target": "~/components/blocks/card-task/collaborator-dialog.tsx"
    }
  ]
}