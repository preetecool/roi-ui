{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:item",
  "title": "Button",
  "description": "A button component.",
  "files": [
    {
      "path": "registry/brook/ui/button/button.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { useRender } from \"@base-ui-components/react/use-render\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport styles from \"./button.module.css\";\n\nconst buttonVariants = cva(styles.base, {\n  variants: {\n    variant: {\n      primary: styles.primary,\n      secondary: styles.secondary,\n      destructive: styles.destructive,\n      ghost: styles.ghost,\n      outline: styles.outline,\n      link: styles.link,\n    },\n    size: {\n      sm: styles.sm,\n      md: styles.md,\n      lg: styles.lg,\n      icon: styles.icon,\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n    size: \"md\",\n  },\n});\n\nfunction Spinner() {\n  return (\n    <svg\n      className={styles.spinner}\n      fill=\"none\"\n      height=\"16\"\n      viewBox=\"0 0 24 24\"\n      width=\"16\"\n    >\n      <circle\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeDasharray=\"31.416\"\n        strokeDashoffset=\"31.416\"\n        strokeLinecap=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n}\n\n/**\n * ArrowPointer component for displaying directional arrows within buttons.\n *\n * @param pointLeft - When true, arrow points left instead of right\n * @param pointExternal - When true, applies external link arrow styling (diagonal orientation)\n *\n * @example\n * ```tsx\n * // Right-pointing arrow (default)\n * <ArrowPointer />\n *\n * // Left-pointing arrow\n * <ArrowPointer pointLeft />\n *\n * // External link arrow\n * <ArrowPointer pointExternal />\n * ```\n */\nfunction ArrowPointer({\n  pointLeft = false,\n  pointExternal = false,\n}: {\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n}) {\n  return (\n    <svg\n      className={cn(\n        styles.arrow,\n        pointLeft && styles.arrowLeft,\n        pointExternal && styles.arrowExternal,\n      )}\n      fill=\"none\"\n      viewBox=\"0 0 14 10\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g fillRule=\"nonzero\">\n        <path\n          className={styles.arrowPoint}\n          d={pointLeft ? \"M7.2 1l-4 4 4 4\" : \"M-0.8 1l4 4-4 4\"}\n          stroke=\"currentColor\"\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n        <path\n          className={styles.arrowShaft}\n          d={pointLeft ? \"M7.2 5H2.2\" : \"M0 5h4.8\"}\n          stroke=\"currentColor\"\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n      </g>\n    </svg>\n  );\n}\n\ninterface ButtonProps\n  extends useRender.ComponentProps<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  showArrow?: boolean;\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n  loading?: boolean;\n}\n\nfunction Button({\n  render,\n  className,\n  variant,\n  size,\n  showArrow = false,\n  pointLeft = false,\n  pointExternal = false,\n  loading = false,\n  ...props\n}: ButtonProps) {\n  const decoratedChildren = (\n    <>\n      {loading && <Spinner />}\n      {!loading && showArrow && pointLeft && (\n        <ArrowPointer pointExternal={pointExternal} pointLeft />\n      )}\n      {props.children}\n      {!loading && showArrow && !pointLeft && (\n        <ArrowPointer pointExternal={pointExternal} />\n      )}\n    </>\n  );\n\n  return useRender({\n    defaultTagName: \"button\",\n    render,\n    props: {\n      ...props,\n      \"data-slot\": \"button\",\n      className: cn(\n        buttonVariants({ variant, size }),\n        loading && styles.loading,\n        className,\n      ),\n      disabled: props.disabled || loading,\n      children: decoratedChildren,\n    },\n  });\n}\n\nButton.displayName = \"Button\";\n\nexport { Button };\n",
      "type": "registry:file",
      "target": "~/components/ui/button/button.tsx"
    },
    {
      "path": "registry/brook/ui/button/button.module.css",
      "content": ".base {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--radius);\n  font-weight: 400;\n  transition: all 0.2s var(--ease-out-quad);\n  cursor: pointer;\n  border: 1px solid transparent;\n  outline: none;\n  position: relative;\n  overflow: hidden;\n  line-height: 1.2;\n  letter-spacing: -0.014em;\n}\n.base:active:not(:disabled):not(.loading) {\n  transform: scale(0.97);\n}\n\n.base:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n.base:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.base.loading {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.primary {\n  background-color: var(--primary);\n  color: var(--primary-foreground);\n}\n\n.primary:hover:not(:disabled) {\n  background-color: oklch(from var(--primary) l c h / 0.8);\n}\n\n.secondary {\n  background-color: var(--secondary);\n  color: var(--secondary-foreground);\n}\n\n.secondary:hover:not(:disabled) {\n  background-color: oklch(from var(--secondary) l c h / 0.8);\n}\n\n.destructive {\n  background-color: var(--destructive);\n  color: var(--destructive-foreground);\n}\n\n.destructive:hover:not(:disabled) {\n  background-color: oklch(from var(--destructive) l c h / 0.85);\n}\n\n.ghost {\n  background-color: transparent;\n  color: var(--foreground);\n}\n\n.ghost:hover:not(:disabled) {\n  background-color: oklch(from var(--accent) l c h / 0.33);\n}\n\n.outline {\n  background-color: var(--mix-card-50-bg);\n  color: var(--foreground);\n  border: 1px solid var(--border);\n}\n\n.outline:hover:not(:disabled) {\n  background-color: var(--mix-card-66-bg);\n}\n\n.link {\n  background-color: transparent;\n  color: var(--muted-foreground);\n  padding: 0;\n  text-decoration: none;\n  transition: text-decoration 0.2s ease-out;\n}\n\n.link:hover:not(:disabled) {\n  text-decoration: underline;\n  color: var(--foreground);\n}\n\n.sm {\n  height: 2rem;\n  padding: 0 0.75rem;\n  font-size: 0.875rem;\n}\n\n.md {\n  height: 2.5rem;\n  padding: 0.5rem 1rem;\n  font-size: 0.925rem;\n}\n\n.lg {\n  height: 3rem;\n  padding: 0.5rem 1.5rem;\n  font-size: 1rem;\n}\n\n.icon {\n  height: auto;\n  width: auto;\n  padding: 0.25rem;\n  font-size: 0.875rem;\n  aspect-ratio: 1;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.icon::before {\n  content: \"\";\n  position: absolute;\n  display: block;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  height: 100%;\n  min-height: 44px;\n  min-width: 44px;\n  z-index: -1;\n}\n\n.arrow {\n  margin-top: -1px;\n  margin-left: 8px;\n  margin-right: -8px;\n  position: relative;\n  top: 0px;\n  overflow: visible;\n  width: 14px;\n  height: 12px;\n  transition: 200ms var(--ease-in-out-cubic);\n}\n\n.arrowLeft {\n  margin-left: -8px;\n  margin-right: 8px;\n}\n\n.arrowExternal {\n  transform-origin: 8%;\n  transition: transform 200ms var(--ease-in-out-cubic);\n}\n\n.base:hover .arrowExternal {\n  transform: rotate(-45deg);\n}\n\n.arrowPoint {\n  transition: 200ms var(--ease-in-out-cubic);\n}\n\n.arrowShaft {\n  transition: 200ms var(--ease-in-out-cubic);\n  opacity: 0;\n}\n\n.base:hover .arrowPoint {\n  transform: translateX(2px);\n}\n\n.base:hover .arrowShaft {\n  opacity: 1;\n  transform: translateX(-2px);\n}\n\n.base:hover .arrowLeft .arrowPoint {\n  transform: translateX(-2px);\n}\n\n.base:hover .arrowLeft .arrowShaft {\n  opacity: 1;\n  transform: translateX(1px);\n}\n\n.spinner {\n  margin-right: 0.5rem;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n    stroke-dashoffset: 31.416;\n  }\n  to {\n    transform: rotate(360deg);\n    stroke-dashoffset: 0;\n  }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/button/button.module.css"
    }
  ]
}