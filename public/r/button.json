{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:item",
  "title": "Button",
  "description": "A button component.",
  "files": [
    {
      "path": "registry/brook/ui/button/button.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport styles from \"./button.module.css\";\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"destructive\" | \"ghost\" | \"outline\" | \"link\";\n  size?: \"sm\" | \"md\" | \"lg\" | \"icon\";\n  showArrow?: boolean;\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n  loading?: boolean;\n  ref?: React.Ref<HTMLButtonElement>;\n}\n\nconst Spinner = () => {\n  return (\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" className={styles.spinner}>\n      <circle\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeDasharray=\"31.416\"\n        strokeDashoffset=\"31.416\"\n      />\n    </svg>\n  );\n};\n\nconst ArrowPointer = ({\n  pointLeft = false,\n  pointExternal = false,\n}: {\n  pointLeft?: boolean;\n  pointExternal?: boolean;\n}) => {\n  return (\n    <svg\n      viewBox=\"0 0 14 10\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(styles.arrow, pointLeft && styles.arrowLeft, pointExternal && styles.arrowExternal)}\n    >\n      <g fillRule=\"nonzero\">\n        <path\n          d={pointLeft ? \"M9 1l-4 4 4 4\" : \"M1 1l4 4-4 4\"}\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"butt\"\n          strokeLinejoin=\"miter\"\n          className={styles.arrowPoint}\n        />\n        <path\n          d={pointLeft ? \"M8.2 5H4\" : \"M1 5h4.8\"}\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          className={styles.arrowShaft}\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const Button = ({\n  className,\n  variant = \"primary\",\n  size = \"md\",\n  showArrow = false,\n  pointLeft = false,\n  pointExternal = false,\n  loading = false,\n  children,\n  ref,\n  ...props\n}: ButtonProps) => {\n  return (\n    <button\n      ref={ref}\n      className={cn(styles.base, styles[variant], styles[size], loading && styles.loading, className)}\n      disabled={props.disabled}\n      {...props}\n    >\n      {loading && <Spinner />}\n      {!loading && showArrow && pointLeft && <ArrowPointer pointLeft pointExternal={pointExternal} />}\n      {children}\n      {!loading && showArrow && !pointLeft && <ArrowPointer pointExternal={pointExternal} />}\n    </button>\n  );\n};\n\nButton.displayName = \"Button\";\n",
      "type": "registry:file",
      "target": "~/components/ui/button/button.tsx"
    },
    {
      "path": "registry/brook/ui/button/button.module.css",
      "content": ".base {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: var(--radius);\n    font-weight: 400;\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n    border: none;\n    outline: none;\n    position: relative;\n    overflow: hidden;\n}\n.base:active {\n    transform: scale(0.97);\n}\n\n.base:focus-visible {\n    outline: 2px solid var(--ring);\n    outline-offset: 2px;\n}\n\n.base:disabled {\n    opacity: 0.7;\n    cursor: not-allowed;\n}\n\n.base.loading {\n    opacity: 0.7;\n    cursor: default;\n}\n\n.primary {\n    background-color: var(--primary);\n    color: var(--primary-foreground);\n}\n\n.primary:hover:not(:disabled) {\n    opacity: 0.85;\n}\n\n.secondary {\n    background-color: var(--secondary);\n    color: var(--secondary-foreground);\n}\n\n.secondary:hover:not(:disabled) {\n    opacity: 0.8;\n}\n\n.destructive {\n    background-color: var(--destructive);\n    color: var(--destructive-foreground);\n}\n\n.destructive:hover:not(:disabled) {\n    opacity: 0.9;\n}\n\n.ghost {\n    background-color: transparent;\n    color: var(--foreground);\n}\n\n.ghost:hover:not(:disabled) {\n    background-color: color-mix(in oklab, var(--muted) 20%, var(--secondary) 80%);\n}\n\n.outline {\n    background-color: color-mix(in oklab, var(--card) 20%, transparent 80%);\n    color: var(--foreground);\n    border: 1px solid var(--border);\n}\n\n.outline:hover:not(:disabled) {\n    background-color: var(--accent);\n}\n\n.link {\n    background-color: transparent;\n    color: var(--muted-foreground);\n    padding: 0;\n    text-decoration: none;\n    transition: text-decoration 0.2s ease;\n}\n\n.link:hover:not(:disabled) {\n    text-decoration: underline;\n    color: var(--foreground);\n}\n\n.sm {\n    height: 2.1125rem;\n    padding: 0 0.75rem;\n    font-size: 0.875rem;\n}\n\n.md {\n    height: 2.5rem;\n    padding: 0.5rem 1rem;\n    font-size: 0.925rem;\n}\n\n.lg {\n    height: 3rem;\n    padding: 0.5rem 1.5rem;\n    font-size: 1rem;\n}\n\n.icon {\n    height: auto;\n    width: auto;\n    padding: 0.25rem;\n    font-size: 0.875rem;\n    aspect-ratio: 1;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.arrow {\n    margin-left: 8px;\n    margin-right: -8px;\n    position: relative;\n    top: 0px;\n    overflow: visible;\n    width: 14px;\n    height: 12px;\n    transition: transform 150 ease-in-out;\n}\n\n.arrowLeft {\n    margin-left: -8px;\n    margin-right: 8px;\n}\n\n.arrowExternal {\n    transition: 150ms ease-in-out;\n}\n\n.base:hover .arrowExternal {\n    transform: rotate(-45deg);\n    margin-top: -8px;\n}\n\n.arrowPoint {\n    transition: all 150ms ease-in;\n    transform: translateX(0);\n}\n\n.arrowShaft {\n    transition: all 150ms ease-in;\n    opacity: 0;\n    transform: translateX(0);\n}\n\n.base:hover .arrowPoint {\n    transform: translateX(2px);\n}\n\n.base:hover .arrowShaft {\n    opacity: 1;\n    transform: translateX(-1px);\n}\n\n.base:hover .arrowLeft .arrowPoint {\n    transform: translateX(-2px);\n}\n\n.base:hover .arrowLeft .arrowShaft {\n    opacity: 1;\n    transform: translateX(1px);\n}\n\n.spinner {\n    margin-right: 0.5rem;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from {\n        transform: rotate(0deg);\n        stroke-dashoffset: 31.416;\n    }\n    to {\n        transform: rotate(360deg);\n        stroke-dashoffset: 0;\n    }\n}\n",
      "type": "registry:file",
      "target": "~/components/ui/button/button.module.css"
    }
  ]
}