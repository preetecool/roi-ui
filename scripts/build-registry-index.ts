import type { Dirent } from "node:fs";
import { promises as fs } from "node:fs";
import path from "node:path";

const FILE_EXTENSION_REGEX = /\.(tsx?|jsx?)$/;

async function buildRegistryIndex() {
  const examplesDir = path.join(process.cwd(), "registry/brook/examples");
  const blocksDir = path.join(process.cwd(), "registry/brook/blocks");

  const examplesEntries = await fs.readdir(examplesDir, {
    withFileTypes: true,
  });

  let blocksEntries: Dirent[] = [];
  try {
    blocksEntries = await fs.readdir(blocksDir, { withFileTypes: true });
  } catch {
    // blocks directory might not exist
  }

  let index = `
// Do not edit this file directly.
import * as React from "react";

export const Index: Record<string, any> = {`;

  // Process examples
  for (const entry of examplesEntries) {
    const name = entry.name.replace(FILE_EXTENSION_REGEX, "");

    // Check if it's a file or folder
    const isFile = entry.isFile();
    const componentPath = isFile
      ? `@/registry/brook/examples/${name}`
      : `@/registry/brook/examples/${name}/${name}`;

    index += `
  "${name}": {
    name: "${name}",
    type: "example",
    component: React.lazy(async () => {
      const mod = await import("${componentPath}");
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "${name}";
      return { default: mod.default || mod[exportName] };
    }),
  },`;
  }

  // Process blocks
  for (const entry of blocksEntries) {
    const name = entry.name.replace(FILE_EXTENSION_REGEX, "");

    // Check if it's a file or folder
    const isFile = entry.isFile();
    const componentPath = isFile
      ? `@/registry/brook/blocks/${name}`
      : `@/registry/brook/blocks/${name}/${name}`;

    index += `
  "${name}": {
    name: "${name}",
    type: "block",
    component: React.lazy(async () => {
      const mod = await import("${componentPath}");
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "${name}";
      return { default: mod.default || mod[exportName] };
    }),
  },`;
  }

  index += `
}
`;

  console.log(`✅ ${examplesEntries.length} examples found`);
  console.log(`✅ ${blocksEntries.length} blocks found`);

  // Write index file
  const outputPath = path.join(process.cwd(), "registry/__index__.tsx");
  await fs.mkdir(path.dirname(outputPath), { recursive: true });
  await fs.writeFile(outputPath, index);

  console.log("✅ Built registry/__index__.tsx");
}

buildRegistryIndex().catch((error) => {
  console.error(error);
  process.exit(1);
});
